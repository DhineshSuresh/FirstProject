<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.html2pdf</name>
    </assembly>
    <members>
        <member name="T:iText.Html2pdf.Attach.Attacher">
            <summary>
            Helper class to add parsed HTML content to an existing iText document,
            or to parse HTML to a list of iText elements.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Attacher.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Attacher"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Attacher.Attach(iText.Html2pdf.Html.Node.IDocumentNode,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Attaches the HTML content stored in a document node to
            an existing PDF document, using specific converter properties,
            and returning an iText
            <see cref="T:iText.Layout.Document"/>
            object.
            </summary>
            <param name="documentNode">the document node with the HTML</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            an iText
            <see cref="T:iText.Layout.Document"/>
            object
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Attacher.Attach(iText.Html2pdf.Html.Node.IDocumentNode,iText.Html2pdf.ConverterProperties)">
            <summary>
            Attaches the HTML content stored in a document node to
            a list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects.
            </summary>
            <param name="documentNode">the document node with the HTML</param>
            <param name="converterProperties">
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            the list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.IHtmlProcessor">
            <summary>
            Interface for classes that can process HTML to PDF in the form of a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            or a list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.IHtmlProcessor.ProcessDocument(iText.Html2pdf.Html.Node.INode,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Parses HTML to add the content to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            .
            </summary>
            <param name="root">the root node of the HTML that needs to be parsed</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.IHtmlProcessor.ProcessElements(iText.Html2pdf.Html.Node.INode)">
            <summary>
            Parses HTML to add the content to a list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects.
            </summary>
            <param name="root">the root node of the HTML that needs to be parsed</param>
            <returns>the resulting list</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor">
            <summary>The default implementation to process HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.logger">
            <summary>The logger instance.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.ignoredTags">
            <summary>Set of tags that do not map to any tag worker and that are deliberately excluded from the logging.
                </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.ignoredCssTags">
            <summary>Set of tags to which we do not want to apply CSS to and that are deliberately excluded from the logging
                </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.ignoredChildTags">
            <summary>Set of tags that might be not processed by some tag workers and that are deliberately excluded from the logging.
                </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.context">
            <summary>The processor context.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.roots">
            <summary>A list of parent objects that result from parsing the HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.cssResolver">
            <summary>The CSS resolver.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.#ctor(iText.Html2pdf.ConverterProperties)">
            <summary>Instantiates a new default html processor.</summary>
            <param name="converterProperties">the converter properties</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.Visit(iText.Html2pdf.Html.Node.INode)">
            <summary>Recursively processes a node converting HTML into PDF using tag workers.</summary>
            <param name="node">the node</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.AddFontFaceFonts">
            <summary>Adds @font-face fonts to the FontProvider.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.CreateFont(System.String,iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc)">
            <summary>Creates a font and adds it to the context.</summary>
            <param name="fontFamily">the font family</param>
            <param name="src">the source of the font</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.SupportedFontFormat(iText.Html2pdf.Attach.Impl.FontFace.FontFormat)">
            <summary>Checks whether in general we support requested font format.</summary>
            <param name="format">
            
            <see cref="!:FontFormat"/>
            </param>
            <returns>true, if supported or unrecognized.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.VisitPseudoElement(iText.Html2pdf.Html.Node.IElementNode,System.String)">
            <summary>Processes a pseudo element (before and after CSS).</summary>
            <param name="node">the node</param>
            <param name="pseudoElementName">the pseudo element name</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.FindElement(iText.Html2pdf.Html.Node.INode,System.String)">
            <summary>Find an element in a node.</summary>
            <param name="node">the node</param>
            <param name="tagName">the tag name</param>
            <returns>the element node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.FindHtmlNode(iText.Html2pdf.Html.Node.INode)">
            <summary>Find the HTML node.</summary>
            <param name="node">the node</param>
            <returns>the i element node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.FindBodyNode(iText.Html2pdf.Html.Node.INode)">
            <summary>Find the BODY node.</summary>
            <param name="node">the node</param>
            <returns>the i element node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.IsDisplayable(iText.Html2pdf.Html.Node.IElementNode)">
            <summary>Checks if an element should be displayed.</summary>
            <param name="element">the element</param>
            <returns>true, if the element should be displayed</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory">
            <summary>
            The default implementation of a tag worker factory, mapping tags to
            tag worker implementations.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.defaultMapping">
            <summary>The default mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.#ctor">
            <summary>Instantiates a new default tag worker factory.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.GetInstance">
            <summary>
            Gets
            <see cref="T:iText.Html2pdf.Attach.ITagWorkerFactory"/>
            instance.
            </summary>
            <returns>default instance that is used if custom tag workers are not configured</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.GetTagWorkerClass(iText.Html2pdf.Util.TagProcessorMapping,iText.Html2pdf.Html.Node.IElementNode)">
            <summary>Gets the tag worker class for a specific element node.</summary>
            <param name="mapping">the mapping</param>
            <param name="tag">the element node</param>
            <returns>the tag worker class</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.GetCustomTagWorker(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>This is a hook method.</summary>
            <remarks>
            This is a hook method. Users wanting to provide a custom mapping
            or introduce their own ITagWorkers should implement this method.
            </remarks>
            <param name="tag">the tag</param>
            <param name="context">the context</param>
            <returns>the custom tag worker</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping">
            <summary>
            Contains the actual mapping of the
            <see cref="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory"/>
            .
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping.workerMapping">
            <summary>The worker mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping.GetDefaultTagWorkerMapping">
            <summary>Gets the default tag worker mapping.</summary>
            <returns>the default mapping</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.FontFace">
            <summary>
            Class that will examine the font as described in the CSS, and store it
            in a form that the font provider will understand.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.alias">
            <summary>Name that will be used as the alias of the font.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.sources">
            <summary>A list of font face sources.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.Create(System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration})">
            <summary>
            Create a
            <see cref="T:iText.Html2pdf.Attach.Impl.FontFace"/>
            instance from a list of
            CSS font attributes ("font-family" or "src").
            </summary>
            <param name="properties">the font properties</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.Attach.Impl.FontFace"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.GetFontFamily">
            <summary>Gets the font-family.</summary>
            <remarks>
            Gets the font-family.
            Actually font-family is an alias.
            </remarks>
            <returns>the font family (or alias)</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.GetSources">
            <summary>Gets the font face sources.</summary>
            <returns>the sources</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.#ctor(System.String,System.Collections.Generic.IList{iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc})">
            <summary>Instantiates a new font face.</summary>
            <param name="alias">the font-family (or alias)</param>
            <param name="sources">the sources</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc">
            <summary>Class that defines a font face source.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.UrlPattern">
            <summary>The UrlPattern used to compose a source path.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.TypeGroup">
            <summary>The Constant TypeGroup.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.UrlGroup">
            <summary>The Constant UrlGroup.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.FormatGroup">
            <summary>The Constant FormatGroup.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.format">
            <summary>The font format.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.src">
            <summary>The source path.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.isLocal">
            <summary>Indicates if the font is local.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.Create(System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Attach.Impl.FontFace"/>
            object by parsing a
            <see cref="T:System.String"/>
            trying to match patterns that reveal the font name, whether that font is local,
            and which format the font is in.
            </summary>
            <param name="src">a string containing information about a font</param>
            <returns>
            the font in the form of a
            <see cref="T:iText.Html2pdf.Attach.Impl.FontFace"/>
            object
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.ParseFormat(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            to a font format.
            </summary>
            <param name="formatStr">a string</param>
            <returns>a font format</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.Unquote(System.String)">
            <summary>
            Removes single and double quotes at the start and the end of a
            <see cref="T:System.String"/>
            .
            </summary>
            <param name="quotedString">
            a
            <see cref="T:System.String"/>
            that might be between quotes
            </param>
            <returns>
            the
            <see cref="T:System.String"/>
            without the quotes
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc.#ctor(System.String,System.Boolean,iText.Html2pdf.Attach.Impl.FontFace.FontFormat)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.FontFace.FontFaceSrc"/>
            instance.
            </summary>
            <param name="src">a source path</param>
            <param name="isLocal">indicates if the font is local</param>
            <param name="format">the font format (true type, open type, woff,...)</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.FontFace.FontFormat">
            <summary>The Enum FontFormat.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer">
            <summary>
            This class is used to store styles of
            <c>&lt;html&gt;</c>
            and
            <c>&lt;body&gt;</c>
            tags,
            to simplify their application on the document as an
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty"/>
            and to simplify their processing on the layout level.
            This class is primarily meant for internal usage.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.properties">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.SetProperty(System.Int32,System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasProperty(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasOwnProperty(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.DeleteOwnProperty(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetProperty``1(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetOwnProperty``1(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetDefaultProperty``1(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasBordersToDraw">
            <summary>
            This method is needed to check if we need to draw a simulated
            <see cref="T:iText.Layout.Element.Div"/>
            element,
            i.e. to perform any drawing at all.
            </summary>
            <returns>true if there is at least one Border present in the container</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasStylesToApply">
            <summary>This method is needed to check if there are styles applied on the current element.</summary>
            <returns>true if in the container there are present styles which impact the layout</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetTotalWidth">
            <summary>
            This method calculates the total widths of TOP-, RIGHT-, BOTTOM- and LEFT- side styles,
            each combined of widths of applied margins, borders and paddings.
            </summary>
            <returns>a float array containing applied TOP-, RIGHT-, BOTTOM- and LEFT- side widths of styles respectively
                </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField">
            <summary>An abstract class for fields that represents a control for selecting one or several of the provided options.
                </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField.AddOption(iText.Layout.Element.IBlockElement)">
            <summary>Adds a container with option(s).</summary>
            <remarks>Adds a container with option(s). This might be a container for options group.</remarks>
            <param name="optionElement">a container with option(s)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField.GetOptions">
            <summary>Gets a list of containers with option(s).</summary>
            <remarks>Gets a list of containers with option(s). Every container might be a container for options group.
                </remarks>
            <returns>a list of containers with option(s)</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Button">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a input with type button or submit in html
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Button.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Button"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ButtonContainer">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a button in html
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ButtonContainer.Add(iText.Layout.Element.IBlockElement)">
            <summary>Adds any block element to the div's contents.</summary>
            <param name="element">
            a
            <see cref="T:iText.Layout.Element.BlockElement`1"/>
            </param>
            <returns>this Element</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ButtonContainer.Add(iText.Layout.Element.Image)">
            <summary>Adds an image to the div's contents.</summary>
            <param name="element">
            an
            <see cref="T:iText.Layout.Element.Image"/>
            </param>
            <returns>this Element</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a checkbox so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer"/>
            is used instead of the default renderer for fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ComboBoxField">
            <summary>A field that represents a control for selecting one of the provided options.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ComboBoxField.#ctor(System.String)">
            <summary>Creates a new select field box.</summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1">
            <summary>
            Implementation of the
            <see cref="T:iText.Layout.Element.AbstractElement`1"/>
            class for form fields.
            </summary>
            
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1.id">
            <summary>The id.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1.#ctor(System.String)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField">
            <summary>
            Interface extending the
            <see cref="T:iText.Layout.Element.ILeafElement"/>
            interface in the context of form fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField.GetId">
            <summary>Gets the id.</summary>
            <returns>the id</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a button so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer"/>
            is used.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField.#ctor(System.String)">
            <summary>Creates a new input field.</summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ListBoxField">
            <summary>A field that represents a control for selecting one or several of the provided options.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ListBoxField.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>Creates a new list box field.</summary>
            <param name="size">the size of the list box, which will define the height of visible properties, shall be greater than zero
                </param>
            <param name="allowMultipleSelection">a boolean flag that defines whether multiple options are allowed to be selected at once
                </param>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a radio button so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer"/>
            is used instead of the default renderer for fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a button so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer"/>
            is used instead of the default renderer for fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for form fields.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.flatRenderer">
            <summary>The flat renderer.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.IsFlatten">
            <summary>Checks if form fields need to be flattened.</summary>
            <returns>true, if fields need to be flattened</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.GetDefaultValue">
            <summary>Gets the default value of the form field.</summary>
            <returns>the default value of the form field</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.AdjustFieldLayout">
            <summary>Adjusts the field layout.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.CreateFlatRenderer">
            <summary>Creates the flat renderer instance.</summary>
            <returns>the renderer instance</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.ApplyAcroField(iText.Layout.Renderer.DrawContext)">
            <summary>Applies the AcroField widget.</summary>
            <param name="drawContext">the draw context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.GetModelId">
            <summary>Gets the model id.</summary>
            <returns>the model id</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.IsRendererFit(System.Single,System.Single)">
            <summary>Checks if the renderer fits a certain width and height.</summary>
            <param name="availableWidth">the available width</param>
            <param name="availableHeight">the available height</param>
            <returns>true, if the renderer fits</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.GetContentWidth">
            <summary>Gets the content width.</summary>
            <returns>the content width</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for a single line of text content in a form field.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.baseline">
            <summary>The position of the base line of the text.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.CropContentLines(System.Collections.Generic.IList{iText.Layout.Renderer.LineRenderer},iText.Kernel.Geom.Rectangle)">
            <summary>Crops the content lines.</summary>
            <param name="lines">a list of lines</param>
            <param name="bBox">the bounding box</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.UpdateParagraphHeight">
            <summary>Updates the paragraph height.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.SetContentHeight(iText.Layout.Renderer.IRenderer,System.Single)">
            <summary>Sets the content height.</summary>
            <param name="flatRenderer">the flat renderer</param>
            <param name="height">the height</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for select form fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer.IsFlatten">
            <summary>Checks if form fields need to be flattened.</summary>
            <returns>true, if fields need to be flattened</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer.GetModelId">
            <summary>Gets the model id.</summary>
            <returns>the model id</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for form fields with text content.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.font">
            <summary>The font to be used for the text.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.CreateParagraphRenderer(System.String)">
            <summary>Creates a paragraph renderer.</summary>
            <param name="defaultValue">the default value</param>
            <returns>the renderer</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.AdjustNumberOfContentLines(System.Collections.Generic.IList{iText.Layout.Renderer.LineRenderer},iText.Kernel.Geom.Rectangle,System.Int32)">
            <summary>Adjust number of content lines.</summary>
            <param name="lines">the lines that need to be rendered</param>
            <param name="bBox">the bounding box</param>
            <param name="rows">the desired number of lines</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.AdjustNumberOfContentLines(System.Collections.Generic.IList{iText.Layout.Renderer.LineRenderer},iText.Kernel.Geom.Rectangle,System.Single)">
            <summary>Adjust number of content lines.</summary>
            <param name="lines">the lines that need to be rendered</param>
            <param name="bBox">the bounding box</param>
            <param name="height">the desired height of content</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.ApplyDefaultFieldProperties(iText.Forms.Fields.PdfFormField)">
            <summary>Applies the default field properties.</summary>
            <param name="inputField">the input field</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.UpdatePdfFont(iText.Layout.Renderer.ParagraphRenderer)">
            <summary>Updates the font.</summary>
            <param name="renderer">the renderer</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonContainerRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for buttons with kids.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonContainerRenderer.GetModelId">
            <summary>Gets the model id.</summary>
            <returns>the model id</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonContainerRenderer.IsFlatten">
            <summary>Checks if form fields need to be flattened.</summary>
            <returns>true, if fields need to be flattened</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonContainerRenderer.GetDefaultValue">
            <summary>Gets the default value of the form field.</summary>
            <returns>the default value of the form field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for buttons with no kids.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer.isSplit">
            <summary>Indicates of the content was split.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.Button)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for checkboxes.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer.IsBoxChecked">
            <summary>Defines whether the box is checked or not.</summary>
            <returns>the default value of the checkbox field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for input fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.GetSize">
            <summary>Gets the size of the input field.</summary>
            <returns>the input field size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.IsPassword">
            <summary>Checks if the input field is a password field.</summary>
            <returns>true, if the input field is a password field</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.ObfuscatePassword(System.String)">
            <summary>Obfuscates the content of a password input field.</summary>
            <param name="text">the password</param>
            <returns>a string consisting of '*' characters.</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for radio buttons.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer.IsBoxChecked">
            <summary>Defines whether the radio is checked or not.</summary>
            <returns>the default value of the radio field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer"/>
            implementation for select field renderer.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer"/>
            implementation for select field renderer.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer.SetFontColorRecursively(iText.Layout.Renderer.IRenderer)">
            <summary>
            The `select` tag has default color css property, therefore it makes sense to explicitly override this property to all children,
            otherwise it will be not applied due to the css resolving mechanism.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer"/>
            implementation for text area fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer.GetCols">
            <summary>Gets the number of columns.</summary>
            <returns>the cols value of the text area field</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer.GetRows">
            <summary>Gets the number of rows.</summary>
            <returns>the rows value of the text area field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty">
            <summary>Set of constants that will be used as keys to get and set properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.PROPERTY_START">
            <summary>The Constant PROPERTY_START.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.KEEP_WITH_PREVIOUS">
            <summary>The Constant KEEP_WITH_PREVIOUS works only for top-level elements, i.e.</summary>
            <remarks>The Constant KEEP_WITH_PREVIOUS works only for top-level elements, i.e. ones that are added to the document directly.
                </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.PAGE_COUNT_TYPE">
            <summary>The Constant PAGE_COUNT_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_FLATTEN">
            <summary>The Constant FORM_FIELD_FLATTEN for form related properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_SIZE">
            <summary>The Constant FORM_FIELD_SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_VALUE">
            <summary>The Constant FORM_FIELD_VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_PASSWORD_FLAG">
            <summary>The Constant FORM_FIELD_PASSWORD_FLAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_COLS">
            <summary>The Constant FORM_FIELD_COLS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_ROWS">
            <summary>The Constant FORM_FIELD_ROWS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_CHECKED">
            <summary>The Constant FORM_FIELD_CHECKED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.BODY_STYLING">
            <summary>The Constant BODY_STYLING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.HTML_STYLING">
            <summary>The Constant HTML_STYLING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_MULTIPLE">
            <summary>The Constant FORM_FIELD_MULTIPLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_SELECTED">
            <summary>The Constant FORM_FIELD_SELECTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_LABEL">
            <summary>The Constant FORM_FIELD_SELECTED.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer">
            <summary>The DocumentRenderer class for HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.TRIM_LAST_BLANK_PAGE">
            <summary>The Constant TRIM_LAST_BLANK_PAGE.</summary>
            <remarks>
            The Constant TRIM_LAST_BLANK_PAGE.
            In a future version, we might want to expose this value to the users,
            or make it a public setting of the HTML renderer.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.firstPageProc">
            <summary>The page context processor for the first page.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.leftPageProc">
            <summary>The page context processor for all left pages.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.rightPageProc">
            <summary>The page context processor for all right pages.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.evenPagesAreLeft">
            <summary>Indicates if even pages are considered as left or right.</summary>
            <remarks>
            Indicates if even pages are considered as left or right.
            Important: this value might differ depending on page progression direction,
            as well as because the first page break-before might change right page to left (in ltr cases),
            but a blank page will not be added.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.waitingElement">
            <summary>
            The waiting element, an child element is kept waiting for the
            next element to process the "keep with previous" property.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.shouldTrimFirstBlankPagesCausedByBreakBeforeFirstElement">
            <summary>
            Indicates if the first blank pages caused by a break-before-first
            element should be trimmed.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.anythingAddedToCurrentArea">
            <summary>Indicates if anything was added to the current area.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.estimatedNumberOfPages">
            <summary>The estimated number of pages.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.#ctor(iText.Layout.Document,System.Boolean)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer"/>
            instance.
            </summary>
            <param name="document">
            an iText
            <see cref="T:iText.Layout.Document"/>
            instance
            </param>
            <param name="immediateFlush">the immediate flush indicator</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.ProcessPageRules(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Resolve.ICssResolver,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Processes the page rules.</summary>
            <param name="rootNode">the root node</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.GetEstimatedNumberOfPages">
            <summary>Gets the estimated number of pages.</summary>
            <returns>the estimated number of pages</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.GetPageProcessor(System.Int32)">
            <summary>Gets a page processor for the page.</summary>
            <param name="pageNum">
            the number of the page for which the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor"/>
            shall be obtained
            </param>
            <returns>a page processor</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.IsPageLeft(System.Int32)">
            <summary>Checks if the current page is a left page.</summary>
            <returns>true, if is current page left</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.IsPageRight(System.Int32)">
            <summary>Checks if the current page is a right page.</summary>
            <returns>true, if is current page right</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak">
            <summary>
            The HTML implementation of an
            <see cref="T:iText.Layout.Element.AreaBreak"/>
            .
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak.breakType">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType"/>
            .
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak.#ctor(iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType)">
            <summary>Instantiates a new html page break.</summary>
            <param name="type">the page break type</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak.GetBreakType">
            <summary>
            Gets the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType"/>
            .
            </summary>
            <returns>the page break type</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType">
            <summary>Enumeration of the HTML page break types.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor">
            <summary>Context processor for specific types of pages: first, left, or right page.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.pageSize">
            <summary>The page size.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.marks">
            <summary>Marks for page boundaries.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.bleed">
            <summary>The bleed value for the margin.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.margins">
            <summary>The margins.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.borders">
            <summary>The borders.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.paddings">
            <summary>The paddings.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.pageBackgroundSimulation">
            <summary>Page background simulation.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.pageBordersSimulation">
            <summary>Page borders simulation.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.#ctor(iText.Html2pdf.Attach.Impl.Layout.PageContextProperties,iText.Html2pdf.Attach.ProcessorContext,iText.Kernel.Geom.PageSize,System.Single[])">
            <summary>Instantiates a new page context processor.</summary>
            <param name="properties">the page context properties</param>
            <param name="context">the processor context</param>
            <param name="defaultPageSize">the default page size</param>
            <param name="defaultPageMargins">the default page margins</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.Reset(iText.Kernel.Geom.PageSize,System.Single[])">
            <summary>
            Re-initializes page context processor based on default current page size and page margins
            and on properties from css page at-rules.
            </summary>
            <remarks>
            Re-initializes page context processor based on default current page size and page margins
            and on properties from css page at-rules. Css properties priority is higher than default document values.
            </remarks>
            <param name="defaultPageSize">current default page size to be used if it is not defined in css</param>
            <param name="defaultPageMargins">current default page margins to be used if they are not defined in css</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.GetPageSize">
            <summary>Gets the page size.</summary>
            <returns>the page size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ComputeLayoutMargins">
            <summary>Compute layout margins.</summary>
            <returns>the float values of the margins</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ProcessPageEnd(System.Int32,iText.Kernel.Pdf.PdfDocument,iText.Layout.Renderer.DocumentRenderer)">
            <summary>Finalizes page processing by drawing margins if necessary.</summary>
            <param name="pageNum">the page to process</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to which content is written
            </param>
            <param name="documentRenderer">the document renderer</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ProcessNewPage(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Processes a new page by setting the bleed value, adding marks, drawing
            page backgrounds and borders.
            </summary>
            <param name="page">the page to process</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.SetBleed(iText.Kernel.Pdf.PdfPage)">
            <summary>Sets the bleed value for a page.</summary>
            <param name="page">the new bleed</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawMarks(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Sets the different page boundaries and draws printer marks on the page
            (if necessary).
            </summary>
            <param name="page">the page</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawCross(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws a cross (used in the
            <see cref="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawMarks(iText.Kernel.Pdf.PdfPage)"/>
            method).
            </summary>
            <param name="canvas">the canvas to draw on</param>
            <param name="x">the x value</param>
            <param name="y">the y value</param>
            <param name="horizontalCross">true if horizontal</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawPageBackgroundAndBorders(iText.Kernel.Pdf.PdfPage)">
            <summary>Draws page background and borders.</summary>
            <param name="page">the page</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawMarginBoxes(System.Int32,iText.Kernel.Pdf.PdfDocument,iText.Layout.Renderer.DocumentRenderer)">
            <summary>Draws margin boxes.</summary>
            <param name="pageNumber">the page</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to which content is written
            </param>
            <param name="documentRenderer">the document renderer</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParseMarks(System.String)">
            <summary>Parses the marks.</summary>
            <param name="marksStr">
            a
            <see cref="T:System.String"/>
            value defining the marks
            </param>
            <returns>
            a
            <see cref="!:Java.Util.Set&lt;E&gt;"/>
            of mark values
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParseMargins(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single,System.Single[])">
            <summary>Parses the margins.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParsePaddings(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Parses the paddings.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParseBorders(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Parses the borders.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.CreatePageSimulationElements(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Creates the page simulation elements.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.PrepareMarginBoxesSizing(System.Collections.Generic.IList{iText.Html2pdf.Css.Page.PageMarginBoxContextNode})">
            <summary>Creates the margin boxes elements.</summary>
            <param name="resolvedPageMarginBoxes">the resolved page margin boxes</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.CalculateMarginBoxRectangles(System.Collections.Generic.IList{iText.Html2pdf.Css.Page.PageMarginBoxContextNode})">
            <summary>Calculate margin box rectangles.</summary>
            <param name="resolvedPageMarginBoxes">the resolved page margin boxes</param>
            <returns>
            an array of
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            values
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.CalculateContainingBlockSizesForMarginBox(System.Int32,iText.Kernel.Geom.Rectangle)">
            <summary>Calculate containing block sizes for margin box.</summary>
            <param name="marginBoxInd">the margin box index</param>
            <param name="pageMarginBoxRectangle">
            a
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            defining dimensions of the page margin box corresponding to the given index
            </param>
            <returns>the corresponding rectangle</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.MapMarginBoxNameToIndex(System.String)">
            <summary>Maps a margin box name to an index.</summary>
            <param name="marginBoxName">the margin box name</param>
            <returns>the index corresponding with the margin box name</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.RemoveAreaBreaks(iText.Layout.Renderer.IRenderer)">
            <summary>Gets rid of all page breaks that might have occurred inside page margin boxes because of the running elements.
                </summary>
            <param name="renderer">root renderer of renderers subtree</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties">
            <summary>
            Properties class for the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor"/>
            .
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.pageMarginBoxNames">
            <summary>List containing possible names for page margin boxes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.pageContextNode">
            <summary>The page context node.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.pageMarginBoxes">
            <summary>The page margin boxes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.#ctor(iText.Html2pdf.Css.Page.PageContextNode,System.Collections.Generic.IList{iText.Html2pdf.Css.Page.PageMarginBoxContextNode})">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties"/>
            instance.
            </summary>
            <param name="pageProps">the page context node</param>
            <param name="pagesMarginBoxes">the page margin boxes</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.Resolve(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Resolve.ICssResolver,iText.Html2pdf.Css.Resolve.CssContext,System.String[])">
            <summary>
            Resolves a node with a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties"/>
            instance as result.
            </summary>
            <param name="rootNode">the root node to resolve</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the CSS context</param>
            <param name="pageClasses">the page classes</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties"/>
            for a specific node
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedMarginBoxes(iText.Html2pdf.Css.Page.PageContextNode,iText.Html2pdf.Css.Resolve.ICssResolver,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Gets the resolved margin boxes.</summary>
            <param name="pageClassNode">the page contex node</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the CSS context</param>
            <returns>the resolved margin boxes</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedPageClassNode(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Resolve.ICssResolver,iText.Html2pdf.Css.Resolve.CssContext,System.String[])">
            <summary>Gets the resolved page class node.</summary>
            <param name="rootNode">the root node</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the CSS context</param>
            <param name="pageClasses">the page classes</param>
            <returns>the resolved page class node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedPageContextNode">
            <summary>Gets the resolved page context node.</summary>
            <returns>the resolved page context node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedPageMarginBoxes">
            <summary>Gets the resolved page margin boxes.</summary>
            <returns>the resolved page margin boxes</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageCountElement">
            <summary>
            <see cref="T:iText.Layout.Element.Text"/>
            implementation to be used for the page count.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountElement.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageCountElement"/>
            .
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageCountRenderer">
            <summary>
            <see cref="T:iText.Layout.Renderer.TextRenderer"/>
            implementation for the page count.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.PageCountElement)">
            <summary>Instantiates a new page count renderer.</summary>
            <param name="textElement">the text element</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageCountType">
            <summary>Enumeration of page count types.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser">
            <summary>The Class PageSizeParser.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.pageSizeConstants">
            <summary>A Map mapping page size names to page size values.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.FetchPageSize(System.String,System.Single,System.Single,iText.Kernel.Geom.PageSize)">
            <summary>Fetch the page size.</summary>
            <param name="pageSizeStr">the name of the page size ("a4", "letter",...)</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="defaultPageSize">the default page size</param>
            <returns>the page size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.ParsePageLengthValue(System.String[],System.Single,System.Single)">
            <summary>Parses a page length value into a page size.</summary>
            <param name="pageSizeChunks">array of string values that represent the page size</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the page size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.TryParsePageLengthValue(System.String,System.Single,System.Single)">
            <summary>Try to parse a page length value.</summary>
            <param name="valueChunk">a string containing a value</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the value as a float</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.IsLengthValue(System.String)">
            <summary>Checks if a string represents length value.</summary>
            <param name="pageSizeChunk">the string that possibly represents a length value</param>
            <returns>true, if the string represents a length value</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.IsLandscapePortraitValue(System.String)">
            <summary>Checks if a string represents the CSS value for landscape or portrait orientation.</summary>
            <param name="pageSizeChunk">the string that possibly represents a landscape or portrait value</param>
            <returns>true, if the string represents a landscape or portrait value</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.RunningElement">
            <summary>
            An
            <see cref="T:iText.Layout.Element.IElement"/>
            that serves as a placeholder for removed running element
            from the normal flow. This element is designed to register where particular running element would have been placed.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElement.#ctor(iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.RunningElement"/>
            .
            </summary>
            <param name="runningElementContainer">a container for the actual running element removed from the normal flow.
                </param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.RunningElement.RunningElementRenderer">
            <summary>It's an empty div so it's not expected to be ever split between areas.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer">
            <summary>A wrapper for the running elements taken out of the normal flow.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ITagWorker)">
            <summary>
            Initializes a new instance of
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer"/>
            that contains
            given running element
            <see cref="T:iText.Html2pdf.Html.Node.IElementNode"/>
            and
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instances.
            </summary>
            <param name="runningElement">
            the
            <see cref="T:iText.Html2pdf.Html.Node.IElementNode"/>
            of the running element.
            </param>
            <param name="processedElementWorker">
            the
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            that was created for the running element
            and have been already completely processed (with all running element children).
            </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.SetOccurrencePage(System.Int32,System.Boolean)">
            <summary>Sets the page on which underlying running element was to be placed.</summary>
            <param name="pageNum">the 1-based index of the page on which running element was to be placed.</param>
            <param name="firstOnPage">specifies if the given running element would have placed as the first element on the page or not.
                </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.GetOccurrencePage">
            <summary>Gets the page on which underlying running element was to be placed.</summary>
            <returns>the 1-based index of the page or 0 if element page is not yet defined.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.IsFirstOnPage">
            <summary>Specifies if the given running element would have placed as the first element on the page or not.
                </summary>
            <remarks>
            Specifies if the given running element would have placed as the first element on the page or not.
            Returned value only makes sense if
            <see cref="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.GetOccurrencePage"/>
            returns value greater than 0.
            </remarks>
            <returns>true if it would be the first element on the page, otherwise false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Html2pdf.Attach.Impl.LinkContext" -->
        <member name="F:iText.Html2pdf.Attach.Impl.LinkContext.linkDestinations">
            <summary>the ids currently in use as valid link destinations</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.LinkContext.#ctor">
            <summary>Construct an (empty) LinkContext</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.LinkContext.ScanForIds(iText.Html2pdf.Html.Node.INode)">
            <summary>Scan the DOM tree for all (internal) link targets</summary>
            <param name="root">the DOM tree root node</param>
            <returns>this LinkContext</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.LinkContext.IsUsedLinkDestination(System.String)">
            <summary>Returns whether a given (internal) link destination is used by at least one href element in the document
                </summary>
            <param name="linkDestination">link destination</param>
            <returns>whether a given (internal) link destination is used by at least one href element in the document</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Html2pdf.Attach.Impl.OutlineHandler" -->
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.DESTINATION_PREFIX">
            <summary>The Constant DESTINATION_PREFIX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.currentOutline">
            <summary>The current outline.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.destinationsInProcess">
            <summary>The destinations in process.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.levelsInProcess">
            <summary>The levels in process.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.tagPrioritiesMapping">
            <summary>The tag priorities mapping.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.uniqueIDs">
            <summary>The unique IDs.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.CreateStandardHandler">
            <summary>Creates an OutlineHandler with standard predefined mappings.</summary>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.PutTagPriorityMapping(System.String,System.Nullable{System.Int32})">
            <summary>Put tag priority mapping.</summary>
            <param name="tagName">the tag name</param>
            <param name="priority">the priority</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.PutAllTagPriorityMappings(System.Collections.Generic.IDictionary{System.String,System.Nullable{System.Int32}})">
            <summary>Put all tag priority mappings.</summary>
            <param name="mappings">the mappings</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GetTagPriorityMapping(System.String)">
            <summary>Gets the tag priority mapping.</summary>
            <param name="tagName">the tag name</param>
            <returns>the tag priority mapping</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.HasTagPriorityMapping(System.String)">
            <summary>Checks for tag priority mapping.</summary>
            <param name="tagName">the tag name</param>
            <returns>true, if the tag name is listed in the tag priorities mapping</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.Reset">
            <summary>
            Resets the current state so that this
            <see cref="T:iText.Html2pdf.Attach.Impl.OutlineHandler"/>
            is ready to process new document
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.AddOutline(iText.Html2pdf.Attach.ITagWorker,iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Adds the outline.</summary>
            <param name="tagWorker">the tag worker</param>
            <param name="element">the element</param>
            <param name="context">the processor context</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.AddDestination(iText.Html2pdf.Attach.ITagWorker,iText.Html2pdf.Html.Node.IElementNode)">
            <summary>Adds the destination.</summary>
            <param name="tagWorker">the tag worker</param>
            <param name="element">the element</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GetUniqueID(System.String)">
            <summary>Gets the unique ID.</summary>
            <param name="key">the key</param>
            <returns>the unique ID</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker">
            <summary>
            Tag worker class for the
            <c>abbr</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker"/>
            instance.
            </summary>
            <param name="tag">the tag</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker.EnrichSpan(System.String)">
            <summary>Enrich the span with accessibility features, more specifically the expansion text.</summary>
            <param name="expansionText">the expansion text</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ABlockTagWorker">
            <summary>TagWorker class for a link block.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ABlockTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ABlockTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ATagWorker">
            <summary>
            TagWorker class for the
            <c>a</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ATagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ATagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker">
            <summary>
            TagWorker class for the
            <c>body</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker.parentTagWorker">
            <summary>The parent tag worker.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker">
            <summary>
            TagWorker class for the
            <c>br</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker.newLine">
            <summary>A new line Text element.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker">
            <summary>TagWorker class for a button element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker.DEFAULT_BUTTON_NAME">
            <summary>The Constant DEFAULT_BUTTON_NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker.formField">
            <summary>The button.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker">
            <summary>TagWorker class for a column group.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker.colgroup">
            <summary>The column group.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker.GetColgroup">
            <summary>Gets the column group.</summary>
            <returns>the column group</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker">
            <summary>TagWorker class for a column.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker.col">
            <summary>The column.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker.GetColumn">
            <summary>Gets the column.</summary>
            <returns>the column</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker">
            <summary>TagWorker class for a table row element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.rowWrapper">
            <summary>The row wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.inlineHelper">
            <summary>The helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.waitingCell">
            <summary>The cell waiting for flushing.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.GetTableRowWrapper">
            <summary>Gets the table row wrapper.</summary>
            <returns>the table row wrapper</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.ProcessCell(iText.Layout.Element.Cell,System.Boolean)">
            <summary>Processes a cell.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.FlushInlineElementsToWaitingCell">
            <summary>Flushes inline elements to the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.FlushWaitingCell">
            <summary>Flushes the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.CreateWrapperCell">
            <summary>Creates a wrapper cell.</summary>
            <returns>the cell</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker">
            <summary>TagWorker class for a table element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.table">
            <summary>The table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.tableWrapper">
            <summary>The table wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.inlineHelper">
            <summary>The helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.waitingCell">
            <summary>The cell waiting for flushing.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.currentRowIsFinished">
            <summary>The flag which indicates whether.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.ProcessCell(iText.Layout.Element.Cell,System.Boolean)">
            <summary>Processes a cell.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.FlushInlineElementsToWaitingCell">
            <summary>Flushes inline elements to the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.FlushWaitingCell">
            <summary>Flushes the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.CreateWrapperCell">
            <summary>Creates a wrapper cell.</summary>
            <returns>the cell</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker">
            <summary>
            TagWorker class for the
            <c>div</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.div">
            <summary>The div element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.AddBlockChild(iText.Layout.Element.IElement)">
            <summary>Adds a child element to the div block.</summary>
            <param name="element">the element</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.PostProcessInlineGroup">
            <summary>Post-processes the hanging leaves of the waiting inline elements.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.HrTagWorker">
            <summary>
            TagWorker class for the
            <c>hr</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HrTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.HrTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.HTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker">
            <summary>
            TagWorker class for the
            <c>html</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.document">
            <summary>The iText document instance.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.ProcessPageRules(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Resolve.ICssResolver,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Processes the page rules.</summary>
            <param name="rootNode">the root node</param>
            <param name="cssResolver">the css resolver</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.ProcessBlockChild(iText.Layout.IPropertyContainer)">
            <summary>Processes a block child.</summary>
            <param name="element">the element</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.PostProcessInlineGroup">
            <summary>Post-processes the hanging leaves of the waiting inline elements.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.IDisplayAware">
            <summary>
            Interface for those TagWorker implementations that deal
            with tags that can have a display value.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.IDisplayAware.GetDisplay">
            <summary>Gets the display value.</summary>
            <returns>the display value</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker">
            <summary>
            TagWorker class for the
            <c>img</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.image">
            <summary>The image.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.GetDisplay">
            <summary>Gets the display value.</summary>
            <returns>the display value</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage">
            <summary>Implementation of the Image class when used in the context of HTML to PDF conversion.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage.pxToPt">
            <summary>
            In iText, we use user unit for the image sizes (and by default
            one user unit = one point), whereas images are usually measured
            in pixels.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage.#ctor(iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker,iText.Kernel.Pdf.Xobject.PdfImageXObject)">
            <summary>
            * Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage"/>
            instance.
            </summary>
            <param name="xObject">an Image XObject</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage.SetAltText(System.String)">
            <summary>Sets the alt text for the image.</summary>
            <param name="altText">the new alt text</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker">
            <summary>
            TagWorker class for the
            <c>input</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker.formElement">
            <summary>The form element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker.display">
            <summary>The display.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.LinkTagWorker">
            <summary>
            TagWorker class for the
            <c>link</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.LinkTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.LinkTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker">
            <summary>
            TagWorker class for the
            <c>li</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.listItem">
            <summary>The list item.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.list">
            <summary>The list.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.inlineHelper">
            <summary>The inline helper.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.ProcessChild(iText.Layout.IPropertyContainer)">
            <summary>Processes a child.</summary>
            <param name="propertyContainer">the property container</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.MetaTagWorker">
            <summary>
            TagWorker class for the
            <c>meta</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.MetaTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.MetaTagWorker"/>
            instance.
            </summary>
            <param name="tag">the tag</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.OptGroupTagWorker">
            <summary>
            TagWorker class for the
            <c>optgroup</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.OptGroupTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.OptGroupTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.OptionTagWorker">
            <summary>
            TagWorker class for the
            <c>option</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.OptionTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.OptionTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PageCountWorker">
            <summary>TagWorker class for the page count.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PageCountWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PageCountWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PageMarginBoxWorker">
            <summary>TagWorker class for the page margin box.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PageMarginBoxWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PageMarginBoxWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker">
            <summary>
            TagWorker class for the
            <c>pre</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker.anyContentProcessed">
            <summary>Keeps track to see if any content was processed.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PTagWorker">
            <summary>
            TagWorker class for the
            <c>p</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.paragraph">
            <summary>The paragraph object.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.RunningElementTagWorker">
            <summary>TagWorker class for the running elements taken out of the normal flow.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker">
            <summary>
            TagWorker class for the
            <c>select</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker.selectElement">
            <summary>The form element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker.display">
            <summary>The display.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker">
            <summary>
            TagWorker class for the
            <c>span</c>
            tag.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.spanWrapper">
            <summary>The span wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.elements">
            <summary>A list of elements belonging to the span.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.ownLeafElements">
            <summary>The own leaf elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.inlineHelper">
            <summary>The helper object for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetAllElements">
            <summary>Gets all the elements in the span.</summary>
            <returns>a list of elements</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetOwnLeafElements">
            <summary>Gets the span's own leaf elements.</summary>
            <returns>the own leaf elements</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetElementDisplay(iText.Layout.IPropertyContainer)">
            <summary>
            The child shall be one from
            <see cref="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetAllElements"/>
            list.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.FlushInlineHelper">
            <summary>Flushes the waiting leaf elements.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker">
            <summary>TagWorker class for the footer of a table.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TableHeaderTagWorker">
            <summary>TagWorker class for the header of a table.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableHeaderTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <c>TableHeaderTagWorker</c>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker">
            <summary>
            TagWorker class for the
            <c>table</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.tableWrapper">
            <summary>The table wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.table">
            <summary>The table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.footer">
            <summary>The footer.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.header">
            <summary>The header.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.parentTagWorker">
            <summary>The parent tag worker.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.colgroupsHelper">
            <summary>The colgroups helper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.SetFooter">
            <summary>
            Method to indicate that this is actually a
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.SetHeader">
            <summary>
            Method to indicate that this is actually a
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableHeaderTagWorker"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.ApplyColStyles">
            <summary>Applies the column styles.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker">
            <summary>
            TagWorker class for the
            <c>td</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.cell">
            <summary>The cell.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.inlineHelper">
            <summary>The inline helper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.display">
            <summary>The display.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.ProcessChild(iText.Layout.IPropertyContainer)">
            <summary>Processes a child element.</summary>
            <param name="propertyContainer">the property container</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker">
            <summary>
            TagWorker class for the
            <c>textarea</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker.DEFAULT_TEXTAREA_NAME">
            <summary>The Constant DEFAULT_TEXTAREA_NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker.textArea">
            <summary>The text area.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ThTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ThTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TitleTagWorker">
            <summary>
            TagWorker class for the
            <c>title</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TitleTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TitleTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker">
            <summary>
            TagWorker class for the
            <c>tr</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.rowWrapper">
            <summary>The row wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.parentTagWorker">
            <summary>The parent tag worker.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.GetTableRowWrapper">
            <summary>Gets the table row wrapper.</summary>
            <returns>the table row wrapper</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker">
            <summary>
            TagWorker class for the
            <c>ul</c>
            and
            <c>ol</c>
            elements.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.list">
            <summary>The list object.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.#ctor(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.ProcessUnlabeledListItem">
            <summary>Processes an unlabeled list item.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.AddUnlabeledListItem(iText.Layout.Element.IBlockElement)">
            <summary>Adds an unlabeled list item.</summary>
            <param name="item">the item</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.AddBlockChild(iText.Layout.IPropertyContainer)">
            <summary>Adds a child.</summary>
            <param name="child">the child</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.ITagWorker">
            <summary>Interface for all the tag worker implementations.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.ProcessEnd(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Placeholder for what needs to be done after the content of a tag has been processed.</summary>
            <param name="element">the element node</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.ProcessContent(System.String,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Placeholder for what needs to be done while the content of a tag is being processed.</summary>
            <param name="content">the content of a node</param>
            <param name="context">the processor context</param>
            <returns>true, if content was successfully processed, otherwise false.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.ProcessTagChild(iText.Html2pdf.Attach.ITagWorker,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Placeholder for what needs to be done when a child node is being processed.</summary>
            <param name="childTagWorker">the tag worker of the child node</param>
            <param name="context">the processor context</param>
            <returns>true, if child was successfully processed, otherwise false.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.GetElementResult">
            <summary>
            Gets a processed object if it can be expressed as an
            <see cref="T:iText.Layout.IPropertyContainer"/>
            instance.
            </summary>
            <returns>
            the same object on every call.
            Might return null either if result is not yet produced or if this particular
            tag worker doesn't produce result in a form of
            <see cref="T:iText.Layout.IPropertyContainer"/>
            .
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.ITagWorkerFactory">
            <summary>
            <see cref="T:iText.Html2pdf.Attach.ITagWorkerFactory"/>
            interface is used for instantiating new
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorkerFactory.GetTagWorker(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <param name="tag">IElementNode</param>
            <param name="context">ProcessorContext</param>
            <returns>
            a
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instance constructed based on the passed parameters.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.ProcessorContext">
            <summary>Keeps track of the context of the processor.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.fontProvider">
            <summary>The font provider.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.tempFonts">
            <summary>Temporary set of fonts used in the PDF.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.resourceResolver">
            <summary>The resource resolver.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.deviceDescription">
            <summary>The device description.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.tagWorkerFactory">
            <summary>The tag worker factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.cssApplierFactory">
            <summary>The CSS applier factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.baseUri">
            <summary>The base URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.createAcroForm">
            <summary>Indicates whether an AcroForm needs to be created.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.formFieldNameResolver">
            <summary>The form field name resolver.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.radioCheckResolver">
            <summary>The radio check resolver.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.outlineHandler">
            <summary>The outline handler.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.immediateFlush">
            <summary>Indicates whether the document should be opened in immediate flush or not</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.state">
            <summary>The state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.cssContext">
            <summary>The CSS context.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.linkContext">
            <summary>The link context</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.pdfDocument">
            <summary>The PDF document.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.#ctor(iText.Html2pdf.ConverterProperties)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.ProcessorContext"/>
            instance.
            </summary>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.SetFontProvider(iText.Layout.Font.FontProvider)">
            <summary>Sets the font provider.</summary>
            <param name="fontProvider">the new font provider</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetState">
            <summary>Gets the state.</summary>
            <returns>the state</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetPdfDocument">
            <summary>Gets the PDF document.</summary>
            <returns>the PDF document</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetFontProvider">
            <summary>Gets the font provider.</summary>
            <returns>the font provider</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetTempFonts">
            <summary>Gets the temporary set of fonts.</summary>
            <returns>the set of fonts</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetResourceResolver">
            <summary>Gets the resource resolver.</summary>
            <returns>the resource resolver</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetDeviceDescription">
            <summary>Gets the device description.</summary>
            <returns>the device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetTagWorkerFactory">
            <summary>Gets the tag worker factory.</summary>
            <returns>the tag worker factory</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetCssApplierFactory">
            <summary>Gets the CSS applier factory.</summary>
            <returns>the CSS applier factory</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetCssContext">
            <summary>Gets the CSS context.</summary>
            <returns>the CSS context</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetLinkContext">
            <summary>Gets the link context.</summary>
            <returns>the link context</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.IsCreateAcroForm">
            <summary>Checks if is an AcroForm needs to be created.</summary>
            <returns>true, an AcroForm should be created</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetFormFieldNameResolver">
            <summary>Gets the form field name resolver.</summary>
            <returns>the form field name resolver</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetRadioCheckResolver">
            <summary>Gets the radio check resolver.</summary>
            <returns>the radio check resolver</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetOutlineHandler">
            <summary>Gets the outline handler.</summary>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.Layout.Font.FontInfo,System.String)">
            <summary>Add temporary font from @font-face.</summary>
            <param name="fontInfo">the font info</param>
            <param name="alias">the alias</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.IO.Font.FontProgram,System.String,System.String)">
            <summary>Add temporary font from @font-face.</summary>
            <param name="fontProgram">the font program</param>
            <param name="encoding">the encoding</param>
            <param name="alias">the alias</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.HasFonts">
            <summary>Check fonts in font provider and temporary font set.</summary>
            <returns>true, if there is at least one font either in FontProvider or temporary FontSet.</returns>
            <seealso cref="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.Layout.Font.FontInfo,System.String)"/>
            <seealso cref="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.IO.Font.FontProgram,System.String,System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.Reset">
            <summary>Resets the context.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.Reset(iText.Kernel.Pdf.PdfDocument)">
            <summary>Resets the context, and assigns a new PDF document.</summary>
            <param name="pdfDocument">the new PDF document for the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetBaseUri">
            <summary>Gets the baseURI: the URI which has been set manually or the directory of the html file in case when baseURI hasn't been set manually.
                </summary>
            <returns>the baseUri</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.IsImmediateFlush">
            <summary>Checks if immediateFlush is set</summary>
            <returns>true if immediateFlush is set, false if not.</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.State">
            <summary>State machine to push, pop, peek,...</summary>
            <remarks>
            State machine to push, pop, peek,...
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instances to and from the
            <see cref="!:System.Collections.Stack&lt;E&gt;"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.State.stack">
            <summary>The stack.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.State"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.GetStack">
            <summary>Gets the stack.</summary>
            <returns>the stack</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Push(iText.Html2pdf.Attach.ITagWorker)">
            <summary>
            Pushes a
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instance to the stack.
            </summary>
            <param name="tagWorker">the tag worker</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Pop">
            <summary>
            Pops a
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            from the stack.
            </summary>
            <returns>the tag worker</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Top">
            <summary>
            Peeks at the
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            at the top of the stack.
            </summary>
            <returns>the tag worker at the top</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Empty">
            <summary>Checks if the stack is empty.</summary>
            <returns>true, if the stack is empty</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.LinkHelper">
            <summary>Helper class for links.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.LinkHelper.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.LinkHelper"/>
            class.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.LinkHelper.ApplyLinkAnnotation(iText.Layout.IPropertyContainer,System.String)">
            <summary>Applies a link annotation.</summary>
            <param name="container">the containing object</param>
            <param name="url">the destination</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.LinkHelper.CreateDestination(iText.Html2pdf.Attach.ITagWorker,iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Creates a destination</summary>
            <param name="tagWorker">the tagworker that is building the (iText) element</param>
            <param name="element">the (HTML) element being converted</param>
            <param name="context">the Processor context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.RowColHelper">
            <summary>Helper class to keep track of the current column / row position in a table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.RowColHelper.lastEmptyRow">
            <summary>The last empty row.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.RowColHelper.currRow">
            <summary>The current row index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.RowColHelper.currCol">
            <summary>The current column index.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.NewRow">
            <summary>Move to a new row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.UpdateCurrentPosition(System.Int32,System.Int32)">
            <summary>Update current position based on a colspan and a rowspan.</summary>
            <param name="colspan">the colspan</param>
            <param name="rowspan">the rowspan</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.MoveToNextEmptyCol">
            <summary>Move to next empty column.</summary>
            <returns>the current column position</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.CanPutCell(System.Int32)">
            <summary>Checks if we can put a new cell in the column.</summary>
            <param name="col">the column index</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.EnsureRowIsStarted">
            <summary>Ensure that a row is started.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.TrimUtil">
            <summary>Utility class to trim content.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.TrimUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.TrimLeafElementsAndSanitize(System.Collections.Generic.IList{iText.Layout.Element.IElement})">
            <summary>Trim leaf elements, and sanitize.</summary>
            <param name="leafElements">the leaf elements</param>
            <returns>the trimmed and sanitized list</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.IsNonLineBreakSpace(System.Char)">
            <summary>Checks if a character is white space value that doesn't cause a newline.</summary>
            <param name="ch">the character</param>
            <returns>true, if the character is a white space character, but no newline</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.IsNonEmSpace(System.Char)">
            <summary>Checks if a character is white space value that is not em, en or similar special whitespace character.
                </summary>
            <param name="ch">the character</param>
            <returns>true, if the character is a white space character, but no em, en or similar</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.TrimSubList(System.Collections.Generic.List{iText.Layout.Element.IElement},System.Int32,System.Int32,System.Boolean)">
            <summary>Trims a sub list of leaf elements.</summary>
            <param name="list">the list of leaf elements</param>
            <param name="begin">the index where to begin</param>
            <param name="end">the index where to end</param>
            <param name="last">indicates where to start, if true, we start at the end</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.TrimTextElement(iText.Layout.Element.Text,System.Boolean)">
            <summary>Trims a text element.</summary>
            <param name="text">the text element</param>
            <param name="last">indicates where to start, if true, we start at the end</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.GetIndexOfFirstNonSpace(iText.Layout.Element.Text)">
            <summary>Gets the index of first character that isn't white space in some text.</summary>
            <remarks>
            Gets the index of first character that isn't white space in some text.
            Note: newline characters aren't counted as white space characters.
            </remarks>
            <param name="text">the text</param>
            <returns>the index of first character that isn't white space</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.GetIndexAfterLastNonSpace(iText.Layout.Element.Text)">
            <summary>Gets the index of last character following a character that isn't white space in some text.</summary>
            <remarks>
            Gets the index of last character following a character that isn't white space in some text.
            Note: newline characters aren't counted as white space characters.
            </remarks>
            <param name="text">the text</param>
            <returns>the index following the last character that isn't white space</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper">
            <summary>Helper class for waiting column groups.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.tableElement">
            <summary>The table element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.colgroups">
            <summary>The column groups.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.maxIndex">
            <summary>The maximum value of the index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.indexToColgroupMapping">
            <summary>The index to column group mapping.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.shiftCol">
            <summary>The shift values for the columns.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.#ctor(iText.Html2pdf.Html.Node.IElementNode)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper"/>
            instance.
            </summary>
            <param name="tableElement">the table element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.Add(iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper)">
            <summary>Adds a column group.</summary>
            <param name="colgroup">the column group</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.ApplyColStyles">
            <summary>Applies column styles.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.GetColWrapper(System.Int32)">
            <summary>Gets a specific column.</summary>
            <param name="index">the index of the column</param>
            <returns>the column</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.ApplyColStyles(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Attach.Util.RowColHelper)">
            <summary>Applies column styles.</summary>
            <param name="node">the node</param>
            <param name="rowColHelper">the helper class to keep track of the position inside the table</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.FinalizeColgroups">
            <summary>Finalizes the column groups.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.textTransform">
            <summary>A value that defines how to transform text.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.keepLineBreaks">
            <summary>Indicates whether line breaks need to be preserved.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.collapseSpaces">
            <summary>Indicates whether white space characters need to be collapsed.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.waitingLeaves">
            <summary>List of waiting leaf elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.#ctor(System.String,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper"/>
            instance.
            </summary>
            <param name="whiteSpace">we'll check if this value equals "pre" or "pre-wrap"</param>
            <param name="textTransform">will define the transformation that needs to be applied to the text</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.Add(System.String)">
            <summary>Adds text to the waiting leaves.</summary>
            <param name="text">the text</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.Add(iText.Layout.Element.ILeafElement)">
            <summary>Adds a leaf element to the waiting leaves.</summary>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.AddAll(System.Collections.Generic.ICollection{iText.Layout.Element.ILeafElement})">
            <summary>Adds a collecton of leaf elements to the waiting leaves.</summary>
            <param name="collection">the collection</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.FlushHangingLeaves(iText.Layout.IPropertyContainer)">
            <summary>Flush hanging leaves.</summary>
            <param name="container">a container element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.CreateLeavesContainer">
            <summary>Creates the leaves container.</summary>
            <returns>a paragraph</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.GetWaitingLeaves">
            <summary>Gets the waiting leaves.</summary>
            <returns>the waiting leaves</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.GetSanitizedWaitingLeaves">
            <summary>Gets the sanitized waiting leaves.</summary>
            <returns>the sanitized waiting leaves</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.ClearWaitingLeaves">
            <summary>Clears the waiting leaves.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.CreateParagraphContainer">
            <summary>Creates a paragraph container.</summary>
            <returns>the paragraph container</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.Capitalize(System.Collections.Generic.IList{iText.Layout.Element.IElement})">
            <summary>Capitalizes a series of leaf elements.</summary>
            <param name="leaves">a list of leaf elements</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.CollapseConsecutiveSpaces(System.String)">
            <summary>Collapses consecutive spaces.</summary>
            <param name="s">a string</param>
            <returns>the string with the consecutive spaces collapsed</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper">
            <summary>
            Wrapper for the
            <c>colgroup</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.span">
            <summary>The span.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.width">
            <summary>The width.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.indexToColMapping">
            <summary>The index to column mapping.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.cellCssProps">
            <summary>The cell CSS properties.</summary>
            <remarks>
            The cell CSS properties.
            These properties should be inherited from &lt;colgroup&gt; to &lt;col&gt;
            and are eventually applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.ownCssProps">
            <summary>The own CSS properties.</summary>
            <remarks>
            The own CSS properties.
            These properties shouldn't be applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.columns">
            <summary>A list of column wrappers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.#ctor(System.Int32)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance.
            </summary>
            <param name="span">the span</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetSpan">
            <summary>Gets the span.</summary>
            <returns>the span</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetWidth">
            <summary>Gets the width.</summary>
            <returns>the width</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.SetWidth(iText.Layout.Properties.UnitValue)">
            <summary>Sets the width.</summary>
            <param name="width">the width</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetCellCssProps">
            <summary>Gets the cell CSS properties.</summary>
            <returns>the cell CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.SetCellCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the cell CSS properties.</summary>
            <param name="cellCssProps">the cell CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetOwnCssProps">
            <summary>Gets the own CSS properties.</summary>
            <returns>the own CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.SetOwnCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the own CSS properties.</summary>
            <param name="ownCssProps">the own CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetColumns">
            <summary>Gets the columns.</summary>
            <returns>the columns</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.FinalizeCols">
            <summary>Finalize the columns.</summary>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetColumnByIndex(System.Int32)">
            <summary>Gets the column by index.</summary>
            <param name="index">the index</param>
            <returns>the column corresponding with the index</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper">
            <summary>
            Wrapper for the
            <c>col</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.span">
            <summary>The span.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.width">
            <summary>The width.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.cellCssProps">
            <summary>The cell CSS properties.</summary>
            <remarks>
            The cell CSS properties.
            These properties should be inherited from &lt;colgroup&gt; to &lt;col&gt;
            and are eventually applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.ownCssProps">
            <summary>The own CSS properties.</summary>
            <remarks>
            The own CSS properties.
            These properties shouldn't be applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.#ctor(System.Int32)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance.
            </summary>
            <param name="span">the span</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetSpan">
            <summary>Gets the span.</summary>
            <returns>the span</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetWidth">
            <summary>Gets the width.</summary>
            <returns>the width</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.SetWidth(iText.Layout.Properties.UnitValue)">
            <summary>Sets the width.</summary>
            <param name="width">the width</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetCellCssProps">
            <summary>Gets the cell CSS properties.</summary>
            <returns>the cell CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.SetCellCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the cell CSS properties.</summary>
            <param name="cellCssProps">the cell CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetOwnCssProps">
            <summary>Gets the own CSS properties.</summary>
            <returns>the own CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.SetOwnCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the own CSS properties.</summary>
            <param name="ownCssProps">the own CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.IWrapElement">
            <summary>Interface for all the element wrapper classes (such as SpanWrapper, TableWrapper,...).</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.SpanWrapper">
            <summary>
            Wrapper for the
            <c>span</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.children">
            <summary>The children of the span element.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.Add(iText.Html2pdf.Attach.Wrapelement.SpanWrapper)">
            <summary>Adds a child span.</summary>
            <param name="span">the span element to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.Add(iText.Layout.Element.ILeafElement)">
            <summary>Adds a child image.</summary>
            <param name="img">the img element to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.Add(iText.Layout.Element.IBlockElement)">
            <summary>Adds a child block element.</summary>
            <param name="block">the block element to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.AddAll(System.Collections.Generic.ICollection{iText.Layout.Element.IElement})">
            <summary>Adds a collection of lead elements as children.</summary>
            <param name="collection">the collection to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.GetElements">
            <summary>Gets a list of all the child elements.</summary>
            <returns>the child elements</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper">
            <summary>
            Wrapper for the
            <c>tr</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper.cells">
            <summary>The cells in the row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper.AddCell(iText.Layout.Element.Cell)">
            <summary>Adds a cell to the row.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper.GetCells">
            <summary>Gets the cells of the row.</summary>
            <returns>the cells</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.TableWrapper">
            <summary>
            Wrapper for the
            <c>table</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.rows">
            <summary>The body rows of the table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.headerRows">
            <summary>The header rows.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.footerRows">
            <summary>The footer rows.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.rowShift">
            <summary>The current position in the body of the table (row / column).</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.headerRowShift">
            <summary>The current position in the header of the table (row / column).</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.footerRowShift">
            <summary>The current position in the footer of the table (row / column).</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.numberOfColumns">
            <summary>The number of columns.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.GetRowsSize">
            <summary>Gets the number of rows.</summary>
            <returns>the number of rows</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.NewRow">
            <summary>Adds a new body row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.NewHeaderRow">
            <summary>Adds a new header row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.NewFooterRow">
            <summary>Adds a new footer row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddHeaderCell(iText.Layout.Element.Cell)">
            <summary>Adds a new cell to the header rows.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddFooterCell(iText.Layout.Element.Cell)">
            <summary>Adds a new cell to the footer rows.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddCell(iText.Layout.Element.Cell)">
            <summary>Adds a new cell to the body rows.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddCellToTable(iText.Layout.Element.Cell,System.Collections.Generic.IList{System.Collections.Generic.IList{iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper}},iText.Html2pdf.Attach.Util.RowColHelper)">
            <summary>Adds a cell to a table.</summary>
            <param name="cell">the cell</param>
            <param name="table">the table</param>
            <param name="tableRowShift">the applicable table row shift (current col / row position).</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.ToTable(iText.Html2pdf.Attach.Util.WaitingColgroupsHelper)">
            <summary>
            Renders all the rows to a
            <see cref="T:iText.Layout.Element.Table"/>
            object.
            </summary>
            <param name="colgroupsHelper">the colgroups helper class</param>
            <returns>the table</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.GetColWidths(iText.Html2pdf.Attach.Util.WaitingColgroupsHelper)">
            <summary>Gets the column widths.</summary>
            <param name="colgroups">the colgroups helper class</param>
            <returns>the column widths</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper">
            <summary>
            Wrapper for the
            <c>td</c>
            /
            <c>th</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper.col">
            <summary>The column index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper.cell">
            <summary>The cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper.#ctor(System.Int32,iText.Layout.Element.Cell)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper"/>
            instance.
            </summary>
            <param name="col">the column index</param>
            <param name="cell">the cell</param>
        </member>
        <member name="T:iText.Html2pdf.ConverterProperties">
            <summary>Properties that will be used by the converter.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.mediaDeviceDescription">
            <summary>The media device description.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.fontProvider">
            <summary>The font provider.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.tagWorkerFactory">
            <summary>The tag worker factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.cssApplierFactory">
            <summary>The CSS applier factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.outlineHandler">
            <summary>The outline handler.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.baseUri">
            <summary>The base URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.createAcroForm">
            <summary>Indicates whether an AcroForm should be created.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.charset">
            <summary>Character set used in conversion of input streams</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.immediateFlush">
            <summary>Indicates whether the document should be opened in immediate flush or not</summary>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.#ctor(iText.Html2pdf.ConverterProperties)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance based on another
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            (copy constructor).
            </summary>
            <param name="other">
            the other
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetMediaDeviceDescription">
            <summary>Gets the media device description.</summary>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetMediaDeviceDescription(iText.Html2pdf.Css.Media.MediaDeviceDescription)">
            <summary>Sets the media device description.</summary>
            <param name="mediaDeviceDescription">the media device description</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetFontProvider">
            <summary>Gets the font provider.</summary>
            <returns>the font provider</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetFontProvider(iText.Layout.Font.FontProvider)">
            <summary>Sets the font provider.</summary>
            <remarks>
            Sets the font provider. Please note that
            <see cref="T:iText.Layout.Font.FontProvider"/>
            instances cannot be reused across several documents
            and thus as soon as you set this property, this
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance becomes only useful for a single
            HTML conversion.
            </remarks>
            <param name="fontProvider">the font provider</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetTagWorkerFactory">
            <summary>Gets the TagWorkerFactory instance.</summary>
            <returns>the TagWorkerFactory</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetTagWorkerFactory(iText.Html2pdf.Attach.ITagWorkerFactory)">
            <summary>Sets the TagWorkerFactory.</summary>
            <param name="tagWorkerFactory">the TagWorkerFactory</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetCssApplierFactory">
            <summary>Gets the CSS applier factory.</summary>
            <returns>the CSS applier factory</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetCssApplierFactory(iText.Html2pdf.Css.Apply.ICssApplierFactory)">
            <summary>Sets the CSS applier factory.</summary>
            <param name="cssApplierFactory">the CSS applier factory</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetBaseUri">
            <summary>Gets the base URI.</summary>
            <returns>the base URI</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetBaseUri(System.String)">
            <summary>Sets the base URI.</summary>
            <param name="baseUri">the base URI</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.IsCreateAcroForm">
            <summary>Checks if is an AcroForm needs to be created.</summary>
            <returns>true, an AcroForm should be created</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetCreateAcroForm(System.Boolean)">
            <summary>Sets the createAcroForm value.</summary>
            <param name="createAcroForm">true if an AcroForm needs to be created</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetOutlineHandler">
            <summary>Gets the outline handler.</summary>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetOutlineHandler(iText.Html2pdf.Attach.Impl.OutlineHandler)">
            <summary>Sets the outline handler.</summary>
            <remarks>
            Sets the outline handler. Please note that
            <see cref="T:iText.Html2pdf.Attach.Impl.OutlineHandler"/>
            is not thread safe, thus
            as soon as you have set this property, this
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance cannot be used in converting multiple
            HTMLs simultaneously.
            </remarks>
            <param name="outlineHandler">the outline handler</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetCharset">
            <summary>Gets the encoding charset.</summary>
            <returns>the charset</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetCharset(System.String)">
            <summary>Sets the encoding charset.</summary>
            <param name="charset">the charset</param>
            <returns>the ConverterProperties instance</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.IsImmediateFlush">
            <summary>Checks if immediateFlush is set</summary>
            <returns>true if immediateFlush is set, false if not.</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetImmediateFlush(System.Boolean)">
            <summary>
            set the immediate flush property of the layout document
            This is used for convertToDocument methods and will be overwritten to
            false if a page-counter declaration is present in the CSS of the HTML being
            converted.
            </summary>
            <remarks>
            set the immediate flush property of the layout document
            This is used for convertToDocument methods and will be overwritten to
            false if a page-counter declaration is present in the CSS of the HTML being
            converted.
            Has no effect when used in conjunction with convertToPdf or convertToElements
            </remarks>
            <param name="immediateFlush">the immediate flush value</param>
            <returns>the ConverterProperties</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.ICssApplier">
            <summary>Interface to be implemented by all types of CSS appliers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.ICssApplier.Apply(iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Html.Node.IStylesContainer,iText.Html2pdf.Attach.ITagWorker)">
            <summary>Applies styles to an element.</summary>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles</param>
            <param name="tagWorker">the tag worker for the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.ICssApplierFactory">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplierFactory"/>
            interface is used for instantiating new
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.ICssApplierFactory.GetCssApplier(iText.Html2pdf.Html.Node.IElementNode)">
            <summary>
            Returns a
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            instance constructed based on the parameters of a node.
            </summary>
            <param name="tag">a node</param>
            <returns>a CSS applier based on the parameters of a node</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.BlockCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Block elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.BodyTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Body elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.ColgroupTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for column groups.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.ColTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for columns.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory">
            <summary>
            A factory for creating
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            objects.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.defaultMapping">
            <summary>The default mapping of CSS keywords and CSS appliers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.GetInstance">
            <summary>
            Gets
            <see cref="T:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory"/>
            instance.
            </summary>
            <returns>default instance that is used if custom css appliers are not configured</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.GetCustomCssApplier(iText.Html2pdf.Html.Node.IElementNode)">
            <summary>Gets a custom CSS applier.</summary>
            <remarks>
            Gets a custom CSS applier.
            This method needs to be overridden because the default CSS applier
            factory will always return
            <see langword="null"/>
            .
            </remarks>
            <param name="tag">the key</param>
            <returns>the custom CSS applier</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.GetCssApplierClass(iText.Html2pdf.Util.TagProcessorMapping,iText.Html2pdf.Html.Node.IElementNode)">
            <summary>Gets the css applier class.</summary>
            <param name="mapping">the mapping</param>
            <param name="tag">the tag</param>
            <returns>the css applier class</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping">
            <summary>Class that contains the default mapping between CSS keys and CSS appliers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping.mapping">
            <summary>The default mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping.GetDefaultCssApplierMapping">
            <summary>Gets the default CSS applier mapping.</summary>
            <returns>the default CSS applier mapping</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DisplayTableRowTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for table rows.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DlTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Dl elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.HrTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for hr elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.HtmlTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Html elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.LiTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Li elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.PageMarginBoxCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for page margin box containers.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.PageMarginBoxCssApplier.ParseBoxProps(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single,System.Single[],iText.Kernel.Geom.Rectangle,System.String,System.String,System.String,System.String)">
            <summary>Parses the page and margin boxes properties (like margins, paddings, etc).</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
            <param name="defaultValues">the default values</param>
            <param name="containingBlock">the containing block</param>
            <param name="topPropName">the top prop name</param>
            <param name="rightPropName">the right prop name</param>
            <param name="bottomPropName">the bottom prop name</param>
            <param name="leftPropName">the left prop name</param>
            <returns>an array with a top, right, bottom, and top float value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.PageMarginBoxCssApplier.ParseBoxValue(System.String,System.Single,System.Single,System.Single)">
            <summary>Parses the box value.</summary>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
            <param name="dimensionSize">the dimension size</param>
            <returns>a float value</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.SpanTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Span elements.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.SpanTagCssApplier.ApplyChildElementStyles(iText.Layout.IPropertyContainer,System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Html.Node.IStylesContainer)">
            <summary>Applies styles to child elements.</summary>
            <param name="element">the element</param>
            <param name="css">the CSS mapping</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.TableTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for table elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.TdTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Td elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.TrTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Tr elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.UlOlTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Ul en Ol elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil">
            <summary>Utilities class to apply backgrounds.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.ApplyBackground(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies background to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil">
            <summary>Utilities class to apply border styles.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.LOGGER">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.ApplyBorders(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies borders to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the Processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.GetBordersArray(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Gets the array that defines the borders.</summary>
            <param name="styles">the styles mapping</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the borders array</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.GetCertainBorder(System.String,System.String,System.String,System.Single,System.Single)">
            <summary>
            Creates a
            <see cref="T:iText.Layout.Borders.Border"/>
            instance based on specific properties.
            </summary>
            <param name="borderWidth">the border width</param>
            <param name="borderStyle">the border style</param>
            <param name="borderColor">the border color</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the border</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.GetBorderRadiiArray(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Gets the array that defines the borders.</summary>
            <param name="styles">the styles mapping</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the borders array</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.GetBorderRadius(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Gets the array that defines the borders.</summary>
            <param name="styles">the styles mapping</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the borders array</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.CounterProcessorUtil">
            <summary>Utilities class to process counters.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.CounterProcessorUtil.ProcessCounters(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Css.Resolve.CssContext,iText.Html2pdf.Html.Node.INode)">
            <summary>Processes counters.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="scope">the scope</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil">
            <summary>Utilities class to apply float values to elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil.ApplyFloating(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a float value (left, right, or both) to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil">
            <summary>Utilities class to apply font styles.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.#ctor">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.ApplyFontStyles(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Html.Node.IStylesContainer,iText.Layout.IPropertyContainer)">
            <summary>Applies font styles to an element.</summary>
            <param name="cssProps">the CSS props</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.ParseAbsoluteFontSize(System.String)">
            <summary>Parses the absolute font size.</summary>
            <param name="fontSizeValue">
            the font size value as a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the font size value as a
            <c>float</c>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.ParseRelativeFontSize(System.String,System.Single)">
            <summary>Parses the relative font size.</summary>
            <param name="relativeFontSizeValue">
            the relative font size value as a
            <see cref="T:System.String"/>
            </param>
            <param name="baseValue">the base value</param>
            <returns>
            the relative font size value as a
            <c>float</c>
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil">
            <summary>The Class HyphenationApplierUtil.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.HYPHENATE_BEFORE">
            <summary>The Constant HYPHENATE_BEFORE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.HYPHENATE_AFTER">
            <summary>The Constant HYPHENATE_AFTER.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.ApplyHyphenation(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Html.Node.IStylesContainer,iText.Layout.IPropertyContainer)">
            <summary>Applies hyphenation to an element.</summary>
            <param name="cssProps">the CSS props</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil">
            <summary>Utilities class to apply list styles to an element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.GREEK_ALPHABET_LENGTH">
            <summary>The Constant GREEK_ALPHABET_LENGTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.GREEK_LOWERCASE">
            <summary>The Constant GREEK_LOWERCASE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.DISC_SYMBOL">
            <summary>The Constant DISC_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.CIRCLE_SYMBOL">
            <summary>The Constant CIRCLE_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SQUARE_SYMBOL">
            <summary>The Constant SQUARE_SYMBOL.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.ApplyListStyleImageProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies an image list style to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.ApplyListStyleTypeProperty(iText.Html2pdf.Html.Node.IStylesContainer,System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a list style to an element.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetDiscStyle(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Applies the "disc" list style to an element.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetListSymbol(iText.Layout.IPropertyContainer,iText.Layout.Element.Text)">
            <summary>
            Sets the list symbol for a
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            element.
            </summary>
            <param name="container">
            the container element (
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            )
            </param>
            <param name="text">the list symbol</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetListSymbol(iText.Layout.IPropertyContainer,iText.Layout.Properties.ListNumberingType)">
            <summary>
            Sets the list symbol for a
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            element.
            </summary>
            <param name="container">
            the container element (
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            )
            </param>
            <param name="listNumberingType">the list numbering type</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetSquareStyle(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Applies the "square" list style to an element.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetCircleStyle(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Applies the "circle" list style to an element.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetListSymbolIndent(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Sets the list symbol indentation.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory">
            <summary>
            A factory for creating
            <c>HtmlAlphabetSymbol</c>
            objects.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory.alphabet">
            <summary>The alphabet.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory.#ctor(System.Char[])">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory"/>
            instance.
            </summary>
            <param name="alphabet">the alphabet</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory.GetListItemOrListProperty(iText.Layout.IPropertyContainer,iText.Layout.IPropertyContainer,System.Int32)">
            <summary>
            Gets the a property from a
            <see cref="T:iText.Layout.Element.ListItem"/>
            , or from the
            <see cref="T:iText.Layout.Element.List"/>
            (if the property) isn't declared for the list item.
            </summary>
            <param name="listItem">the list item</param>
            <param name="list">the list</param>
            <param name="propertyId">the property id</param>
            <returns>the property value</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil">
            <summary>Utilities class to apply margins.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.#ctor">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.ApplyMargins(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies margins to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.TrySetMarginIfNotAuto(System.Int32,System.String,iText.Layout.IPropertyContainer,System.Single,System.Single)">
            <summary>Tries set margin if the value isn't "auto".</summary>
            <param name="marginProperty">the margin property</param>
            <param name="marginValue">the margin value</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>false if the margin value was "auto"</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.ParseMarginValue(System.String,System.Single,System.Single)">
            <summary>Parses the margin value.</summary>
            <param name="marginValString">
            the margin value as a
            <see cref="T:System.String"/>
            </param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>
            the margin value as a
            <see cref="!:float?"/>
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil">
            <summary>Utilities class to apply opacity.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil.ApplyOpacity(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies opacity to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="container">the container element</param>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.LOGGER">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.ApplyOutlines(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies outlines to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the Processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.GetCertainBorder(System.String,System.String,System.String,System.Single,System.Single)">
            <summary>
            Creates a
            <see cref="T:iText.Layout.Borders.Border"/>
            instance based on specific properties.
            </summary>
            <param name="outlineWidth">the outline width</param>
            <param name="outlineStyle">the outline style</param>
            <param name="outlineColor">the outline color</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the border</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.OverflowApplierUtil">
            <summary>Utilities class to apply overflow.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OverflowApplierUtil.#ctor">
            <summary>Creates a new <code>OverflowApplierUtil</code> instance.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OverflowApplierUtil.ApplyOverflow(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer)">
            <summary>Applies overflow to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil">
            <summary>Utilities class to apply a padding.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil.ApplyPaddings(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies paddings to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil">
            <summary>Utilities class to apply page breaks.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.ApplyPageBreakProperties(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies page break properties.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.AddPageBreakElementBefore(iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Attach.ITagWorker,iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ITagWorker)">
            <summary>Processes a page break "before" property.</summary>
            <param name="context">the processor context</param>
            <param name="parentTagWorker">the parent tag worker</param>
            <param name="childElement">the child element</param>
            <param name="childTagWorker">the child tag worker</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.AddPageBreakElementAfter(iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Attach.ITagWorker,iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Attach.ITagWorker)">
            <summary>Processes a page break "after" property.</summary>
            <param name="context">the processor context</param>
            <param name="parentTagWorker">the parent tag worker</param>
            <param name="childElement">the child element</param>
            <param name="childTagWorker">the child tag worker</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.CreateHtmlPageBreak(System.String)">
            <summary>
            Creates an
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak"/>
            instance.
            </summary>
            <param name="pageBreakVal">the page break value</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.ApplyKeepWithNext(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a keep with next property to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.ApplyPageBreakInside(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a page break inside property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker">
            <summary>
            A
            <c>TagWorker</c>
            class for HTML page breaks.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker.pageBreak">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker.#ctor(iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker"/>
            instance.
            </summary>
            <param name="pageBreak">the page break</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil">
            <summary>Utilities class to apply a position.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyPosition(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a position to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the propertiescontext</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyLeftRightTopBottom(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer,System.String)">
            <summary>Applies left, right, top, and bottom properties.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
            <param name="position">the position</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyLeftProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "left" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyRightProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "right" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyTopProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "top" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyBottomProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "bottom" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil">
            <summary>
            Utilities class to get widths and mapping related to columns and column groups
            as stated in paragraph 17.3 of https://www.w3.org/TR/CSS21/tables.html#q4.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.CELL_CSS_PROPERTIES">
            <summary>
            These inheritable properties should be transferred from &lt;colgroup&gt;
            to &lt;col&gt; and then to &lt;td&gt; or &lt;th&gt;.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.OWN_CSS_PROPERTIES">
            <summary>These properties don't need to be transferred from &lt;colgroup&gt; to &lt;col&gt;.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetWidth(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Gets the width.</summary>
            <param name="resolvedCssProps">the resolved CSS properties</param>
            <param name="context">the processor context</param>
            <returns>the width</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetCellProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Gets the cell properties.</summary>
            <param name="resolvedCssProps">the resolved CSS properties</param>
            <returns>the cell properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetOwnProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Gets the own properties.</summary>
            <param name="resolvedCssProps">the resolved css props</param>
            <returns>the own properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetFilteredMap(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>Filters a given map so that it only contains supported keys.</summary>
            <param name="map">the map</param>
            <param name="supportedKeys">the supported keys</param>
            <returns>the filtered map</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.ApplyTransformation(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a transformation to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the properties context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.ParseAngleToRadians(System.String)">
            <summary>Convert an angle (presented as radians or degrees) to radians</summary>
            <param name="value">the angle (as a CSS string)</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.GetSingleTransformTranslate(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>Apply a linear transformation, using a transformation matrix</summary>
            <param name="a">element [0,0] of the transformation matrix</param>
            <param name="b">element [0,1] of the transformation matrix</param>
            <param name="c">element [1,0] of the transformation matrix</param>
            <param name="d">element [1,1] of the transformation matrix</param>
            <param name="tx">translation on x-axis</param>
            <param name="ty">translation on y-axis</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.GetSingleTransform(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Apply a linear transformation using a transformation matrix</summary>
            <param name="a">element [0,0] of the transformation matrix</param>
            <param name="b">element [0,1] of the transformation matrix</param>
            <param name="c">element [1,0] of the transformation matrix</param>
            <param name="d">element [1,1] of the transformation matrix</param>
            <param name="tx">translation on x-axis</param>
            <param name="ty">translation on y-axis</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.GetSingleTransform(System.Single[])">
            <summary>Apply a linear transformation using a transformation matrix</summary>
            <param name="floats">the transformation matrix (flattened) as array</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil">
            <summary>Utilities class to apply vertical alignment values.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.ASCENDER_COEFFICIENT">
            <summary>The Constant ASCENDER_COEFFICIENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.DESCENDER_COEFFICIENT">
            <summary>The Constant DESCENDER_COEFFICIENT.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil"/>
            .
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.ApplyVerticalAlignmentForCells(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies vertical alignment to cells.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.ApplyVerticalAlignmentForInlines(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Html.Node.IStylesContainer,System.Collections.Generic.IList{iText.Layout.IPropertyContainer})">
            <summary>Apply vertical alignment to inline elements.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
            <param name="childElements">the child elements</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForSupSub(iText.Html2pdf.Html.Node.IStylesContainer,System.String)">
            <summary>Calculates the text rise value for &lt;sup&gt; and &lt;sub&gt; tags.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="vAlignVal">the vertical alignment value</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForMiddle(iText.Html2pdf.Html.Node.IStylesContainer)">
            <summary>Calculates the text rise for middle alignment.</summary>
            <param name="stylesContainer">the styles container</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForTextTop(iText.Html2pdf.Html.Node.IStylesContainer,System.Single)">
            <summary>Calculates the text rise for top alignment.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="rootFontSize">the root font size</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForTextBottom(iText.Html2pdf.Html.Node.IStylesContainer,System.Single)">
            <summary>Calculates the text rise for bottom alignment.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="rootFontSize">the root font size</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForPercentageValue(iText.Html2pdf.Html.Node.IStylesContainer,System.Single,System.String)">
            <summary>Calculates text rise for percentage value text rise.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="rootFontSize">the root font size</param>
            <param name="vAlignVal">the vertical alignment value</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.GetLineHeightActualValue(System.Single,System.Single,System.String)">
            <summary>Gets the actual value of the line height.</summary>
            <param name="fontSize">the font size</param>
            <param name="rootFontSize">the root font size</param>
            <param name="lineHeightStr">
            the line height as a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the actual line height as a
            <c>float</c>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.GetParentFontSize(iText.Html2pdf.Html.Node.IStylesContainer)">
            <summary>Gets the parent font size.</summary>
            <param name="stylesContainer">the styles container</param>
            <returns>the parent font size</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil">
            <summary>Utilities class to apply a width or a height to an element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil.ApplyWidthHeight(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a width or a height to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.CssAtRule">
            <summary>Abstract superclass for all CSS at-rules (rules in CSS that start with an @ sign).</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssAtRule.ruleName">
            <summary>The rule name.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssAtRule.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssAtRule"/>
            instance.
            </summary>
            <param name="ruleName">the rule name</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssAtRule.GetRuleName">
            <summary>Gets the rule name.</summary>
            <returns>the rule name</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.CssConstants">
            <summary>
            Class containing possible CSS property keys and values, pseudo element keys,
            units of measurement, and so on.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND">
            <summary>The Constant BACKGROUND.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_ATTACHMENT">
            <summary>The Constant BACKGROUND_ATTACHMENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_BLEND_MODE">
            <summary>The Constant BACKGROUND_BLEND_MODE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_CLIP">
            <summary>The Constant BACKGROUND_CLIP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_COLOR">
            <summary>The Constant BACKGROUND_COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_IMAGE">
            <summary>The Constant BACKGROUND_IMAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_ORIGIN">
            <summary>The Constant BACKGROUND_ORIGIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_POSITION">
            <summary>The Constant BACKGROUND_POSITION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_REPEAT">
            <summary>The Constant BACKGROUND_REPEAT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_SIZE">
            <summary>The Constant BACKGROUND_SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BLEED">
            <summary>The Constant BLEED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER">
            <summary>The Constant BORDER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_BOTTOM">
            <summary>The Constant BORDER_BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_BOTTOM_COLOR">
            <summary>The Constant BORDER_BOTTOM_COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_BOTTOM_LEFT_RADIUS">
            <summary>The Constant BORDER_BOTTOM_LEFT_RADIUS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_BOTTOM_RIGHT_RADIUS">
            <summary>The Constant BORDER_BOTTOM_RIGHT_RADIUS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_BOTTOM_STYLE">
            <summary>The Constant BORDER_BOTTOM_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_BOTTOM_WIDTH">
            <summary>The Constant BORDER_BOTTOM_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_COLLAPSE">
            <summary>The Constant BORDER_COLLAPSE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_COLOR">
            <summary>The Constant BORDER_COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_IMAGE">
            <summary>The Constant BORDER_IMAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_LEFT">
            <summary>The Constant BORDER_LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_LEFT_COLOR">
            <summary>The Constant BORDER_LEFT_COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_LEFT_STYLE">
            <summary>The Constant BORDER_LEFT_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_LEFT_WIDTH">
            <summary>The Constant BORDER_LEFT_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_RADIUS">
            <summary>The Constant BORDER_RADIUS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_RIGHT">
            <summary>The Constant BORDER_RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_RIGHT_COLOR">
            <summary>The Constant BORDER_RIGHT_COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_RIGHT_STYLE">
            <summary>The Constant BORDER_RIGHT_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_RIGHT_WIDTH">
            <summary>The Constant BORDER_RIGHT_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_SPACING">
            <summary>The Constant BORDER_SPACING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_STYLE">
            <summary>The Constant BORDER_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_TOP">
            <summary>The Constant BORDER_TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_TOP_COLOR">
            <summary>The Constant BORDER_TOP_COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_TOP_LEFT_RADIUS">
            <summary>The Constant BORDER_TOP_LEFT_RADIUS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_TOP_RIGHT_RADIUS">
            <summary>The Constant BORDER_TOP_RIGHT_RADIUS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_TOP_STYLE">
            <summary>The Constant BORDER_TOP_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_TOP_WIDTH">
            <summary>The Constant BORDER_TOP_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_WIDTH">
            <summary>The Constant BORDER_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOTH">
            <summary>The Constant BOTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOX_SHADOW">
            <summary>The Constant BOX_SHADOW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOX_SIZING">
            <summary>The Constant BOX_SIZING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CAPTION_SIDE">
            <summary>The Constant CAPTION_SIDE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CLEAR">
            <summary>The Constant CLEAR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COLOR">
            <summary>The Constant COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CONTENT">
            <summary>The Constant CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTER_INCREMENT">
            <summary>The Constant COUNTER_INCREMENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTER_RESET">
            <summary>The Constant COUNTER_RESET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DIRECTION">
            <summary>The Constant DIRECTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DISPLAY">
            <summary>The Constant DISPLAY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.EMPTY_CELLS">
            <summary>The Constant EMPTY_CELLS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FLOAT">
            <summary>The Constant FLOAT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT">
            <summary>The Constant FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_FAMILY">
            <summary>The Constant FONT_FAMILY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_FEATURE_SETTINGS">
            <summary>The Constant FONT_FEATURE_SETTINGS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_KERNING">
            <summary>The Constant FONT_KERNING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_LANGUAGE_OVERRIDE">
            <summary>The Constant FONT_LANGUAGE_OVERRIDE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_SIZE">
            <summary>The Constant FONT_SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_SIZE_ADJUST">
            <summary>The Constant FONT_SIZE_ADJUST.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_STRETCH">
            <summary>The Constant FONT_STRETCH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_STYLE">
            <summary>The Constant FONT_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_SYNTHESIS">
            <summary>The Constant FONT_SYNTHESIS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_VARIANT">
            <summary>The Constant FONT_VARIANT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_VARIANT_ALTERNATES">
            <summary>The Constant FONT_VARIANT_ALTERNATES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_VARIANT_CAPS">
            <summary>The Constant FONT_VARIANT_CAPS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_VARIANT_EAST_ASIAN">
            <summary>The Constant FONT_VARIANT_EAST_ASIAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_VARIANT_LIGATURES">
            <summary>The Constant FONT_VARIANT_LIGATURES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_VARIANT_NUMERIC">
            <summary>The Constant FONT_VARIANT_NUMERIC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_VARIANT_POSITION">
            <summary>The Constant FONT_VARIANT_POSITION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_WEIGHT">
            <summary>The Constant FONT_WEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HANGING_PUNCTUATION">
            <summary>The Constant HANGING_PUNCTUATION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HEIGHT">
            <summary>The Constant HEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HYPHENS">
            <summary>The Constant HYPHENS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LETTER_SPACING">
            <summary>The Constant LETTER_SPACING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LINE_HEIGHT">
            <summary>The Constant LINE_HEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LIST_STYLE">
            <summary>The Constant LIST_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LIST_STYLE_IMAGE">
            <summary>The Constant LIST_STYLE_IMAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LIST_STYLE_POSITION">
            <summary>The Constant LIST_STYLE_POSITION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LIST_STYLE_TYPE">
            <summary>The Constant LIST_STYLE_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MARKS">
            <summary>The Constant MARKS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MARGIN">
            <summary>The Constant MARGIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MARGIN_BOTTOM">
            <summary>The Constant MARGIN_BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MARGIN_LEFT">
            <summary>The Constant MARGIN_LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MARGIN_RIGHT">
            <summary>The Constant MARGIN_RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MARGIN_TOP">
            <summary>The Constant MARGIN_TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MAX_HEIGHT">
            <summary>The Constant MAX_HEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MIN_HEIGHT">
            <summary>The Constant MIN_HEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OPACITY">
            <summary>The Constant OPACITY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTLINE">
            <summary>The Constant OUTLINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTLINE_COLOR">
            <summary>The Constant OUTLINE_COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTLINE_OFFSET">
            <summary>The Constant OUTLINE_OFFSET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTLINE_STYLE">
            <summary>The Constant OUTLINE_STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTLINE_WIDTH">
            <summary>The Constant OUTLINE_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW">
            <summary>The Constant OVERFLOW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW_WRAP">
            <summary>The Constant OVERFLOW_WRAP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW_X">
            <summary>The Constant OVERFLOW_X.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW_Y">
            <summary>The Constant OVERFLOW_Y.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PADDING">
            <summary>The Constant PADDING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PADDING_BOTTOM">
            <summary>The Constant PADDING_BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PADDING_LEFT">
            <summary>The Constant PADDING_LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PADDING_RIGHT">
            <summary>The Constant PADDING_RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PADDING_TOP">
            <summary>The Constant PADDING_TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PAGE_BREAK_AFTER">
            <summary>The Constant PAGE_BREAK_AFTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PAGE_BREAK_BEFORE">
            <summary>The Constant PAGE_BREAK_BEFORE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PAGE_BREAK_INSIDE">
            <summary>The Constant PAGE_BREAK_INSIDE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.POSITION">
            <summary>The Constant POSITION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.QUOTES">
            <summary>The Constant QUOTES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SIZE">
            <summary>The Constant SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.STYLE">
            <summary>The Constant STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TAB_SIZE">
            <summary>The Constant TAB_SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE_LAYOUT">
            <summary>The Constant TABLE_LAYOUT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_ALIGN">
            <summary>The Constant TEXT_ALIGN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_ALIGN_LAST">
            <summary>The Constant TEXT_ALIGN_LAST.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_COMBINE_UPRIGHT">
            <summary>The Constant TEXT_COMBINE_UPRIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_DECORATION">
            <summary>The Constant TEXT_DECORATION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_INDENT">
            <summary>The Constant TEXT_INDENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_JUSTIFY">
            <summary>The Constant TEXT_JUSTIFY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_ORIENTATION">
            <summary>The Constant TEXT_ORIENTATION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_SHADOW">
            <summary>The Constant TEXT_SHADOW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_TRANSFORM">
            <summary>The Constant TEXT_TRANSFORM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_UNDERLINE_POSITION">
            <summary>The Constant TEXT_UNDERLINE_POSITION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TRANSFORM">
            <summary>The Constant TRANSFORM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UNICODE_BIDI">
            <summary>The Constant UNICODE_BIDI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.VERTICAL_ALIGN">
            <summary>The Constant VERTICAL_ALIGN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.VISIBLE">
            <summary>The Constant VISIBILITY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.VISIBILITY">
            <summary>The Constant VISIBILITY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.WHITE_SPACE">
            <summary>The Constant WHITE_SPACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.WIDTH">
            <summary>The Constant WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MAX_WIDTH">
            <summary>The Constant MAX_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MIN_WIDTH">
            <summary>The Constant MIN_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.WORDWRAP">
            <summary>The Constant WORDWRAP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.WORD_BREAK">
            <summary>The Constant WORD_BREAK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.WORD_SPACING">
            <summary>The Constant WORD_SPACING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.WRITING_MODE">
            <summary>The Constant WRITING_MODE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ABSOLUTE">
            <summary>The Constant ABSOLUTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ALWAYS">
            <summary>The Constant ALWAYS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ARMENIAN">
            <summary>The Constant ARMENIAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.AVOID">
            <summary>The Constant AVOID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.AUTO">
            <summary>The Constant AUTO.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BLINK">
            <summary>The Constant BLINK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BLOCK">
            <summary>The Constant BLOCK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOLD">
            <summary>The Constant BOLD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOLDER">
            <summary>The Constant BOLDER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_BOX">
            <summary>The Constant BORDER_BOX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOTTOM">
            <summary>The Constant BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BREAK_WORD">
            <summary>The Constant BREAK_WORD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CAPITALIZE">
            <summary>The Constant CAPITALIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CAPTION">
            <summary>The Constant CAPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CENTER">
            <summary>The Constant CENTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CIRCLE">
            <summary>The Constant CIRCLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CJK_IDEOGRAPHIC">
            <summary>The Constant CJK_IDEOGRAPHIC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CLOSE_QUOTE">
            <summary>The Constant CLOSE_QUOTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COLLAPSE">
            <summary>The Constant COLLAPSE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CONTAIN">
            <summary>The Constant CONTAIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CONTENT_BOX">
            <summary>The Constant CONTENT_BOX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COVER">
            <summary>The Constant COVER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CROP">
            <summary>The Constant CROP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CROSS">
            <summary>The Constant CROSS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CURRENTCOLOR">
            <summary>The Constant CURRENTCOLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DASHED">
            <summary>The Constant DASHED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DECIMAL">
            <summary>The Constant DECIMAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DECIMAL_LEADING_ZERO">
            <summary>The Constant DECIMAL_LEADING_ZERO.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DISC">
            <summary>The Constant DISC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DOTTED">
            <summary>The Constant DOTTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DOUBLE">
            <summary>The Constant DOUBLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST">
            <summary>The Constant FIRST.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_EXCEPT">
            <summary>The Constant FIRST_EXCEPT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIXED">
            <summary>The Constant FIXED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.GEORGIAN">
            <summary>The Constant GEORGIAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.GROOVE">
            <summary>The Constant GROOVE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HEBREW">
            <summary>The Constant HEBREW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HIDDEN">
            <summary>The Constant HIDDEN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HIRAGANA">
            <summary>The Constant HIRAGANA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HIRAGANA_IROHA">
            <summary>The Constant HIRAGANA_IROHA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ICON">
            <summary>The Constant ICON.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INHERIT">
            <summary>The Constant INHERIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INITIAL">
            <summary>The Constant INITIAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INLINE">
            <summary>The Constant INLINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INLINE_BLOCK">
            <summary>The Constant INLINE_BLOCK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INLINE_TABLE">
            <summary>The Constant INLINE_TABLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INSET">
            <summary>The Constant INSET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INSIDE">
            <summary>The Constant INSIDE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INVERT">
            <summary>The Constant INVERT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ITALIC">
            <summary>The Constant ITALIC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.JUSTIFY">
            <summary>The Constant JUSTIFY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LANDSCAPE">
            <summary>The Constant LANDSCAPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LARGE">
            <summary>The Constant LARGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LARGER">
            <summary>The Constant LARGER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LAST">
            <summary>The Constant LAST.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LEFT">
            <summary>The Constant LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LIGHTER">
            <summary>The Constant LIGHTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LINE_THROUGH">
            <summary>The Constant LINE_THROUGH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LOCAL">
            <summary>The Constant LOCAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LOWER_ALPHA">
            <summary>The Constant LOWER_ALPHA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LOWER_GREEK">
            <summary>The Constant LOWER_GREEK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LOWER_LATIN">
            <summary>The Constant LOWER_LATIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LOWER_ROMAN">
            <summary>The Constant LOWER_ROMAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LOWERCASE">
            <summary>The Constant LOWERCASE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LTR">
            <summary>The Constant LTR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MANUAL">
            <summary>The Constant MANUAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MATRIX">
            <summary>The Constant MATRIX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MEDIUM">
            <summary>The Constant MEDIUM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MENU">
            <summary>The Constant MENU.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MESSAGE_BOX">
            <summary>The Constant MESSAGE_BOX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MIDDLE">
            <summary>The Constant MIDDLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NO_OPEN_QUOTE">
            <summary>The Constant NO_OPEN_QUOTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NO_CLOSE_QUOTE">
            <summary>The Constant NO_CLOSE_QUOTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NO_REPEAT">
            <summary>The Constant NO_REPEAT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NONE">
            <summary>The Constant NONE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NORMAL">
            <summary>The Constant NORMAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NOWRAP">
            <summary>The Constant NOWRAP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OBLIQUE">
            <summary>The Constant OBLIQUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OPEN_QUOTE">
            <summary>The Constant OPEN_QUOTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTSIDE">
            <summary>The Constant OUTSIDE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTSET">
            <summary>The Constant OUTSET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERLINE">
            <summary>The Constant OVERLINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PADDING_BOX">
            <summary>The Constant PADDING_BOX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PAGE">
            <summary>The Constant PAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PAGES">
            <summary>The Constant PAGES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PORTRAIT">
            <summary>The Constant PORTRAIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PRE">
            <summary>The Constant PRE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PRE_LINE">
            <summary>The Constant PRE_LINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PRE_WRAP">
            <summary>The Constant PRE_WRAP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RELATIVE">
            <summary>The Constant RELATIVE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.REPEAT">
            <summary>The Constant REPEAT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.REPEAT_X">
            <summary>The Constant REPEAT_X.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.REPEAT_Y">
            <summary>The Constant REPEAT_Y.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RIDGE">
            <summary>The Constant RIDGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RIGHT">
            <summary>The Constant RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ROTATE">
            <summary>The Constant ROTATE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RTL">
            <summary>The Constant RTL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SCALE">
            <summary>The Constant SCALE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SCALE_X">
            <summary>The Constant SCALE_X.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SCALE_Y">
            <summary>The Constant SCALE_Y.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SCROLL">
            <summary>The Constant SCROLL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SEPARATE">
            <summary>The Constant SEPARATE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SKEW">
            <summary>The Constant SKEW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SKEW_X">
            <summary>The Constant SKEW_X.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SKEW_Y">
            <summary>The Constant SKEW_Y.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SMALL">
            <summary>The Constant SMALL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SMALL_CAPS">
            <summary>The Constant SMALL_CAPS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SMALL_CAPTION">
            <summary>The Constant SMALL_CAPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SMALLER">
            <summary>The Constant SMALLER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SOLID">
            <summary>The Constant SOLID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SQUARE">
            <summary>The Constant SQUARE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.START">
            <summary>The Constant START.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.STATIC">
            <summary>The Constant STATIC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.STATUS_BAR">
            <summary>The Constant STATUS_BAR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SUB">
            <summary>The Constant SUB.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SUPER">
            <summary>The Constant SUPER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE">
            <summary>The Constant TABLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE_CELL">
            <summary>The Constant TABLE_CELL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE_ROW">
            <summary>The Constant TABLE_ROW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_BOTTOM">
            <summary>The Constant TEXT_BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_TOP">
            <summary>The Constant TEXT_TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.THICK">
            <summary>The Constant THICK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.THIN">
            <summary>The Constant THIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TOP">
            <summary>The Constant TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TRANSLATE">
            <summary>The Constant TRANSLATE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TRANSLATE_X">
            <summary>The Constant TRANSLATE_X.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TRANSLATE_Y">
            <summary>The Constant TRANSLATE_Y.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TRANSPARENT">
            <summary>The Constant TRANSPARENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UNDERLINE">
            <summary>The Constant UNDERLINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UPPER_ALPHA">
            <summary>The Constant UPPER_ALPHA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UPPER_LATIN">
            <summary>The Constant UPPER_LATIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UPPER_ROMAN">
            <summary>The Constant UPPER_ROMAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UPPERCASE">
            <summary>The Constant UPPERCASE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.X_LARGE">
            <summary>The Constant X_LARGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.X_SMALL">
            <summary>The Constant X_SMALL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.XX_LARGE">
            <summary>The Constant XX_LARGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.XX_SMALL">
            <summary>The Constant XX_SMALL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_SIZE_VALUES">
            <summary>The Constant BACKGROUND_SIZE_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_ORIGIN_OR_CLIP_VALUES">
            <summary>The Constant BACKGROUND_ORIGIN_OR_CLIP_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_REPEAT_VALUES">
            <summary>The Constant BACKGROUND_REPEAT_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_ATTACHMENT_VALUES">
            <summary>The Constant BACKGROUND_ATTACHMENT_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BACKGROUND_POSITION_VALUES">
            <summary>The Constant BACKGROUND_POSITION_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_WIDTH_VALUES">
            <summary>The Constant BORDER_WIDTH_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BORDER_STYLE_VALUES">
            <summary>The Constant BORDER_STYLE_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FONT_ABSOLUTE_SIZE_KEYWORDS">
            <summary>The Constant FONT_ABSOLUTE_SIZE_KEYWORDS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW_VALUES">
            <summary>The Constant OVERFLOW_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.AFTER">
            <summary>The Constant AFTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BEFORE">
            <summary>The Constant BEFORE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_LETTER">
            <summary>The Constant FIRST_LETTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_LINE">
            <summary>The Constant FIRST_LINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SELECTION">
            <summary>The Constant SELECTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ACTIVE">
            <summary>The Constant ACTIVE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CHECKED">
            <summary>The Constant CHECKED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DISABLED">
            <summary>The Constant DISABLED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.EMPTY">
            <summary>The Constant EMPTY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ENABLED">
            <summary>The Constant ENABLED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_CHILD">
            <summary>The Constant FIRST_CHILD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_OF_TYPE">
            <summary>The Constant FIRST_OF_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FOCUS">
            <summary>The Constant FOCUS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.HOVER">
            <summary>The Constant HOVER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.IN_RANGE">
            <summary>The Constant IN_RANGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INVALID">
            <summary>The Constant INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LANG">
            <summary>The Constant LANG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LAST_CHILD">
            <summary>The Constant LAST_CHILD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LAST_OF_TYPE">
            <summary>The Constant LAST_OF_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LINK">
            <summary>The Constant LINK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NTH_CHILD">
            <summary>The Constant NTH_CHILD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NOT">
            <summary>The Constant NOT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NTH_LAST_CHILD">
            <summary>The Constant NTH_LAST_CHILD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NTH_LAST_OF_TYPE">
            <summary>The Constant NTH_LAST_OF_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NTH_OF_TYPE">
            <summary>The Constant NTH_OF_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ONLY_OF_TYPE">
            <summary>The Constant ONLY_OF_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ONLY_CHILD">
            <summary>The Constant ONLY_CHILD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OPTIONAL">
            <summary>The Constant OPTIONAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUT_OF_RANGE">
            <summary>The Constant OUT_OF_RANGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.READ_ONLY">
            <summary>The Constant READ_ONLY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.READ_WRITE">
            <summary>The Constant READ_WRITE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.REQUIRED">
            <summary>The Constant REQUIRED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ROOT">
            <summary>The Constant ROOT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TARGET">
            <summary>The Constant TARGET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.VALID">
            <summary>The Constant VALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.VISITED">
            <summary>The Constant VISITED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTER">
            <summary>The Constant COUNTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTERS">
            <summary>The Constant COUNTERS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ELEMENT">
            <summary>The Constant RUNNING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RUNNING">
            <summary>The Constant RUNNING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CM">
            <summary>The Constant CM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.EM">
            <summary>The Constant EM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.EX">
            <summary>The Constant EX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.IN">
            <summary>The Constant IN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MM">
            <summary>The Constant MM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PC">
            <summary>The Constant PC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PERCENTAGE">
            <summary>The Constant PERCENTAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PT">
            <summary>The Constant PT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PX">
            <summary>The Constant PX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.REM">
            <summary>The Constant REM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.Q">
            <summary>The Constant Q.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DPI">
            <summary>The Constant DPI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DPCM">
            <summary>The Constant DPCM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DPPX">
            <summary>The Constant DPPX.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.CssContextNode">
            <summary>The CSS context node.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssContextNode.childNodes">
            <summary>The child nodes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssContextNode.parentNode">
            <summary>The parent node.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssContextNode.styles">
            <summary>The styles.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssContextNode.#ctor(iText.Html2pdf.Html.Node.INode)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssContextNode"/>
            instance.
            </summary>
            <param name="parentNode">the parent node</param>
        </member>
        <member name="T:iText.Html2pdf.Css.CssDeclaration">
            <summary>Class to store a CSS declaration.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssDeclaration.property">
            <summary>The property.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssDeclaration.expression">
            <summary>The expression.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssDeclaration.#ctor(System.String,System.String)">
            <summary>Instantiates a new CSS declaration.</summary>
            <param name="property">the property</param>
            <param name="expression">the expression</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssDeclaration.GetProperty">
            <summary>Gets the property.</summary>
            <returns>the property</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssDeclaration.GetExpression">
            <summary>Gets the expression.</summary>
            <returns>the expression</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssDeclaration.SetExpression(System.String)">
            <summary>Sets the expression.</summary>
            <param name="expression">the new expression</param>
        </member>
        <member name="T:iText.Html2pdf.Css.CssFontFaceRule">
            <summary>Class to store a CSS font face At rule.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssFontFaceRule.properties">
            <summary>Properties in the form of a list of CSS declarations.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssFontFaceRule.#ctor(System.String)">
            <summary>Instantiates a new CSS font face rule.</summary>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssFontFaceRule.GetProperties">
            <summary>Gets the properties.</summary>
            <returns>the properties</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.CssNestedAtRule">
            <summary>
            Class to store a nested CSS at-rule
            Nested at-rules are a subset of nested statements, which can be used
            as a statement of a style sheet as well as inside of conditional group rules.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssNestedAtRule.ruleParameters">
            <summary>The rule parameters.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssNestedAtRule.body">
            <summary>The body.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRule.#ctor(System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRule"/>
            instance
            with an empty body.
            </summary>
            <param name="ruleName">the rule name</param>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRule.AddStatementToBody(iText.Html2pdf.Css.CssStatement)">
            <summary>Adds a CSS statement to body.</summary>
            <param name="statement">a CSS statement</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRule.AddStatementsToBody(System.Collections.Generic.ICollection{iText.Html2pdf.Css.CssStatement})">
            <summary>Adds CSS statements to the body.</summary>
            <param name="statements">a list of CSS statements</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRule.AddBodyCssDeclarations(System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration})">
            <summary>Adds the body CSS declarations.</summary>
            <param name="cssDeclarations">a list of CSS declarations</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRule.GetStatements">
            <summary>Gets the list of CSS statements.</summary>
            <returns>the list of CSS statements</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.CssNestedAtRuleFactory">
            <summary>
            A factory for creating
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRule"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRuleFactory.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRuleFactory"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRuleFactory.CreateNestedRule(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRule"/>
            object.
            </summary>
            <param name="ruleDeclaration">the rule declaration</param>
            <returns>
            a
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRule"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssNestedAtRuleFactory.ExtractRuleNameFromDeclaration(System.String)">
            <summary>Extracts the rule name from the CSS rule declaration.</summary>
            <param name="ruleDeclaration">the rule declaration</param>
            <returns>the rule name</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.CssRuleName">
            <summary>Class containing possible CSS rule names.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssRuleName.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssRuleName"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.BOTTOM_CENTER">
            <summary>The Constant BOTTOM_CENTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.BOTTOM_LEFT">
            <summary>The Constant BOTTOM_LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.BOTTOM_LEFT_CORNER">
            <summary>The Constant BOTTOM_LEFT_CORNER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.BOTTOM_RIGHT">
            <summary>The Constant BOTTOM_RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.BOTTOM_RIGHT_CORNER">
            <summary>The Constant BOTTOM_RIGHT_CORNER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.LEFT_BOTTOM">
            <summary>The Constant LEFT_BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.LEFT_MIDDLE">
            <summary>The Constant LEFT_MIDDLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.LEFT_TOP">
            <summary>The Constant LEFT_TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.FONT_FACE">
            <summary>The Constant FONT_FACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.MEDIA">
            <summary>The Constant MEDIA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.PAGE">
            <summary>The Constant PAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.RIGHT_BOTTOM">
            <summary>The Constant RIGHT_BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.RIGHT_MIDDLE">
            <summary>The Constant RIGHT_MIDDLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.RIGHT_TOP">
            <summary>The Constant RIGHT_TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.TOP_CENTER">
            <summary>The Constant TOP_CENTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.TOP_LEFT">
            <summary>The Constant TOP_LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.TOP_LEFT_CORNER">
            <summary>The Constant TOP_LEFT_CORNER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.TOP_RIGHT">
            <summary>The Constant TOP_RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleName.TOP_RIGHT_CORNER">
            <summary>The Constant TOP_RIGHT_CORNER.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.CssRuleSet">
            <summary>Class to store a CSS rule set.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleSet.importantMatcher">
            <summary>Pattern to match "important" in a rule declaration.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleSet.selector">
            <summary>The CSS selector.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleSet.normalDeclarations">
            <summary>The normal CSS declarations.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleSet.importantDeclarations">
            <summary>The important CSS declarations.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssRuleSet.#ctor(iText.Html2pdf.Css.Selector.ICssSelector,System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration})">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssRuleSet"/>
            from selector and raw list of declarations.
            The declarations are split into normal and important under the hood.
            To construct the
            <see cref="T:iText.Html2pdf.Css.CssRuleSet"/>
            instance from normal and important declarations, see
            <see cref="!:CssRuleSet(iText.Html2pdf.Css.Selector.ICssSelector, System.Collections.Generic.IList&lt;E&gt;, System.Collections.Generic.IList&lt;E&gt;)"/>
            </summary>
            <param name="selector">the CSS selector</param>
            <param name="declarations">the CSS declarations</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssRuleSet.GetSelector">
            <summary>Gets the CSS selector.</summary>
            <returns>the CSS selector</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssRuleSet.GetNormalDeclarations">
            <summary>Gets the normal CSS declarations.</summary>
            <returns>the normal declarations</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssRuleSet.GetImportantDeclarations">
            <summary>Gets the important CSS declarations.</summary>
            <returns>the important declarations</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssRuleSet.SplitDeclarationsIntoNormalAndImportant(System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration},System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration},System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration})">
            <summary>Split CSS declarations into normal and important CSS declarations.</summary>
            <param name="declarations">the declarations</param>
        </member>
        <member name="T:iText.Html2pdf.Css.CssRuleSetComparator">
            <summary>Comparator class used to sort CSS rule set objects.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssRuleSetComparator.selectorComparator">
            <summary>The selector comparator.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.CssSemicolonAtRule">
            <summary>
            A
            <see cref="T:iText.Html2pdf.Css.CssAtRule"/>
            implementation.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssSemicolonAtRule.ruleParams">
            <summary>The rule parameters.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssSemicolonAtRule.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssSemicolonAtRule"/>
            instance.
            </summary>
            <param name="ruleDeclaration">the rule declaration</param>
        </member>
        <member name="T:iText.Html2pdf.Css.CssStatement">
            <summary>Abstract superclass for all kinds of CSS statements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStatement.GetCssRuleSets(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Media.MediaDeviceDescription)">
            <summary>
            Gets a list of
            <see cref="T:iText.Html2pdf.Css.CssRuleSet"/>
            objects.
            </summary>
            <param name="node">a node</param>
            <param name="deviceDescription">a media device description</param>
            <returns>the css rule sets</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.CssStyleSheet">
            <summary>Class that stores all the CSS statements, and thus acts as a CSS style sheet.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssStyleSheet.statements">
            <summary>The list of CSS statements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.AddStatement(iText.Html2pdf.Css.CssStatement)">
            <summary>Adds a CSS statement to the style sheet.</summary>
            <param name="statement">the CSS statement</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.AppendCssStyleSheet(iText.Html2pdf.Css.CssStyleSheet)">
            <summary>Append another CSS style sheet to this one.</summary>
            <param name="anotherCssStyleSheet">the other CSS style sheet</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.GetStatements">
            <summary>Gets the CSS statements of this style sheet.</summary>
            <returns>the CSS statements</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.GetCssDeclarations(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Media.MediaDeviceDescription)">
            <summary>Gets the CSS declarations.</summary>
            <param name="node">the node</param>
            <param name="deviceDescription">the media device description</param>
            <returns>the CSS declarations</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.PopulateDeclarationsMap(System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration},System.Collections.Generic.IDictionary{System.String,iText.Html2pdf.Css.CssDeclaration})">
            <summary>Populates the CSS declarations map.</summary>
            <param name="declarations">the declarations</param>
            <param name="map">the map</param>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.GetCssRuleSets(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Media.MediaDeviceDescription)">
            <summary>Gets the CSS rule sets.</summary>
            <param name="node">the node</param>
            <param name="deviceDescription">the device description</param>
            <returns>the css rule sets</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.CssStyleSheet.PutDeclarationInMapIfValid(System.Collections.Generic.IDictionary{System.String,iText.Html2pdf.Css.CssDeclaration},iText.Html2pdf.Css.CssDeclaration)">
            <summary>Puts a declaration in a styles map if the declaration is valid.</summary>
            <param name="stylesMap">the styles map</param>
            <param name="cssDeclaration">the css declaration</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.CssMediaRule">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRule"/>
            implementation for media rules.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.CssMediaRule.mediaQueries">
            <summary>The media queries.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.CssMediaRule.#ctor(System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Media.CssMediaRule"/>
            .
            </summary>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.CssMediaRule.MatchMediaDevice(iText.Html2pdf.Css.Media.MediaDeviceDescription)">
            <summary>Tries to match a media device.</summary>
            <param name="deviceDescription">the device description</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.MediaDeviceDescription">
            <summary>Class that bundles all the values of a media device description.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.type">
            <summary>The type.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.bitsPerComponent">
            <summary>The bits per component.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.colorIndex">
            <summary>The color index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.width">
            <summary>The width in points.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.height">
            <summary>The height in points.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.isGrid">
            <summary>Indicates if the media device is a grid.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.scan">
            <summary>The scan value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.orientation">
            <summary>The orientation.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.monochrome">
            <summary>The the number of bits per pixel on a monochrome (greyscale) device.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaDeviceDescription.resolution">
            <summary>The resolution in DPI.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.#ctor(System.String)">
            <summary>
            See
            <see cref="T:iText.Html2pdf.Css.Media.MediaType"/>
            class constants for possible values.
            </summary>
            <param name="type">a type of the media to use.</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Media.MediaDeviceDescription"/>
            instance.
            </summary>
            <param name="type">the type</param>
            <param name="width">the width</param>
            <param name="height">the height</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.CreateDefault">
            <summary>
            Creates the default
            <see cref="T:iText.Html2pdf.Css.Media.MediaDeviceDescription"/>
            .
            </summary>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetDefault">
            <summary>
            Gets default
            <see cref="T:iText.Html2pdf.Css.Media.MediaDeviceDescription"/>
            instance.
            Do not modify any fields of the returned media device description because it may lead
            to unpredictable results. Use
            <see cref="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.CreateDefault"/>
            if you want to modify device description.
            </summary>
            <returns>the default media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetType">
            <summary>Gets the type.</summary>
            <returns>the type</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetBitsPerComponent">
            <summary>Gets the bits per component.</summary>
            <returns>the bits per component</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetBitsPerComponent(System.Int32)">
            <summary>Sets the bits per component.</summary>
            <param name="bitsPerComponent">the bits per component</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetColorIndex">
            <summary>Gets the color index.</summary>
            <returns>the color index</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetColorIndex(System.Int32)">
            <summary>Sets the color index.</summary>
            <param name="colorIndex">the color index</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetWidth">
            <summary>Gets the width in points.</summary>
            <returns>the width</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetWidth(System.Single)">
            <summary>Sets the width in points.</summary>
            <param name="width">the width</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetHeight">
            <summary>Gets the height in points.</summary>
            <returns>the height</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetHeight(System.Single)">
            <summary>Sets the height in points.</summary>
            <param name="height">the height</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.IsGrid">
            <summary>Checks if the media device is a grid.</summary>
            <returns>true, if is grid</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetGrid(System.Boolean)">
            <summary>Sets the grid value.</summary>
            <param name="grid">the grid value</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetScan">
            <summary>Gets the scan value.</summary>
            <returns>the scan value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetScan(System.String)">
            <summary>Sets the scan value.</summary>
            <param name="scan">the scan value</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetOrientation">
            <summary>Gets the orientation.</summary>
            <returns>the orientation</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetOrientation(System.String)">
            <summary>Sets the orientation.</summary>
            <param name="orientation">the orientation</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetMonochrome">
            <summary>Gets the number of bits per pixel on a monochrome (greyscale) device.</summary>
            <returns>the number of bits per pixel on a monochrome (greyscale) device</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetMonochrome(System.Int32)">
            <summary>Sets the number of bits per pixel on a monochrome (greyscale) device.</summary>
            <param name="monochrome">the number of bits per pixel on a monochrome (greyscale) device</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.GetResolution">
            <summary>Gets the resolution in DPI.</summary>
            <returns>the resolution</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaDeviceDescription.SetResolution(System.Single)">
            <summary>Sets the resolution in DPI.</summary>
            <param name="resolution">the resolution</param>
            <returns>the media device description</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.MediaExpression">
            <summary>Class that bundles all the media expression properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaExpression.DEFAULT_FONT_SIZE">
            <summary>The default font size.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaExpression.minPrefix">
            <summary>Indicates if there's a "min-" prefix.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaExpression.maxPrefix">
            <summary>Indicates if there's a "max-" prefix.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaExpression.feature">
            <summary>The feature.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaExpression.value">
            <summary>The value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaExpression.#ctor(System.String,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Media.MediaExpression"/>
            instance.
            </summary>
            <param name="feature">the feature</param>
            <param name="value">the value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaExpression.Matches(iText.Html2pdf.Css.Media.MediaDeviceDescription)">
            <summary>
            Tries to match a
            <see cref="T:iText.Html2pdf.Css.Media.MediaDeviceDescription"/>
            .
            </summary>
            <param name="deviceDescription">the device description</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaExpression.ParseAbsoluteLength(System.String)">
            <summary>Parses an absolute length.</summary>
            <param name="value">
            the absolute length as a
            <see cref="T:System.String"/>
            value
            </param>
            <returns>
            the absolute length as a
            <c>float</c>
            value
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.MediaFeature">
            <summary>Class that bundles all the media feature values.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaFeature.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Media.MediaFeature"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.COLOR">
            <summary>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per color component of the output device.
            </summary>
            <remarks>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per color component of the output device. If the device is not a color device, this value is zero.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.COLOR_INDEX">
            <summary>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of entries in the color look-up table for the output device.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.ASPECT_RATIO">
            <summary>
            Value: &lt;ratio&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            Describes the aspect ratio of the targeted display area of the output device.
            </summary>
            <remarks>
            Value: &lt;ratio&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            Describes the aspect ratio of the targeted display area of the output device.
            This value consists of two positive integers separated by a slash ("/") character.
            This represents the ratio of horizontal pixels (first term) to vertical pixels (second term).
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.GRID">
            <summary>
            Value: &lt;mq-boolean&gt; which is an &lt;integer&gt; that can only have the 0 and 1 value.<br />
            Media: all<br />
            Accepts min/max prefixes: no<br />
            Determines whether the output device is a grid device or a bitmap device.
            </summary>
            <remarks>
            Value: &lt;mq-boolean&gt; which is an &lt;integer&gt; that can only have the 0 and 1 value.<br />
            Media: all<br />
            Accepts min/max prefixes: no<br />
            Determines whether the output device is a grid device or a bitmap device.
            If the device is grid-based (such as a TTY terminal or a phone display with only one font),
            the value is 1. Otherwise it is zero.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.SCAN">
            <summary>
            Value: progressive | interlace<br />
            Media: tv<br />
            Accepts min/max prefixes: no<br />
            Describes the scanning process of television output devices.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.ORIENTATION">
            <summary>
            Value: landscape | portrait<br />
            Media: visual<br />
            Accepts min/max prefixes: no<br />
            Indicates whether the viewport is in landscape (the display is wider than it is tall) or
            portrait (the display is taller than it is wide) mode.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.MONOCHROME">
            <summary>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per pixel on a monochrome (greyscale) device.
            </summary>
            <remarks>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per pixel on a monochrome (greyscale) device.
            If the device isn't monochrome, the device's value is 0.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.HEIGHT">
            <summary>
            Value: &lt;length&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            The height media feature describes the height of the output device's rendering surface
            (such as the height of the viewport or of the page box on a printer).
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.RESOLUTION">
            <summary>
            Value: &lt;resolution&gt;<br />
            Media: bitmap<br />
            Accepts min/max prefixes: yes<br />
            Indicates the resolution (pixel density) of the output device.
            </summary>
            <remarks>
            Value: &lt;resolution&gt;<br />
            Media: bitmap<br />
            Accepts min/max prefixes: yes<br />
            Indicates the resolution (pixel density) of the output device. The resolution may be specified in
            either dots per inch (dpi) or dots per centimeter (dpcm).
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaFeature.WIDTH">
            <summary>
            Value: &lt;length&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            The width media feature describes the width of the rendering surface of the output device
            (such as the width of the document window, or the width of the page box on a printer).
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.MediaQuery">
            <summary>Class that bundles all the media query properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaQuery.only">
            <summary>The logical "only" value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaQuery.not">
            <summary>The logical "not" value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaQuery.type">
            <summary>The type.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaQuery.expressions">
            <summary>The expressions.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaQuery.#ctor(System.String,System.Collections.Generic.IList{iText.Html2pdf.Css.Media.MediaExpression},System.Boolean,System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Media.MediaQuery"/>
            instance.
            </summary>
            <param name="type">the type</param>
            <param name="expressions">the expressions</param>
            <param name="only">logical "only" value</param>
            <param name="not">logical "not" value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaQuery.Matches(iText.Html2pdf.Css.Media.MediaDeviceDescription)">
            <summary>Tries to match a device description with the media query.</summary>
            <param name="deviceDescription">the device description</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.MediaQueryParser">
            <summary>
            Utilities class that parses
            <see cref="T:System.String"/>
            values into
            <see cref="T:iText.Html2pdf.Css.Media.MediaQuery"/>
            or
            <see cref="T:iText.Html2pdf.Css.Media.MediaExpression"/>
            values.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaQueryParser.#ctor">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Media.MediaQueryParser"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaQueryParser.ParseMediaQueries(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Html2pdf.Css.Media.MediaQuery"/>
            values.
            </summary>
            <param name="mediaQueriesStr">
            the media queries in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Html2pdf.Css.Media.MediaQuery"/>
            values
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaQueryParser.ParseMediaQuery(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a
            <see cref="T:iText.Html2pdf.Css.Media.MediaQuery"/>
            value.
            </summary>
            <param name="mediaQueryStr">
            the media query in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting
            <see cref="T:iText.Html2pdf.Css.Media.MediaQuery"/>
            value
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaQueryParser.ParseMediaExpressions(System.String,System.Boolean)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a list of
            <see cref="T:iText.Html2pdf.Css.Media.MediaExpression"/>
            values.
            </summary>
            <param name="mediaExpressionsStr">
            the media expressions in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="shallStartWithAnd">indicates if the media expression shall start with "and"</param>
            <returns>
            the resulting list of
            <see cref="T:iText.Html2pdf.Css.Media.MediaExpression"/>
            values
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaQueryParser.ParseMediaExpression(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a
            <see cref="T:iText.Html2pdf.Css.Media.MediaExpression"/>
            value.
            </summary>
            <param name="mediaExpressionStr">
            the media expression in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting
            <see cref="T:iText.Html2pdf.Css.Media.MediaExpression"/>
            value
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.MediaRuleConstants">
            <summary>Class that bundles a series of media rule constants.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaRuleConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Media.MediaRuleConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaRuleConstants.AND">
            <summary>The Constant AND.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaRuleConstants.MIN">
            <summary>The Constant MIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaRuleConstants.MAX">
            <summary>The Constant MAX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaRuleConstants.NOT">
            <summary>The Constant NOT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaRuleConstants.ONLY">
            <summary>The Constant ONLY.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Media.MediaType">
            <summary>
            Class that bundles all the media types and allows you to registered valid media types in a
            <see cref="!:Java.Util.Set&lt;E&gt;"/>
            .
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.registeredMediaTypes">
            <summary>The Constant registeredMediaTypes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.ALL">
            <summary>The Constant ALL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.AURAL">
            <summary>The Constant AURAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.BRAILLE">
            <summary>The Constant BRAILLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.EMBOSSED">
            <summary>The Constant EMBOSSED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.HANDHELD">
            <summary>The Constant HANDHELD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.PRINT">
            <summary>The Constant PRINT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.PROJECTION">
            <summary>The Constant PROJECTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.SCREEN">
            <summary>The Constant SCREEN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.SPEECH">
            <summary>The Constant SPEECH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.TTY">
            <summary>The Constant TTY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Media.MediaType.TV">
            <summary>The Constant TV.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaType.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Media.MediaType"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaType.IsValidMediaType(System.String)">
            <summary>Checks if a media type is registered as a valid media type.</summary>
            <param name="mediaType">the media type</param>
            <returns>true, if it's a valid media type</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Media.MediaType.RegisterMediaType(System.String)">
            <summary>Registers a media type.</summary>
            <param name="mediaType">the media type</param>
            <returns>the string</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.CssMarginRule">
            <summary>
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRule"/>
            implementation for margins.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.CssMarginRule.pageSelectors">
            <summary>The page selectors.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssMarginRule.#ctor(System.String,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Page.CssMarginRule"/>
            instance.
            </summary>
            <param name="ruleName">the rule name</param>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssMarginRule.SetPageSelectors(System.Collections.Generic.IList{iText.Html2pdf.Css.Selector.ICssSelector})">
            <summary>Sets the page selectors.</summary>
            <param name="pageSelectors">the new page selectors</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.CssNonStandardRuleSet">
            <summary>
            Class for a non standard
            <see cref="T:iText.Html2pdf.Css.CssRuleSet"/>
            .
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssNonStandardRuleSet.#ctor(iText.Html2pdf.Css.Selector.ICssSelector,System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration})">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Page.CssNonStandardRuleSet"/>
            instance.
            </summary>
            <param name="selector">the selector</param>
            <param name="declarations">the declarations</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.CssPageRule">
            <summary>
            <see cref="T:iText.Html2pdf.Css.CssNestedAtRule"/>
            implementation for page rules.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.CssPageRule.pageSelectors">
            <summary>The page selectors.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssPageRule.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Page.CssPageRule"/>
            instance.
            </summary>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.CssRunningManager">
            <summary>Class that manages running elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssRunningManager.AddRunningElement(System.String,iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer)">
            <summary>Registers new running element from HTML document.</summary>
            <param name="runningElemName">the name of the new running element.</param>
            <param name="container">a wrapper for the running elements taken out of the normal flow.</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssRunningManager.GetRunningElement(System.String,System.String,System.Int32)">
            <summary>
            Finds the running element that has particular name and should appear on specific page with given occurrence
            options.
            </summary>
            <remarks>
            Finds the running element that has particular name and should appear on specific page with given occurrence
            options. This would work only if page content was already layouted and flushed (drawn).
            </remarks>
            <param name="runningElemName">the running element name.</param>
            <param name="occurrenceOption">
            an option defining which running element should be chosen in case there are multiple
            running elements with the same name on the given page.
            </param>
            <param name="pageNum">the 1-based index of the page for which running element is requested.</param>
            <returns>
            
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer"/>
            with corresponding running element, or
            <see langword="null"/>
            if no running
            element should be displayed for the given page with the given name or occurrence option.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.PageContextConstants">
            <summary>Class that bundles a series of page context constants.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageContextConstants.BLANK">
            <summary>The Constant BLANK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageContextConstants.FIRST">
            <summary>The Constant FIRST.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageContextConstants.LEFT">
            <summary>The Constant LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageContextConstants.RIGHT">
            <summary>The Constant RIGHT.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.PageContextNode">
            <summary>
            <see cref="T:iText.Html2pdf.Css.CssContextNode"/>
            implementation for page contexts.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageContextNode.pageTypeName">
            <summary>The page type name.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageContextNode.pageClasses">
            <summary>The page classes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageContextNode.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Page.PageContextNode"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageContextNode.#ctor(iText.Html2pdf.Html.Node.INode)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Page.PageContextNode"/>
            instance.
            </summary>
            <param name="parentNode">the parent node</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageContextNode.AddPageClass(System.String)">
            <summary>Adds a page class.</summary>
            <param name="pageClass">the page class</param>
            <returns>the page context node</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageContextNode.GetPageTypeName">
            <summary>Gets the page type name.</summary>
            <returns>the page type name</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageContextNode.SetPageTypeName(System.String)">
            <summary>Sets the page type name.</summary>
            <param name="pageTypeName">the page type name</param>
            <returns>the page context node</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageContextNode.GetPageClasses">
            <summary>Gets the list of page classes.</summary>
            <returns>the page classes</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.PageMarginBoxContextNode">
            <summary>
            <see cref="T:iText.Html2pdf.Css.CssContextNode"/>
            implementation for page margin box contexts.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.PAGE_MARGIN_BOX_TAG">
            <summary>The Constant PAGE_MARGIN_BOX_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.marginBoxName">
            <summary>The margin box name.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.#ctor(iText.Html2pdf.Html.Node.INode,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Page.PageMarginBoxContextNode"/>
            instance.
            </summary>
            <param name="parentNode">the parent node</param>
            <param name="marginBoxName">the margin box name</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.GetMarginBoxName">
            <summary>Gets the margin box name.</summary>
            <returns>the margin box name</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.SetPageMarginBoxRectangle(iText.Kernel.Geom.Rectangle)">
            <summary>Sets the rectangle in which page margin box contents are shown.</summary>
            <param name="pageMarginBoxRectangle">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            defining position and dimensions of the margin box content area
            </param>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.GetPageMarginBoxRectangle">
            <summary>Gets the rectangle in which page margin box contents should be shown.</summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            defining position and dimensions of the margin box content area
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.SetContainingBlockForMarginBox(iText.Kernel.Geom.Rectangle)">
            <summary>
            Sets the containing block rectangle for the margin box, which is used for calculating
            some of the margin box properties relative values.
            </summary>
            <param name="containingBlockForMarginBox">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            which is used as a reference for some
            margin box relative properties calculations.
            </param>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.PageMarginBoxContextNode.GetContainingBlockForMarginBox">
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            which is used as a reference for some
            margin box relative properties calculations.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.PageMarginRunningElementNode">
            <summary>
            Wrapper
            <see cref="T:iText.Html2pdf.Html.Node.INode"/>
            serving as a placeholder for running element.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer">
            <summary>Tokenizer for CSS declaration values.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.src">
            <summary>The source string.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.index">
            <summary>The current index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.stringQuote">
            <summary>The quote string, either "'" or "\"".</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.inString">
            <summary>Indicates if we're inside a string.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.functionDepth">
            <summary>The depth.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer"/>
            instance.
            </summary>
            <param name="propertyValue">the property value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.GetNextValidToken">
            <summary>Gets the next valid token.</summary>
            <returns>the next valid token</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.GetNextToken">
            <summary>Gets the next token.</summary>
            <returns>the next token</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.IsHexDigit(System.Char)">
            <summary>Checks if a character is a hexadecimal digit.</summary>
            <param name="c">the character</param>
            <returns>true, if it's a hexadecimal digit</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.ProcessFunctionToken(iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token,System.Text.StringBuilder)">
            <summary>Processes a function token.</summary>
            <param name="token">the token</param>
            <param name="functionBuffer">the function buffer</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token">
            <summary>The Token class.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token.value">
            <summary>The value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token.type">
            <summary>The type.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token.#ctor(System.String,iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.TokenType)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token"/>
            instance.
            </summary>
            <param name="value">the value</param>
            <param name="type">the type</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token.GetValue">
            <summary>Gets the value.</summary>
            <returns>the value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token.GetType">
            <summary>Gets the type.</summary>
            <returns>the type</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.Token.IsString">
            <summary>Checks if the token is a string.</summary>
            <returns>true, if is string</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssDeclarationValueTokenizer.TokenType">
            <summary>Enumeration of the different token types.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssPageSelectorParser">
            <summary>Utilities class to parse CSS page selectors.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssPageSelectorParser.PAGE_SELECTOR_PATTERN_STR">
            <summary>The pattern string for page selectors.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssPageSelectorParser.selectorPattern">
            <summary>The pattern for page selectors.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssPageSelectorParser.ParseSelectorItems(System.String)">
            <summary>Parses the selector items into a list of <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/> instances.</summary>
            <param name="selectorItemsStr">the selector items in the form of a <see cref="T:System.String"/></param>
            <returns>the resulting list of <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/> instances</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssRuleSetParser">
            <summary>Utilities class to parse CSS rule sets.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssRuleSetParser.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssRuleSetParser.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.CssRuleSetParser"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssRuleSetParser.ParsePropertyDeclarations(System.String)">
            <summary>Parses property declarations.</summary>
            <param name="propertiesStr">
            the property declarations in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the list of
            <see cref="T:iText.Html2pdf.Css.CssDeclaration"/>
            instances
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssRuleSetParser.ParseRuleSet(System.String,System.String)">
            <summary>
            Parses a rule set into a list of
            <see cref="T:iText.Html2pdf.Css.CssRuleSet"/>
            instances.
            This method returns a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            because a selector can
            be compound, like "p, div, #navbar".
            </summary>
            <param name="selectorStr">the selector</param>
            <param name="propertiesStr">the properties</param>
            <returns>
            the resulting list of
            <see cref="T:iText.Html2pdf.Css.CssRuleSet"/>
            instances
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssRuleSetParser.SplitCssProperty(System.String)">
            <summary>
            Splits CSS properties into an array of
            <see cref="T:System.String"/>
            values.
            </summary>
            <param name="property">the properties</param>
            <returns>the array of property values</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssRuleSetParser.GetSemicolonPosition(System.String,System.Int32)">
            <summary>Gets the semicolon position.</summary>
            <param name="propertiesStr">the properties</param>
            <param name="fromIndex">the from index</param>
            <returns>the semicolon position</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssSelectorParser">
            <summary>Utilities class to parse a CSS selector.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssSelectorParser.legacyPseudoElements">
            <summary>Set of legacy pseudo elements (first-line, first-letter, before, after).</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssSelectorParser.SELECTOR_PATTERN_STR">
            <summary>The pattern string for selectors.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.CssSelectorParser.selectorPattern">
            <summary>The pattern for selectors.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParser.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.CssSelectorParser"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParser.ParseSelectorItems(System.String)">
            <summary>Parses the selector items.</summary>
            <param name="selector">
            the selectors in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting list of
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParser.AppendPseudoSelector(System.Collections.Generic.IList{iText.Html2pdf.Css.Selector.Item.ICssSelectorItem},System.String,iText.Html2pdf.Css.Parse.CssSelectorParserMatch)">
            <summary>
            Resolves a pseudo selector, appends it to list and updates
            <see cref="T:iText.Html2pdf.Css.Parse.CssSelectorParserMatch"/>
            in process.
            </summary>
            <param name="selectorItems">list of items to which new selector will be added to</param>
            <param name="pseudoSelector">the pseudo selector</param>
            <param name="match">
            the corresponding
            <see cref="T:iText.Html2pdf.Css.Parse.CssSelectorParserMatch"/>
            that will be updated.
            </param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssSelectorParserMatch">
            <summary>Internal class not for public use.</summary>
            <remarks>Internal class not for public use. Its API may change.</remarks>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParserMatch.GetIndex">
            <summary>Get the index at which the last match started</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParserMatch.GetValue">
            <summary>Get the text of the last match</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParserMatch.GetSource">
            <summary>Get the source text being matched</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParserMatch.Success">
            <summary>Return whether or not the match was successful</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParserMatch.Next">
            <summary>Attempt to match the pattern against the next piece of the source text</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssSelectorParserMatch.Next(System.Int32)">
            <summary>Get the index at which the next match of the pattern takes place</summary>
            <param name="startIndex">the index at which to start matching the pattern</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.CssStyleSheetParser">
            <summary>Utilities class to parse a CSS style sheet.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssStyleSheetParser.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.CssStyleSheetParser"/>
            .
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssStyleSheetParser.Parse(System.IO.Stream,System.String)">
            <summary>
            Parses a stream into a
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            .
            </summary>
            <param name="stream">the stream</param>
            <param name="baseUrl">the base url</param>
            <returns>
            the resulting
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssStyleSheetParser.Parse(System.IO.Stream)">
            <summary>
            Parses a stream into a
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            .
            </summary>
            <param name="stream">the stream</param>
            <returns>
            the resulting
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssStyleSheetParser.Parse(System.String,System.String)">
            <summary>
            Parses a string into a
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            .
            </summary>
            <param name="data">the style sheet data</param>
            <param name="baseUrl">the base url</param>
            <returns>
            the resulting
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.CssStyleSheetParser.Parse(System.String)">
            <summary>
            Parses a string into a
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            .
            </summary>
            <param name="data">the data</param>
            <returns>
            the resulting
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.AtRuleBlockState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the At-rule state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.AtRuleBlockState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.AtRuleBlockState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.AtRuleBlockState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.CommentEndState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the end comment state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CommentEndState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CommentEndState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.CommentEndState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.CommentInnerState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the inner comment state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CommentInnerState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CommentInnerState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.CommentInnerState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.CommentStartState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the start comment state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CommentStartState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CommentStartState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.CommentStartState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the conditional group At-rule state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController">
            <summary>State machine that will parse content into a style sheet.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.currentState">
            <summary>The current state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.isCurrentRuleSupported">
            <summary>Indicates if the current rule is supported.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.previousActiveState">
            <summary>The previous active state (excluding comments).</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.buffer">
            <summary>A buffer to store temporary results.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.currentSelector">
            <summary>The current selector.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.styleSheet">
            <summary>The style sheet.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.nestedAtRules">
            <summary>The nested At-rules.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.storedPropertiesWithoutSelector">
            <summary>The stored properties without selector.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.SUPPORTED_RULES">
            <summary>Set of the supported rules.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.CONDITIONAL_GROUP_RULES">
            <summary>Set of conditional group rules.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.commentStartState">
            <summary>The comment start state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.commendEndState">
            <summary>The commend end state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.commendInnerState">
            <summary>The commend inner state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.unknownState">
            <summary>The unknown state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.ruleState">
            <summary>The rule state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.propertiesState">
            <summary>The properties state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.conditionalGroupAtRuleBlockState">
            <summary>The conditional group at rule block state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.atRuleBlockState">
            <summary>The At-rule block state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.uriResolver">
            <summary>The URI resolver.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController"/>
            instance.
            </summary>
            <param name="baseUrl">the base URL</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.Process(System.Char)">
            <summary>Process a character using the current state.</summary>
            <param name="ch">the character</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.GetParsingResult">
            <summary>Gets the resulting style sheet.</summary>
            <returns>the resulting style sheet</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.AppendToBuffer(System.Char)">
            <summary>Appends a character to the buffer.</summary>
            <param name="ch">the character</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.GetBufferContents">
            <summary>Gets the contents of the buffer.</summary>
            <returns>the buffer contents</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.ResetBuffer">
            <summary>Resets the buffer.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterPreviousActiveState">
            <summary>Enter the previous active state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterCommentStartState">
            <summary>Enter the comment start state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterCommentEndState">
            <summary>Enter the comment end state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterCommentInnerState">
            <summary>Enter the comment inner state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterRuleState">
            <summary>Enter the rule state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterUnknownStateIfNestedBlocksFinished">
            <summary>Enter the unknown state if nested blocks are finished.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterRuleStateBasedOnItsType">
            <summary>Enter the rule state, based on whether the current state is unsupported or conditional.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterUnknownState">
            <summary>Enter the unknown state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterAtRuleBlockState">
            <summary>Enter the At-rule block state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterConditionalGroupAtRuleBlockState">
            <summary>Enter the conditional group At-rule block state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.EnterPropertiesState">
            <summary>Enter the properties state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.StoreCurrentSelector">
            <summary>Store the current selector.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.StoreCurrentProperties">
            <summary>Store the current properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.StoreCurrentPropertiesWithoutSelector">
            <summary>Store the current properties without selector.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.StoreSemicolonAtRule">
            <summary>Store the semicolon At-rule.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.FinishAtRuleBlock">
            <summary>Finish the At-rule block.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.PushBlockPrecedingAtRule">
            <summary>Push the block preceding At-rule.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.SaveActiveState">
            <summary>Save the active state.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.SetState(iText.Html2pdf.Css.Parse.Syntax.IParserState)">
            <summary>Sets the current state.</summary>
            <param name="state">the new state</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.ProcessProperties(System.String,System.String)">
            <summary>Processes the properties.</summary>
            <param name="selector">the selector</param>
            <param name="properties">the properties</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.ProcessProperties(System.String)">
            <summary>Processes the properties.</summary>
            <param name="properties">the properties</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.NormalizeDeclarationURIs(System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration})">
            <summary>Normalizes the declaration URIs.</summary>
            <param name="declarations">the declarations</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.ProcessSemicolonAtRule(System.String)">
            <summary>Processes the semicolon At-rule.</summary>
            <param name="ruleStr">the rule str</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.ProcessFinishedAtRuleBlock(iText.Html2pdf.Css.CssNestedAtRule)">
            <summary>Processes the finished At-rule block.</summary>
            <param name="atRule">the at rule</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.IsCurrentRuleSupported">
            <summary>Checks if is current rule is supported.</summary>
            <returns>true, if the current rule is supported</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.CssParserStateController.CurrentAtRuleIsConditionalGroupRule">
            <summary>Checks if the current At-rule is a conditional group rule (or if it's unsupported).</summary>
            <returns>true, if the current At-rule is unsupported or conditional</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.IParserState">
            <summary>Interface for all parser state implementations.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.IParserState.Process(System.Char)">
            <summary>Process a character.</summary>
            <param name="ch">the character</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.PropertiesState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the block state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.PropertiesState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.PropertiesState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.PropertiesState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.RuleState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the rule state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.RuleState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.RuleState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.RuleState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Parse.Syntax.UnknownState">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.IParserState"/>
            implementation for the unknown state.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Parse.Syntax.UnknownState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Parse.Syntax.UnknownState.#ctor(iText.Html2pdf.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Parse.Syntax.UnknownState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode">
            <summary><see cref="T:iText.Html2pdf.Html.Node.IElementNode"/> implementation for pseudo elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.pseudoElementName">
            <summary>The pseudo element name.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.pseudoElementTagName">
            <summary>The pseudo element tag name.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.#ctor(iText.Html2pdf.Html.Node.INode,System.String)">
            <summary>Creates a new <see cref="T:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode"/> instance.</summary>
            <param name="parentNode">the parent node</param>
            <param name="pseudoElementName">the pseudo element name</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.GetPseudoElementName">
            <summary>Gets the pseudo element name.</summary>
            <returns>the pseudo element name</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.Name">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.GetAttributes">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.GetAdditionalHtmlStyles">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.AddAdditionalHtmlStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.GetLang">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.AttributesStub">
            <summary>A simple <see cref="T:iText.Html2pdf.Html.Node.IAttributes"/> implementation.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.AttributesStub.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.AttributesStub.SetAttribute(System.String,System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.AttributesStub.Size">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementNode.AttributesStub.GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Pseudo.CssPseudoElementUtil">
            <summary>Utilities class for pseudo elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Pseudo.CssPseudoElementUtil.TAG_NAME_PREFIX">
            <summary>The prefix for pseudo elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementUtil.CreatePseudoElementTagName(System.String)">
            <summary>Creates the pseudo element tag name.</summary>
            <param name="pseudoElementName">the pseudo element name</param>
            <returns>the tag name</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Pseudo.CssPseudoElementUtil.HasBeforeAfterElements(iText.Html2pdf.Html.Node.IElementNode)">
            <summary>Checks for before or after elements.</summary>
            <param name="node">the node</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentElementNode">
            <summary><see cref="T:iText.Html2pdf.Html.Node.IElementNode"/> implementation for content nodes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentElementNode.attributes">
            <summary>The attributes</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentElementNode.tagName">
            <summary>The tag name</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.#ctor(iText.Html2pdf.Html.Node.INode,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Creates a new <see cref="T:iText.Html2pdf.Css.Resolve.CssContentElementNode"/> instance.</summary>
            <param name="parentNode">the parent node</param>
            <param name="pseudoElementName">the pseudo element name</param>
            <param name="attributes">the attributes</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Name">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.GetAttributes">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.GetAdditionalHtmlStyles">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.AddAdditionalHtmlStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.GetLang">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes">
            <summary>Simple <see cref="T:iText.Html2pdf.Html.Node.IAttributes"/> implementation.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes.attributes">
            <summary>The attributes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Creates a new <see cref="T:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes"/> instance.</summary>
            <param name="attributes">the attributes</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes.SetAttribute(System.String,System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes.Size">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes.GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attributes.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attribute">
            <summary>Simple <see cref="T:iText.Html2pdf.Html.Node.IAttributes"/> implementation.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attribute.entry">
            <summary>The entry.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attribute.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>Creates a new <see cref="T:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attribute"/> instance.</summary>
            <param name="entry">the entry</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attribute.GetKey">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.Attribute.GetValue">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator">
            <summary> <see cref="T:iText.Html2pdf.Html.Node.IAttribute"/> iterator.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator.iterator">
            <summary>The iterator.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>Creates a new <see cref="T:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator"/> instance.</summary>
            <param name="iterator">the iterator</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator.Dispose">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator.MoveNext">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator.Reset">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator.Current">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:iText.Html2pdf.Css.Resolve.CssContentElementNode.AttributeIterator.System#Collections#IEnumerator#Current">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver">
            <summary>The Class CssContentPropertyResolver.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ResolveContent(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Resolves content.</summary>
            <param name="styles">the styles map</param>
            <param name="contentContainer">the content container</param>
            <param name="context">the CSS context</param>
            <returns>
            a list of
            <see cref="T:iText.Html2pdf.Html.Node.INode"/>
            instances
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ErrorFallback(System.String)">
            <summary>Resolves content in case of errors.</summary>
            <param name="contentStr">the content</param>
            <returns>
            the resulting list of
            <see cref="T:iText.Html2pdf.Html.Node.INode"/>
            instances
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode">
            <summary>
            <see cref="T:iText.Html2pdf.Html.Node.ITextNode"/>
            implementation for content text.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode.parent">
            <summary>The parent.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode.content">
            <summary>The content.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode.#ctor(iText.Html2pdf.Html.Node.INode,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode"/>
            instance.
            </summary>
            <param name="parent">the parent</param>
            <param name="content">the content</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContext">
            <summary>Class that bundles all the CSS context properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.rootFontSize">
            <summary>The root font size value in pt.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.counterManager">
            <summary>The counter manager.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.pagesCounterPresent">
            <summary>Indicates if a page counter is present.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.quotesDepth">
            <summary>The quotes depth.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.runningManager">
            <summary>The running elements manager.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.GetRootFontSize">
            <summary>Gets the root font size.</summary>
            <returns>the root font size in pt</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetRootFontSize(System.Single)">
            <summary>Sets the root font size.</summary>
            <param name="fontSize">the new root font size</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetRootFontSize(System.String)">
            <summary>Sets the root font size.</summary>
            <param name="fontSizeStr">the new root font size</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.GetCounterManager">
            <summary>Gets the counter manager.</summary>
            <returns>the counter manager</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetPagesCounterPresent(System.Boolean)">
            <summary>Sets the presence of a page counter.</summary>
            <param name="pagesCounterPresent">the new pages counter present</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.IsPagesCounterPresent">
            <summary>Checks if a pages counter is present.</summary>
            <returns>true, if is pages counter present</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.GetQuotesDepth">
            <summary>Gets the quotes depth.</summary>
            <returns>the quotes depth</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetQuotesDepth(System.Int32)">
            <summary>Sets the quotes depth.</summary>
            <param name="quotesDepth">the new quotes depth</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssDefaults">
            <summary>Helper class that allows you to get the default values of CSS properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssDefaults.defaultValues">
            <summary>A map with properties and their default values.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssDefaults.GetDefaultValue(System.String)">
            <summary>Gets the default value of a property.</summary>
            <param name="property">the property</param>
            <returns>the default value</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssInheritance">
            <summary>Helper class that allows you to check if a property is inheritable.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssInheritance.inheritableProperties">
            <summary>
            Set of inheritable properties
            in accordance with "http://www.w3schools.com/cssref/"
            and "https://developer.mozilla.org/en-US/docs/Web/CSS/Reference"
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssInheritance.IsInheritable(System.String)">
            <summary>Checks if a property is inheritable.</summary>
            <param name="cssProperty">the CSS property</param>
            <returns>true, if the property is inheritable</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssPropertyMerger">
            <summary>Utilities class to merge CSS properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssPropertyMerger.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.CssPropertyMerger"/>
            class.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssPropertyMerger.MergeTextDecoration(System.String,System.String)">
            <summary>Merges text decoration.</summary>
            <param name="firstValue">the first value</param>
            <param name="secondValue">the second value</param>
            <returns>the merged value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssPropertyMerger.NormalizeTextDecoration(System.String)">
            <summary>Normalizes text decoration values.</summary>
            <param name="value">the text decoration value</param>
            <returns>a set of normalized decoration values</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssQuotes">
            <summary>Helper class to deal with quoted values in strings.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssQuotes.EMPTY_QUOTE">
            <summary>The empty quote value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssQuotes.openQuotes">
            <summary>The open quotes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssQuotes.closeQuotes">
            <summary>The close quotes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssQuotes.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.CssQuotes"/>
            instance.
            </summary>
            <param name="openQuotes">the open quotes</param>
            <param name="closeQuotes">the close quotes</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssQuotes.CreateQuotes(System.String,System.Boolean)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Resolve.CssQuotes"/>
            instance.
            </summary>
            <param name="quotesString">the quotes string</param>
            <param name="fallbackToDefault">indicates whether it's OK to fall back to the default</param>
            <returns>
            the resulting
            <see cref="T:iText.Html2pdf.Css.Resolve.CssQuotes"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssQuotes.CreateDefaultQuotes">
            <summary>
            Creates the default
            <see cref="T:iText.Html2pdf.Css.Resolve.CssQuotes"/>
            instance.
            </summary>
            <returns>
            the
            <see cref="T:iText.Html2pdf.Css.Resolve.CssQuotes"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssQuotes.ResolveQuote(System.String,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Resolves quotes.</summary>
            <param name="value">the value</param>
            <param name="context">the CSS context</param>
            <returns>the quote string</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssQuotes.IncreaseDepth(iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Increases the quote depth.</summary>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssQuotes.DecreaseDepth(iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Decreases the quote depth.</summary>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssQuotes.GetQuote(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>Gets the quote.</summary>
            <param name="depth">the depth</param>
            <param name="quotes">the quotes</param>
            <returns>the requested quote string</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.DefaultCssResolver">
            <summary>
            Default implementation of the
            <see cref="T:iText.Html2pdf.Css.Resolve.ICssResolver"/>
            interface.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.DefaultCssResolver.cssStyleSheet">
            <summary>The CSS style sheet.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.DefaultCssResolver.deviceDescription">
            <summary>The device description.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.DefaultCssResolver.fonts">
            <summary>The list of fonts.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.#ctor(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Media.MediaDeviceDescription,iText.Html2pdf.Resolver.Resource.ResourceResolver)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.DefaultCssResolver"/>
            instance.
            </summary>
            <param name="treeRoot">the root node</param>
            <param name="mediaDeviceDescription">the media device description</param>
            <param name="resourceResolver">the resource resolver</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.#ctor(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.DefaultCssResolver"/>
            instance.
            </summary>
            <param name="treeRoot">the root node</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.GetFonts">
            <summary>Gets the list of fonts.</summary>
            <returns>
            the list of
            <see cref="T:iText.Html2pdf.Css.CssFontFaceRule"/>
            instances
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.ResolveContentProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Resolves a content property.</summary>
            <param name="styles">the styles map</param>
            <param name="contentContainer">the content container</param>
            <param name="context">the CSS context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CssDeclarationsToMap(System.Collections.Generic.IList{iText.Html2pdf.Css.CssDeclaration})">
            <summary>
            Converts a list of
            <see cref="T:iText.Html2pdf.Css.CssDeclaration"/>
            instances to a map consisting of
            <see cref="T:System.String"/>
            key-value pairs.
            </summary>
            <param name="nodeCssDeclarations">the node css declarations</param>
            <returns>the map</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.PutDeclarationInMapIfValid(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Css.CssDeclaration)">
            <summary>Adds a CSS declaration to a styles map if the CSS declaration is valid.</summary>
            <param name="stylesMap">the styles map</param>
            <param name="cssDeclaration">the CSS declaration</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CollectCssDeclarations(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Resolver.Resource.ResourceResolver,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Collects CSS declarationss.</summary>
            <param name="rootNode">the root node</param>
            <param name="resourceResolver">the resource resolver</param>
            <param name="cssContext">the CSS context</param>
            <returns>the node (always null in this case)</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CheckIfPagesCounterMentioned(System.String,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Check if a pages counter is mentioned.</summary>
            <param name="cssContents">the CSS contents</param>
            <param name="cssContext">the CSS context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.WrapStyleSheetInMediaQueryIfNecessary(iText.Html2pdf.Html.Node.IElementNode,iText.Html2pdf.Css.CssStyleSheet)">
            <summary>
            Wraps a
            <see cref="T:iText.Html2pdf.Css.Media.CssMediaRule"/>
            into the style sheet if the head child element has a media attribute.
            </summary>
            <param name="headChildElement">the head child element</param>
            <param name="styleSheet">the style sheet</param>
            <returns>the css style sheet</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.MergeParentCssDeclaration(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Merge parent CSS declarations.</summary>
            <param name="styles">the styles map</param>
            <param name="cssProperty">the CSS property</param>
            <param name="parentPropValue">the parent properties value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CollectFonts">
            <summary>Collects fonts from the style sheet.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CollectFonts(iText.Html2pdf.Css.CssStatement)">
            <summary>
            Collects fonts from a
            <see cref="T:iText.Html2pdf.Css.CssStatement"/>
            .
            </summary>
            <param name="cssStatement">the CSS statement</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager">
            <summary>Class that manages counters (e.g.</summary>
            <remarks>Class that manages counters (e.g. for list symbols).</remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.DISC_SYMBOL">
            <summary>The Constant DISC_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.CIRCLE_SYMBOL">
            <summary>The Constant CIRCLE_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.SQUARE_SYMBOL">
            <summary>The Constant SQUARE_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.DEFAULT_COUNTER_VALUE">
            <summary>The Constant DEFAULT_COUNTER_VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.DEFAULT_INCREMENT_VALUE">
            <summary>The Constant DEFAULT_INCREMENT_VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.MAX_ROMAN_NUMBER">
            <summary>The Constant MAX_ROMAN_NUMBER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.counters">
            <summary>The counters.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResolveCounter(System.String,System.String,iText.Html2pdf.Html.Node.INode)">
            <summary>Resolves a counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="listSymbolType">the list symbol type</param>
            <param name="scope">the scope</param>
            <returns>
            the counter value as a
            <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResolveCounters(System.String,System.String,System.String,iText.Html2pdf.Html.Node.INode)">
            <summary>Resolves counters.</summary>
            <param name="counterName">the counter name</param>
            <param name="counterSeparatorStr">the counter separator</param>
            <param name="listSymbolType">the list symbol type</param>
            <param name="scope">the scope</param>
            <returns>
            the counters as a
            <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResetCounter(System.String,iText.Html2pdf.Html.Node.INode)">
            <summary>Resets the counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="scope">the scope</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResetCounter(System.String,System.Int32,iText.Html2pdf.Html.Node.INode)">
            <summary>Resets the counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="value">the new value</param>
            <param name="scope">the scope</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.IncrementCounter(System.String,System.Int32,iText.Html2pdf.Html.Node.INode)">
            <summary>Increments the counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="incrementValue">the increment value</param>
            <param name="scope">the scope</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.IncrementCounter(System.String,iText.Html2pdf.Html.Node.INode)">
            <summary>Increments the counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="scope">the scope</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.GetOrCreateScopeCounterMap(iText.Html2pdf.Html.Node.INode)">
            <summary>Gets the scope counter map (or creates it if it doesn't exist).</summary>
            <param name="scope">the scope</param>
            <returns>the or create scope counter map</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.FindSuitableScopeMap(iText.Html2pdf.Html.Node.INode,System.String)">
            <summary>Searches for the suitable scope map.</summary>
            <param name="scope">the scope</param>
            <param name="counterName">the counter name</param>
            <returns>the map</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.FindCounterOwner(iText.Html2pdf.Html.Node.INode,System.String)">
            <summary>Searches for the counter owner.</summary>
            <param name="scope">the scope</param>
            <param name="counterName">the counter name</param>
            <returns>the owner node</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode">
            <summary>
            <see cref="T:iText.Html2pdf.Html.Node.ICustomElementNode"/>
            implementation for a page count element node.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.PAGE_COUNTER_TAG">
            <summary>The Constant PAGE_COUNTER_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.parent">
            <summary>The parent.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.totalPageCount">
            <summary>Indicates if the node represents the total page count.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.#ctor(System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode"/>
            instance.
            </summary>
            <param name="totalPageCount">indicates if the node represents the total page count</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.IsTotalPageCount">
            <summary>Checks if the node represents the total page count.</summary>
            <returns>true, if the node represents the total page count</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter">
            <summary>Utilities class that converts HTML styles to CSS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.htmlAttributeConverters">
            <summary>Maps HTML styles to a specific converter.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.Convert(iText.Html2pdf.Html.Node.IElementNode)">
            <summary>
            Converts a the HTML styles of an element to a list of
            <see cref="T:iText.Html2pdf.Css.CssDeclaration"/>
            instances.
            </summary>
            <param name="element">the element</param>
            <returns>
            the resulting list of
            <see cref="T:iText.Html2pdf.Css.CssDeclaration"/>
            instances.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter">
            <summary>Interface for all the attribute converter classes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter.IsSupportedForElement(System.String)">
            <summary>Checks if the converter is supported for a specific element.</summary>
            <param name="elementName">the element name</param>
            <returns>true, if the converter is supported</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter.Convert(iText.Html2pdf.Html.Node.IElementNode,System.String)">
            <summary>
            Converts a specific HTML style to a
            <see cref="T:iText.Html2pdf.Css.CssDeclaration"/>
            .
            </summary>
            <param name="element">the element</param>
            <param name="value">the value of the HTML style</param>
            <returns>
            a list of
            <see cref="T:iText.Html2pdf.Css.CssDeclaration"/>
            instances
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BorderAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML border styles.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BorderAttributeConverter.ApplyBordersToTableCells(iText.Html2pdf.Html.Node.INode,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Applies borders to the tables and cells.</summary>
            <param name="node">the node</param>
            <param name="borderStyles">the border styles</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.CellPaddingAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for table's cellpadding.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.CellPaddingAttributeConverter.ApplyPaddingsToTableCells(iText.Html2pdf.Html.Node.INode,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Applies paddings to the table's cells.</summary>
            <param name="node">the node</param>
            <param name="paddingStyle">cellpadding</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.CellSpacingAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for table's cellspacing.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BgColorAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML background color styles.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BgColorAttributeConverter.supportedTags">
            <summary>The supported tags.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.FontColorAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for font color styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.SizeAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for size properties.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.FontFaceAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML font face styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.TypeAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML ordered list types.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.DirAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML direction styles (e.g. right to left direction).
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.WidthAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML width values.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.HeightAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML height values.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.AlignAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML horizontal alignment styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.NoShadeAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML shade styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.VAlignAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML vertical alignment styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.ICssResolver">
            <summary>Interface for CSS resolvers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.ICssResolver.ResolveStyles(iText.Html2pdf.Html.Node.INode,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Resolves the styles of a node.</summary>
            <param name="node">the node</param>
            <param name="context">the CSS context</param>
            <returns>the map</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver">
            <summary>
            Abstract
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for borders.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver._0_WIDTH">
            <summary>The template for -width properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver._0_STYLE">
            <summary>The template for -style properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver._0_COLOR">
            <summary>The template for -color properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver.GetPrefix">
            <summary>Gets the prefix of a property.</summary>
            <returns>the prefix</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver">
            <summary>
            Abstract
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for box definitions.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_LEFT_1">
            <summary>The template for -left properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_RIGHT_1">
            <summary>The template for -right properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_BOTTOM_1">
            <summary>The template for -bottom properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_TOP_1">
            <summary>The template for -top properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver.GetPrefix">
            <summary>Gets the prefix of a property.</summary>
            <returns>the prefix</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver.GetPostfix">
            <summary>Gets the postfix of a property.</summary>
            <returns>the postfix</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver">
            <summary>
            Abstract
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for corners definitions.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_BOTTOM_LEFT_1">
            <summary>The template for -bottom-left properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_BOTTOM_RIGHT_1">
            <summary>The template for -bottom-right properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_TOP_LEFT_1">
            <summary>The template for -top-left properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_TOP_RIGHT_1">
            <summary>The template for -top-right properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver.GetPrefix">
            <summary>Gets the prefix of a property.</summary>
            <returns>the prefix</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver.GetPostfix">
            <summary>Gets the postfix of a property.</summary>
            <returns>the postfix</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for backgrounds.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.UNDEFINED_TYPE">
            <summary>The Constant UNDEFINED_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_COLOR_TYPE">
            <summary>The Constant BACKGROUND_COLOR_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_IMAGE_TYPE">
            <summary>The Constant BACKGROUND_IMAGE_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_POSITION_TYPE">
            <summary>The Constant BACKGROUND_POSITION_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_POSITION_OR_SIZE_TYPE">
            <summary>The Constant BACKGROUND_POSITION_OR_SIZE_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_REPEAT_TYPE">
            <summary>The Constant BACKGROUND_REPEAT_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_ORIGIN_OR_CLIP_TYPE">
            <summary>The Constant BACKGROUND_ORIGIN_OR_CLIP_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_CLIP_TYPE">
            <summary>The Constant BACKGROUND_CLIP_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.BACKGROUND_ATTACHMENT_TYPE">
            <summary>The Constant BACKGROUND_ATTACHMENT_TYPE.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.ResolvePropertyType(System.String)">
            <summary>Resolves the property type.</summary>
            <param name="value">the value</param>
            <returns>the property type value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.PutPropertyBasedOnType(System.Int32,System.String,System.String[],System.Boolean)">
            <summary>Registers a property based on its type.</summary>
            <param name="type">the property type</param>
            <param name="value">the property value</param>
            <param name="resolvedProps">the resolved properties</param>
            <param name="slashEncountered">indicates whether a slash was encountered</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.SplitMultipleBackgrounds(System.String)">
            <summary>Splits multiple backgrounds.</summary>
            <param name="shorthandExpression">the shorthand expression</param>
            <returns>the list of backgrounds</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderBottomShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for bottom borders.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderColorShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for border colors.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderLeftShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for left borders.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderRadiusShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver"/>
            implementation for border radius.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderRightShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for right borders.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for borders.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderStyleShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for border styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderTopShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for top borders.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.BorderWidthShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for border widths.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.FontShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for fonts.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.FontShorthandResolver.UNSUPPORTED_VALUES_OF_FONT_SHORTHAND">
            <summary>Unsupported shorthand values.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.FontShorthandResolver.FONT_WEIGHT_NOT_DEFAULT_VALUES">
            <summary>Font weight values.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.FontShorthandResolver.FONT_SIZE_VALUES">
            <summary>Font size values.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.Impl.FontShorthandResolver.GetFontProperties(System.String)">
            <summary>Gets the font properties.</summary>
            <param name="shorthandExpression">the shorthand expression</param>
            <returns>the font properties</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.ListStyleShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for list styles.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.ListStyleShorthandResolver.LIST_STYLE_TYPE_VALUES">
            <summary>The list style types (disc, decimal,...).</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.Impl.ListStyleShorthandResolver.LIST_STYLE_POSITION_VALUES">
            <summary>The list stype positions (inside, outside).</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.MarginShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for margins.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.OutlineShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for outlines.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.PaddingShorthandResolver">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for paddings.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver">
            <summary>Interface for shorthand resolvers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.IShorthandResolver.ResolveShorthand(System.String)">
            <summary>Resolves a shorthand expression.</summary>
            <param name="shorthandExpression">the shorthand expression</param>
            <returns>a list of CSS declaration</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Shorthand.ShorthandResolverFactory">
            <summary>A factory for creating ShorthandResolver objects.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Shorthand.ShorthandResolverFactory.shorthandResolvers">
            <summary>The map of shorthand resolvers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Shorthand.ShorthandResolverFactory.GetShorthandResolver(System.String)">
            <summary>Gets a shorthand resolver.</summary>
            <param name="shorthandProperty">the property</param>
            <returns>the shorthand resolver</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.UserAgentCss">
            <summary>Utilities class to get the styles of a node.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.UserAgentCss.DEFAULT_CSS_PATH">
            <summary>The path to the default CSS file.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.UserAgentCss.defaultCss">
            <summary>
            The default
            <see cref="T:iText.Html2pdf.Css.CssStyleSheet"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.UserAgentCss.GetStyles(iText.Html2pdf.Html.Node.INode)">
            <summary>Gets the styles of a node.</summary>
            <param name="node">the node</param>
            <returns>
            a list of
            <see cref="T:iText.Html2pdf.Css.CssDeclaration"/>
            values
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.AbstractCssSelector">
            <summary>Abstract superclass for CSS Selectors.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.AbstractCssSelector.selectorItems">
            <summary>The selector items.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.AbstractCssSelector.#ctor(System.Collections.Generic.IList{iText.Html2pdf.Css.Selector.Item.ICssSelectorItem})">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.AbstractCssSelector"/>
            instance.
            </summary>
            <param name="selectorItems">the selector items</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.CssPageMarginBoxSelector">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.ICssSelector"/>
            implementation for CSS page margin box selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.CssPageMarginBoxSelector.pageMarginBoxName">
            <summary>The page margin box name.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.CssPageMarginBoxSelector.pageSelector">
            <summary>The page selector.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.CssPageMarginBoxSelector.#ctor(System.String,iText.Html2pdf.Css.Selector.ICssSelector)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.CssPageMarginBoxSelector"/>
            instance.
            </summary>
            <param name="pageMarginBoxName">the page margin box name</param>
            <param name="pageSelector">the page selector</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.CssPageSelector">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.ICssSelector"/>
            implementation for CSS page selectors.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.CssPageSelector.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.CssPageSelector"/>
            instance.
            </summary>
            <param name="pageSelectorStr">the page selector</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.CssSelector">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.ICssSelector"/>
            implementation for CSS selectors.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.CssSelector.#ctor(System.Collections.Generic.IList{iText.Html2pdf.Css.Selector.Item.ICssSelectorItem})">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.CssSelector"/>
            instance.
            </summary>
            <param name="selectorItems">the selector items</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.CssSelector.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.CssSelector"/>
            instance.
            </summary>
            <param name="selector">the selector</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.CssSelector.Matches(iText.Html2pdf.Html.Node.INode,System.Int32)">
            <summary>Checks if a node matches the selector.</summary>
            <param name="element">the node</param>
            <param name="lastSelectorItemInd">the index of the last selector</param>
            <returns>true, if there's a match</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.CssSelectorComparator">
            <summary>Comparator class for CSS Selectors.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.ICssSelector">
            <summary>Interface for CSS Selector classes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.ICssSelector.CalculateSpecificity">
            <summary>Calculates the specificity.</summary>
            <returns>the specificity</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.ICssSelector.Matches(iText.Html2pdf.Html.Node.INode)">
            <summary>Checks if a node matches the selector.</summary>
            <param name="node">the node</param>
            <returns>true, if the selector is a match for the node</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssAttributeSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for attribute selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssAttributeSelectorItem.property">
            <summary>The property.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssAttributeSelectorItem.matchSymbol">
            <summary>The match symbol.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssAttributeSelectorItem.value">
            <summary>The value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssAttributeSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssAttributeSelectorItem"/>
            instance.
            </summary>
            <param name="attrSelector">the attribute</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssClassSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for class selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssClassSelectorItem.className">
            <summary>The class name.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssClassSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssClassSelectorItem"/>
            instance.
            </summary>
            <param name="className">the class name</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssIdSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for id selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssIdSelectorItem.id">
            <summary>The id.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssIdSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssIdSelectorItem"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssPagePseudoClassSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for page pseudo classes selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPagePseudoClassSelectorItem.isSpreadPseudoClass">
            <summary>Indicates if the page pseudo class is a spread pseudo class (left or right).</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPagePseudoClassSelectorItem.pagePseudoClass">
            <summary>The page pseudo class.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPagePseudoClassSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssPagePseudoClassSelectorItem"/>
            instance.
            </summary>
            <param name="pagePseudoClass">the page pseudo class name</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssPageTypeSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for page type selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPageTypeSelectorItem.pageTypeName">
            <summary>The page type name.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPageTypeSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssPageTypeSelectorItem"/>
            instance.
            </summary>
            <param name="pageTypeName">the page type name</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPseudoClassChildSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssPseudoClassSelectorItem"/>
            instance.
            </summary>
            <param name="pseudoClass">the pseudo class name</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPseudoClassChildSelectorItem.GetAllSiblings(iText.Html2pdf.Html.Node.INode)">
            <summary>Gets the all the siblings of a child node.</summary>
            <param name="node">the child node</param>
            <returns>the sibling nodes</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPseudoClassChildSelectorItem.GetAllSiblingsOfNodeType(iText.Html2pdf.Html.Node.INode)">
            <summary>Gets all siblings of a child node with the type of a child node.</summary>
            <param name="node">the child node</param>
            <returns>the sibling nodes with the type of a child node</returns>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPseudoClassNthSelectorItem.nthA">
            <summary>The nth A.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPseudoClassNthSelectorItem.nthB">
            <summary>The nth B.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPseudoClassNthSelectorItem.GetNthArguments">
            <summary>Gets the nth arguments.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPseudoClassNthSelectorItem.ResolveNth(iText.Html2pdf.Html.Node.INode,System.Collections.Generic.IList{iText.Html2pdf.Html.Node.INode})">
            <summary>Resolves the nth.</summary>
            <param name="node">a node</param>
            <param name="children">the children</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssPseudoClassSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for pseudo class selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPseudoClassSelectorItem.arguments">
            <summary>The arguments.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPseudoClassSelectorItem.pseudoClass">
            <summary>The pseudo class.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPseudoClassSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssPseudoClassSelectorItem"/>
            instance.
            </summary>
            <param name="pseudoClass">the pseudo class name</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssPseudoElementSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for pseudo element selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssPseudoElementSelectorItem.pseudoElementName">
            <summary>The pseudo element name.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssPseudoElementSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssPseudoElementSelectorItem"/>
            instance.
            </summary>
            <param name="pseudoElementName">the pseudo element name</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssSeparatorSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for separator selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssSeparatorSelectorItem.separator">
            <summary>The separator character.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssSeparatorSelectorItem.#ctor(System.Char)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssSeparatorSelectorItem"/>
            instance.
            </summary>
            <param name="separator">the separator character</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssSeparatorSelectorItem.GetSeparator">
            <summary>Gets the separator character.</summary>
            <returns>the separator character</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssSpecificityConstants">
            <summary>Class that bundles some CSS specificity constants.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssSpecificityConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssSpecificityConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssSpecificityConstants.ID_SPECIFICITY">
            <summary>The Constant ID_SPECIFICITY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssSpecificityConstants.CLASS_SPECIFICITY">
            <summary>The Constant CLASS_SPECIFICITY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssSpecificityConstants.ELEMENT_SPECIFICITY">
            <summary>The Constant ELEMENT_SPECIFICITY.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.CssTagSelectorItem">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem"/>
            implementation for tag selectors.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssTagSelectorItem.tagName">
            <summary>The tag name.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Selector.Item.CssTagSelectorItem.isUniversal">
            <summary>Indicates if the selector is universally valid.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.CssTagSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Selector.Item.CssTagSelectorItem"/>
            instance.
            </summary>
            <param name="tagName">the tag name</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem">
            <summary>Interface for CSS selector items.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem.GetSpecificity">
            <summary>Gets the specificity.</summary>
            <returns>the specificity</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Selector.Item.ICssSelectorItem.Matches(iText.Html2pdf.Html.Node.INode)">
            <summary>Checks if the selector matches an element.</summary>
            <param name="element">the element</param>
            <returns>true, if there's a match</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Util.CssPropertyNormalizer">
            <summary>Utilities class with functionality to normalize CSS properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssPropertyNormalizer.Normalize(System.String)">
            <summary>Normalize a property.</summary>
            <param name="str">the property</param>
            <returns>the normalized property</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssPropertyNormalizer.AppendQuotedString(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>Appends quoted string.</summary>
            <param name="buffer">the current buffer</param>
            <param name="source">a source</param>
            <param name="start">where to start in the source. Should point at quote symbol.</param>
            <returns>the new position in the source</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssPropertyNormalizer.AppendUrlContent(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>Appends url content and end parenthesis if url is correct.</summary>
            <param name="buffer">the current buffer</param>
            <param name="source">a source</param>
            <param name="start">where to start in the source. Should point at first symbol after "url(".</param>
            <returns>the new position in the source</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssPropertyNormalizer.TrimSpaceAfter(System.Char)">
            <summary>Checks if spaces can be trimmed after a specific character.</summary>
            <param name="ch">the character</param>
            <returns>true, if spaces can be trimmed after the character</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssPropertyNormalizer.TrimSpaceBefore(System.Char)">
            <summary>Checks if spaces can be trimmed before a specific character.</summary>
            <param name="ch">the character</param>
            <returns>true, if spaces can be trimmed before the character</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Util.CssUtils">
            <summary>Utilities class for CSS operations.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Util.CssUtils"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.NormalizeCssProperty(System.String)">
            <summary>Normalizes a CSS property.</summary>
            <param name="str">the property</param>
            <returns>the normalized property</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.RemoveDoubleSpacesAndTrim(System.String)">
            <summary>Removes double spaces and trims a string.</summary>
            <param name="str">the string</param>
            <returns>the string without the unnecessary spaces</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseInteger(System.String)">
            <summary>Parses an integer without throwing an exception if something goes wrong.</summary>
            <param name="str">a string that might be an integer value</param>
            <returns>the integer value, or null if something went wrong</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseFloat(System.String)">
            <summary>Parses a float without throwing an exception if something goes wrong.</summary>
            <param name="str">a string that might be a float value</param>
            <returns>the float value, or null if something went wrong</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseAspectRatio(System.String)">
            <summary>Parses an aspect ratio into an array with two integers.</summary>
            <param name="str">a string that might contain two integer values</param>
            <returns>the aspect ratio as an array of two integer values</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseAbsoluteLength(System.String,System.String)">
            <summary>Parses a length with an allowed metric unit (px, pt, in, cm, mm, pc, q) or numeric value (e.g.</summary>
            <remarks>
            Parses a length with an allowed metric unit (px, pt, in, cm, mm, pc, q) or numeric value (e.g. 123, 1.23,
            .123) to pt.<br />
            A numeric value (without px, pt, etc in the given length string) is considered to be in the default metric that
            was given.
            </remarks>
            <param name="length">the string containing the length.</param>
            <param name="defaultMetric">
            the string containing the metric if it is possible that the length string does not contain
            one. If null the length is considered to be in px as is default in HTML/CSS.
            </param>
            <returns>parsed value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseAbsoluteLength(System.String)">
            <summary>Parses the absolute length.</summary>
            <param name="length">the length as a string</param>
            <returns>the length as a float</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseRelativeValue(System.String,System.Single)">
            <summary>
            Parses an relative value based on the base value that was given, in the metric unit of the base value.<br />
            (e.g.
            </summary>
            <remarks>
            Parses an relative value based on the base value that was given, in the metric unit of the base value.<br />
            (e.g. margin=10% should be based on the page width, so if an A4 is used, the margin = 0.10*595.0 = 59.5f)
            </remarks>
            <param name="relativeValue">in %, em or ex.</param>
            <param name="baseValue">the value the returned float is based on.</param>
            <returns>the parsed float in the metric unit of the base value.</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseLengthValueToPt(System.String,System.Single,System.Single)">
            <summary>Convenience method for parsing a value to pt.</summary>
            <remarks>
            Convenience method for parsing a value to pt. Possible values are: <ul>
            <li>a numeric value in pixels (e.g. 123, 1.23, .123),</li>
            <li>a value with a metric unit (px, in, cm, mm, pc or pt) attached to it,</li>
            <li>or a value with a relative value (%, em, ex).</li>
            </ul>
            </remarks>
            <param name="value">the value</param>
            <param name="emValue">the em value</param>
            <param name="remValue">the root em value</param>
            <returns>the unit value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseResolution(System.String)">
            <summary>Parses the resolution.</summary>
            <param name="resolutionStr">the resolution as a string</param>
            <returns>a value in dpi (currently)</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.DeterminePositionBetweenValueAndUnit(System.String)">
            <summary>Method used in preparation of splitting a string containing a numeric value with a metric unit (e.g.
                </summary>
            <remarks>
            Method used in preparation of splitting a string containing a numeric value with a metric unit (e.g. 18px, 9pt, 6cm, etc).<br /><br />
            Determines the position between digits and affiliated characters ('+','-','0-9' and '.') and all other characters.<br />
            e.g. string "16px" will return 2, string "0.5em" will return 3 and string '-8.5mm' will return 4.
            </remarks>
            <param name="string">containing a numeric value with a metric unit</param>
            <returns>int position between the numeric value and unit or 0 if string is null or string started with a non-numeric value.
                </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.IsColorProperty(System.String)">
            <summary>Checks if a value is a color property.</summary>
            <param name="value">the value</param>
            <returns>true, if the value contains a color property</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseRgbaColor(System.String)">
            <summary>Parses the RGBA color.</summary>
            <param name="colorValue">the color value</param>
            <returns>an RGBA value expressed as an array with four float values</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ParseSpecificCornerBorderRadius(System.String,System.Single,System.Single)">
            <summary>Parses the border radius of specific corner.</summary>
            <param name="specificBorderRadius">string that defines the border radius of specific corner.</param>
            <param name="emValue">the em value</param>
            <param name="remValue">the root em value</param>
            <returns>
            an array of
            <see cref="T:iText.Layout.Properties.UnitValue">UnitValues</see>
            that define horizontal and vertical border radius values
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.IsMetricValue(System.String)">
            <summary>Checks whether a string contains an allowed metric unit in HTML/CSS; px, in, cm, mm, pc or pt.</summary>
            <param name="value">the string that needs to be checked.</param>
            <returns>boolean true if value contains an allowed metric value.</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.IsRelativeValue(System.String)">
            <summary>Checks whether a string contains an allowed value relative to previously set value.</summary>
            <param name="value">the string that needs to be checked.</param>
            <returns>boolean true if value contains an allowed metric value.</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.IsRemValue(System.String)">
            <summary>Checks whether a string contains an allowed value relative to previously set root value.</summary>
            <param name="value">the string that needs to be checked.</param>
            <returns>boolean true if value contains an allowed metric value.</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.IsNumericValue(System.String)">
            <summary>Checks whether a string matches a numeric value (e.g.</summary>
            <remarks>Checks whether a string matches a numeric value (e.g. 123, 1.23, .123). All these metric values are allowed in HTML/CSS.
                </remarks>
            <param name="value">the string that needs to be checked.</param>
            <returns>boolean true if value contains an allowed metric value.</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.ExtractUrl(System.String)">
            <summary>
            Parses
            <c>url("file.jpg")</c>
            to
            <c>file.jpg</c>
            .
            </summary>
            <param name="url">the url attribute to parse</param>
            <returns>the parsed url. Or original url if not wrappend in url()</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.IsBase64Data(System.String)">
            <summary>Checks if a data is base 64 encoded.</summary>
            <param name="data">the data</param>
            <returns>true, if the data is base 64 encoded</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssUtils.FindNextUnescapedChar(System.String,System.Char,System.Int32)">
            <summary>Find the next unescaped character.</summary>
            <param name="source">a source</param>
            <param name="ch">the character to look for</param>
            <param name="startIndex">where to start looking</param>
            <returns>the position of the next unescaped character</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.CssDeclarationValidationMaster">
            <summary>Class that bundles all the CSS declaration validators.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Validate.CssDeclarationValidationMaster.DEFAULT_VALIDATORS">
            <summary>A map containing all the CSS declaration validators.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Validate.CssDeclarationValidationMaster.#ctor">
            <summary>
            Creates a new
            <c>CssDeclarationValidationMaster</c>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Validate.CssDeclarationValidationMaster.CheckDeclaration(iText.Html2pdf.Css.CssDeclaration)">
            <summary>Checks a CSS declaration.</summary>
            <param name="declaration">the CSS declaration</param>
            <returns>true, if the validation was successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.ICssDataTypeValidator">
            <summary>Interface for CSS data type validators.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Validate.ICssDataTypeValidator.IsValid(System.String)">
            <summary>Checks if a value is a valid data type (e.g.</summary>
            <remarks>Checks if a value is a valid data type (e.g. a color, an identifier,...).</remarks>
            <param name="objectString">the value</param>
            <returns>true, if the value is a valid data type</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.ICssDeclarationValidator">
            <summary>Interface for CSS declaration validators.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Validate.ICssDeclarationValidator.IsValid(iText.Html2pdf.Css.CssDeclaration)">
            <summary>Checks if a value is a valid CSS declaration.</summary>
            <param name="cssDeclaration">the CSS declaration</param>
            <returns>true, if the value is a valid CSS declaration</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.Impl.Datatype.CssColorValidator">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Validate.ICssDataTypeValidator"/>
            implementation for colors.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.Impl.Datatype.CssEnumValidator">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Validate.ICssDataTypeValidator"/>
            implementation for elements in an enumeration.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Validate.Impl.Datatype.CssEnumValidator.allowedValues">
            <summary>The allowed values.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Validate.Impl.Datatype.CssEnumValidator.#ctor(System.String[])">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Validate.Impl.Datatype.CssEnumValidator"/>
            instance.
            </summary>
            <param name="allowedValues">the allowed values</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.Impl.Datatype.CssIdentifierValidator">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Validate.ICssDataTypeValidator"/>
            implementation for identifiers.
            In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters [a-zA-Z0-9]
            and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_);
            they cannot start with a digit, two hyphens, or a hyphen followed by a digit.
            Identifiers can also contain escaped characters and any ISO 10646 character as a numeric code (see next item).
            For instance, the identifier "B&amp;W?" may be written as "B\&amp;W\?" or "B\26 W\3F".
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.Impl.Datatype.CssQuotesValidator">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Validate.ICssDataTypeValidator"/>
            implementation for values for the CSS quotes key.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.Impl.Datatype.CssTransformValidator">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Validate.ICssDataTypeValidator"/>
            implementation for css transform property .
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Validate.ICssDeclarationValidator"/>
            implementation in case multiple types have to be checked.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator.allowedTypes">
            <summary>The allowed data types.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator.#ctor(iText.Html2pdf.Css.Validate.ICssDataTypeValidator[])">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator"/>
            instance.
            </summary>
            <param name="allowedTypes">the allowed types</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Validate.ICssDeclarationValidator"/>
            implementation to validate a single type.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator.dataTypeValidator">
            <summary>The data type validator.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator.#ctor(iText.Html2pdf.Css.Validate.ICssDataTypeValidator)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator"/>
            instance.
            </summary>
            <param name="dataTypeValidator">the data type validator</param>
        </member>
        <member name="T:iText.Html2pdf.Exceptions.CssApplierInitializationException">
            <summary>Runtime exception in case a CSS applier can't be initialized.</summary>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.CssApplierInitializationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Exceptions.CssApplierInitializationException"/>
            instance.
            </summary>
            <param name="message">the message</param>
            <param name="className">the class name of the CSS applier</param>
            <param name="tag">the key</param>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.CssApplierInitializationException.ReflectionFailed">
            <summary>The message template in case reflection failed.</summary>
        </member>
        <member name="T:iText.Html2pdf.Exceptions.Html2PdfException">
            <summary>Runtime exception that gets thrown if something goes wrong in the HTML to PDF conversion.</summary>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.Html2PdfException.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Exceptions.Html2PdfException"/>
            instance.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.Html2PdfException.PdfDocumentShouldBeInWritingMode">
            <summary>Message in case one tries to write to a PDF document that isn't in writing mode.</summary>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.Html2PdfException.FontProviderContainsZeroFonts">
            <summary>Message in case the font provider doesn't know about any fonts.</summary>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.Html2PdfException.UnsupportedEncodingException">
            <summary>The Constant UnsupportedEncodingException.</summary>
        </member>
        <member name="T:iText.Html2pdf.Exceptions.TagWorkerInitializationException">
            <summary>Runtime exception that gets thrown if a tag worker can't be initialized.</summary>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.TagWorkerInitializationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Exceptions.TagWorkerInitializationException"/>
            instance.
            </summary>
            <param name="message">the message</param>
            <param name="classNames">the class names</param>
            <param name="tag">the tag</param>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.TagWorkerInitializationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Exceptions.TagWorkerInitializationException"/>
            instance.
            </summary>
            <param name="message">the message</param>
            <param name="classNames">the class names</param>
            <param name="tag">the tag</param>
            <param name="cause">the cause</param>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.TagWorkerInitializationException.REFLECTION_IN_TAG_WORKER_FACTORY_IMPLEMENTATION_FAILED">
            <summary>Template for the error message in case a tag worker couldn't be instantiated.</summary>
        </member>
        <member name="T:iText.Html2pdf.Html2PdfProductInfo">
            <summary>Product info about this iText add-on.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html2PdfProductInfo.PRODUCT_NAME">
            <summary>The product name.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html2PdfProductInfo.MAJOR_VERSION">
            <summary>The major version number.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html2PdfProductInfo.MINOR_VERSION">
            <summary>The minor version number.</summary>
        </member>
        <member name="T:iText.Html2pdf.HtmlConverter">
            <summary>The HtmlConverter is the class you will use most when converting HTML to PDF.</summary>
            <remarks>
            The HtmlConverter is the class you will use most when converting HTML to PDF.
            It contains a series of static methods that accept HTML as a
            <see cref="T:System.String"/>
            ,
            <see cref="T:System.IO.FileInfo"/>
            , or
            <see cref="T:System.IO.Stream"/>
            , and convert it to PDF in the
            form of an
            <see cref="T:System.IO.Stream"/>
            ,
            <see cref="T:System.IO.FileInfo"/>
            , or a series of
            iText elements. It's also possible to write to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.#ctor">
            <summary>Instantiates a new HtmlConverter instance.</summary>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,System.IO.Stream)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to an
            <see cref="T:System.IO.Stream"/>
            containing PDF.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfStream">
            the PDF as an
            <see cref="T:System.IO.Stream"/>
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,System.IO.Stream,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to an
            <see cref="T:System.IO.Stream"/>
            containing PDF, using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfStream">
            the PDF as an
            <see cref="T:System.IO.Stream"/>
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to PDF by writing PDF content
            to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to PDF by writing PDF content
            to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance, using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts HTML stored in a
            <see cref="T:System.IO.FileInfo"/>
            to a PDF
            <see cref="T:System.IO.FileInfo"/>
            .
            </summary>
            <param name="htmlFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the source HTML
            </param>
            <param name="pdfFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the resulting PDF
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.FileInfo,System.IO.FileInfo,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML stored in a
            <see cref="T:System.IO.FileInfo"/>
            to a PDF
            <see cref="T:System.IO.FileInfo"/>
            ,
            using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="htmlFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the source HTML
            </param>
            <param name="pdfFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the resulting PDF
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,System.IO.Stream)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a PDF written to
            an
            <see cref="T:System.IO.Stream"/>
            .
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfStream">
            the
            <see cref="T:System.IO.Stream"/>
            for the resulting PDF
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,System.IO.Stream,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a PDF written to
            an
            <see cref="T:System.IO.Stream"/>
            .
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfStream">
            the
            <see cref="T:System.IO.Stream"/>
            for the resulting PDF
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            .
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            .
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.IO.Stream,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">the pdf writer</param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.IO.Stream,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="htmlStream">the html stream</param>
            <param name="pdfWriter">the pdf writer</param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            ,
            returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.IO.Stream,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            ,
            returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.String)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances).
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>a list of iText building blocks</returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.IO.Stream)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances).
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <returns>a list of iText building blocks</returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.String,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances), using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>a list of iText building blocks</returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.IO.Stream,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances), using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            .
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>a list of iText building blocks</returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="T:iText.Html2pdf.Html.AttributeConstants">
            <summary>Class that bundles a series of attribute constants.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.AttributeConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.AttributeConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ALIGN">
            <summary>The Constant ALIGN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ALT">
            <summary>The Constant ALT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.APPLICATION_NAME">
            <summary>The Constant APPLICATION_NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.AUTHOR">
            <summary>The Constant AUTHOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BGCOLOR">
            <summary>The Constant BGCOLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BORDER">
            <summary>The Constant BORDER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CLASS">
            <summary>The Constant CLASS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CELLPADDING">
            <summary>The Constant CLASS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CELLSPACING">
            <summary>The Constant CLASS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLOR">
            <summary>The Constant COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLS">
            <summary>The Constant COLS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLSPAN">
            <summary>The Constant COLSPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CONTENT">
            <summary>The Constant CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DESCRIPTION">
            <summary>The Constant DESCRIPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DIR">
            <summary>The Constant DIR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.FACE">
            <summary>The Constant FACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.HEIGHT">
            <summary>The Constant HEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.HREF">
            <summary>The Constant HREF.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.HSPACE">
            <summary>The Constant HSPACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ID">
            <summary>The Constant ID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.KEYWORDS">
            <summary>The Constant KEYWORDS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LABEL">
            <summary>The Constant LABEL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LANG">
            <summary>The Constant LANG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.MEDIA">
            <summary>The Constant MEDIA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.MULTIPLE">
            <summary>The Constant MULTIPLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.NAME">
            <summary>The Constant NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.NOSHADE">
            <summary>The Constant NOSHADE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.NUMBER">
            <summary>The Constant NUMBER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.REL">
            <summary>The Constant REL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROWS">
            <summary>The Constant ROWS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROWSPAN">
            <summary>The Constant ROWSPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SCOPE">
            <summary>The Constant SCOPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SELECTED">
            <summary>The Constant SELECTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SIZE">
            <summary>The Constant SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SPAN">
            <summary>The Constant SPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SRC">
            <summary>The Constant SRC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.STYLE">
            <summary>The Constant STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TYPE">
            <summary>The Constant TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.VALIGN">
            <summary>The Constant VALIGN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.VALUE">
            <summary>The Constant VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.VSPACE">
            <summary>The Constant VSPACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.WIDTH">
            <summary>The Constant WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TITLE">
            <summary>The Constant TITLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants._1">
            <summary>The Constant _1.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.A">
            <summary>The Constant A.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.a">
            <summary>The Constant a.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BOTTOM">
            <summary>The Constant BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BUTTON">
            <summary>The Constant BUTTON.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CENTER">
            <summary>The Constant CENTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CHECKBOX">
            <summary>The Constant CHECKBOX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CHECKED">
            <summary>The Constant CHECKED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COL">
            <summary>The Constant COL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLGROUP">
            <summary>The Constant COLGROUP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.EMAIL">
            <summary>The Constant EMAIL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.I">
            <summary>The Constant I.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.i">
            <summary>The Constant i.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LEFT">
            <summary>The Constant LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LTR">
            <summary>The Constant LTR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.MIDDLE">
            <summary>The Constant MIDDLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.PASSWORD">
            <summary>The Constant PASSWORD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RADIO">
            <summary>The Constant RADIO.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RIGHT">
            <summary>The Constant RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROW">
            <summary>The Constant ROW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROWGROUP">
            <summary>The Constant ROWGROUP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RTL">
            <summary>The Constant RTL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.STYLESHEET">
            <summary>The Constant STYLESHEET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SUBMIT">
            <summary>The Constant SUBMIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TEXT">
            <summary>The Constant TEXT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TOP">
            <summary>The Constant TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.START">
            <summary>The Constant start</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.PARENT_TABLE_BORDER">
            <summary>The Constant PARENT_TABLE_BORDER.</summary>
        </member>
        <member name="T:iText.Html2pdf.Html.HtmlUtils">
            <summary>Utilities class with HTML-related functionality.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.HtmlUtils.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.HtmlUtils"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Html.HtmlUtils.IsStyleSheetLink(iText.Html2pdf.Html.Node.IElementNode)">
            <summary>
            Checks if an
            <see cref="T:iText.Html2pdf.Html.Node.IElementNode"/>
            represents a style sheet link.
            </summary>
            <param name="headChildElement">the head child element</param>
            <returns>true, if the element node represents a style sheet link</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.IHtmlParser">
            <summary>Interface for the HTML parsing operations that accept HTML and return a document node.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.IHtmlParser.Parse(System.IO.Stream,System.String)">
            <summary>
            Parses HTML provided as an
            <c>InputStream</c>
            and an encoding.
            </summary>
            <param name="htmlStream">the html stream</param>
            <param name="charset">
            the character set. If
            <see langword="null"/>
            then parser should detect encoding from stream.
            </param>
            <returns>a document node</returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.Html.IHtmlParser.Parse(System.String)">
            <summary>
            Parses HTML provided as a
            <c>String</c>
            .
            </summary>
            <param name="html">the html string</param>
            <returns>a document node</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.JsoupHtmlParser">
            <summary>Class that uses JSoup to parse HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.JsoupHtmlParser.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.JsoupHtmlParser.Parse(System.IO.Stream,System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.JsoupHtmlParser.WrapJsoupHierarchy(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>
            Wraps JSoup nodes into pdfHTML
            <see cref="T:iText.Html2pdf.Html.Node.INode"/>
            classes.
            </summary>
            <param name="jsoupNode">the JSoup node instance</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.Html.Node.INode"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupAttribute">
            <summary>
            Implementation of the
            <see cref="T:iText.Html2pdf.Html.Node.IAttribute"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.Attribute"/>
            class.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupAttribute.attribute">
            <summary>
            The JSoup
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.Attribute"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupAttribute.#ctor(iText.Html2pdf.Jsoup.Nodes.Attribute)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupAttribute"/>
            instance.
            </summary>
            <param name="attribute">the attribute</param>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupAttributes">
            <summary>
            Implementation of the <see cref="T:iText.Html2pdf.Html.Node.IAttributes"/> interface; wrapper for the JSoup <see cref="T:iText.Html2pdf.Jsoup.Nodes.Attributes"/> class.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDataNode">
            <summary>
            Implementation of the
            <see cref="T:iText.Html2pdf.Html.Node.IDataNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.DataNode"/>
            class.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDataNode.dataNode">
            <summary>The JSoup data node instance.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDataNode.#ctor(iText.Html2pdf.Jsoup.Nodes.DataNode)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDataNode"/>
            instance.
            </summary>
            <param name="dataNode">the data node</param>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentNode">
            <summary>
            Implementation of the
            <see cref="T:iText.Html2pdf.Html.Node.IDocumentNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.Document"/>
            class.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentNode.document">
            <summary>The JSoup document instance.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentNode.#ctor(iText.Html2pdf.Jsoup.Nodes.Document)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentNode"/>
            instance.
            </summary>
            <param name="document">the document</param>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentNode.GetDocument">
            <summary>Gets the JSoup document.</summary>
            <returns>the document</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentTypeNode">
            <summary>
            Implementation of the
            <see cref="T:iText.Html2pdf.Html.Node.IDocumentTypeNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.DocumentType"/>
            class.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentTypeNode.#ctor(iText.Html2pdf.Jsoup.Nodes.DocumentType)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupDocumentTypeNode"/>
            instance.
            </summary>
            <param name="node">the node</param>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode">
            <summary>
            Implementation of the
            <see cref="T:iText.Html2pdf.Html.Node.IElementNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupNode"/>
            class.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode.element">
            <summary>The JSoup element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode.attributes">
            <summary>The attributes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode.elementResolvedStyles">
            <summary>The resolved styles.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode.customDefaultStyles">
            <summary>The custom default styles.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode.lang">
            <summary>The language.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode.#ctor(iText.Html2pdf.Jsoup.Nodes.Element)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode"/>
            instance.
            </summary>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupElementNode.Text">
            <summary>Returns the element text.</summary>
            <returns>the text</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupNode">
            <summary>
            Implementation of the
            <see cref="T:iText.Html2pdf.Html.Node.INode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.Node"/>
            class.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupNode.node">
            <summary>The JSoup node instance.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupNode.childNodes">
            <summary>The child nodes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupNode.parentNode">
            <summary>The parent node.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupNode.#ctor(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupNode"/>
            instance.
            </summary>
            <param name="node">the node</param>
        </member>
        <member name="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupTextNode">
            <summary>
            Implementation of the
            <see cref="T:iText.Html2pdf.Html.Node.ITextNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.TextNode"/>
            class.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupTextNode.textNode">
            <summary>The text node.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupTextNode.#ctor(iText.Html2pdf.Jsoup.Nodes.TextNode)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.Impl.Jsoup.Node.JsoupTextNode"/>
            instance.
            </summary>
            <param name="textNode">the text node</param>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.IAttribute">
            <summary>Interface for HTML attributes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IAttribute.GetKey">
            <summary>Gets the key.</summary>
            <returns>the key</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IAttribute.GetValue">
            <summary>Gets the value.</summary>
            <returns>the value</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.IAttributes">
            <summary>Interface for a series of HTML attributes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IAttributes.GetAttribute(System.String)">
            <summary>Gets the value of an attribute, given a key.</summary>
            <param name="key">the key</param>
            <returns>the attribute</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IAttributes.SetAttribute(System.String,System.String)">
            <summary>Adds a key and a value of an attributes.</summary>
            <param name="key">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IAttributes.Size">
            <summary>Returns the number of attributes.</summary>
            <returns>the number of attributes</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.ICustomElementNode">
            <summary>
            Interface that serves as a marker indicating that this particular
            <see cref="T:iText.Html2pdf.Html.Node.IElementNode"/>
            is something non-standard.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.IDataNode">
            <summary>Interface for data nodes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IDataNode.GetWholeData">
            <summary>Gets all the data.</summary>
            <returns>the data</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.IDocumentNode">
            <summary>
            Interface implemented by classes that are a top node,
            and as such represent a Document.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.IDocumentTypeNode">
            <summary>Interface for the document type node.</summary>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.IElementNode">
            <summary>
            Interface for node classes that have a parent and children, and for which
            styles can be defined; each of these nodes can also have a name and attributes.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IElementNode.Name">
            <summary>Gets the name of the element node.</summary>
            <returns>the string</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IElementNode.GetAttributes">
            <summary>Gets the attributes.</summary>
            <returns>the attributes</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IElementNode.GetAttribute(System.String)">
            <summary>Gets an attribute.</summary>
            <param name="key">the key of the attribute we want to get</param>
            <returns>the value of the attribute</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IElementNode.GetAdditionalHtmlStyles">
            <summary>
            Gets additional styles, more specifically styles that affect an element
            based on its position in the HTML DOM, e.g.
            </summary>
            <remarks>
            Gets additional styles, more specifically styles that affect an element
            based on its position in the HTML DOM, e.g. cell borders that are set
            due to the parent table "border" attribute, or styles from "col" tags
            that affect table elements, or blocks horizontal alignment that is
            the result of parent's "align" attribute.
            </remarks>
            <returns>the additional html styles</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IElementNode.AddAdditionalHtmlStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Adds additional HTML styles.</summary>
            <param name="styles">the styles</param>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IElementNode.GetLang">
            <summary>Gets the language.</summary>
            <returns>the language value</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.INode">
            <summary>Interface for classes that describe a Node with a parent and children.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.INode.ChildNodes">
            <summary>Gets the child nodes.</summary>
            <returns>
            a list of
            <see cref="T:iText.Html2pdf.Html.Node.INode"/>
            instances.
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.INode.AddChild(iText.Html2pdf.Html.Node.INode)">
            <summary>Adds a child node.</summary>
            <param name="node">a child node that will be added to the current node</param>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.INode.ParentNode">
            <summary>Gets the parent node.</summary>
            <returns>the parent node</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.IStylesContainer">
            <summary>Interface for classes that can get and set styles.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IStylesContainer.SetStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the styles.</summary>
            <param name="stringStringMap">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            with style keys and values.
            </param>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.IStylesContainer.GetStyles">
            <summary>Gets the styles.</summary>
            <returns>the styles</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.Node.ITextNode">
            <summary>Interface for text nodes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.Node.ITextNode.WholeText">
            <summary>Returns all the text.</summary>
            <returns>the text</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.TagConstants">
            <summary>Class that bundles a series of tag constants.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.TagConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.TagConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.A">
            <summary>The Constant A.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ABBR">
            <summary>The Constant ABBR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ADDRESS">
            <summary>The Constant ADDRESS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ARTICLE">
            <summary>The Constant ARTICLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ASIDE">
            <summary>The Constant ASIDE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.B">
            <summary>The Constant B.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BDI">
            <summary>The Constant BDI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BDO">
            <summary>The Constant BDO.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BIG">
            <summary>The Constant BIG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BLOCKQUOTE">
            <summary>The Constant BLOCKQUOTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BODY">
            <summary>The Constant BODY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BR">
            <summary>The Constant BR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BUTTON">
            <summary>The Constant BUTTON.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CAPTION">
            <summary>The Constant CAPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CENTER">
            <summary>The Constant CENTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CITE">
            <summary>The Constant CITE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CODE">
            <summary>The Constant CODE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.COL">
            <summary>The Constant COL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.COLGROUP">
            <summary>The Constant COLGROUP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DD">
            <summary>The Constant DD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DEL">
            <summary>The Constant DEL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DFN">
            <summary>The Constant DFN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DL">
            <summary>The Constant DL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DT">
            <summary>The Constant DT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DIV">
            <summary>The Constant DIV.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.EM">
            <summary>The Constant EM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FIELDSET">
            <summary>The Constant FIELDSET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FIGCAPTION">
            <summary>The Constant FIGCAPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FIGURE">
            <summary>The Constant FIGURE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FONT">
            <summary>The Constant FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FOOTER">
            <summary>The Constant FOOTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FORM">
            <summary>The Constant FORM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H1">
            <summary>The Constant H1.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H2">
            <summary>The Constant H2.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H3">
            <summary>The Constant H3.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H4">
            <summary>The Constant H4.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H5">
            <summary>The Constant H5.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H6">
            <summary>The Constant H6.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HR">
            <summary>The Constant HR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HEAD">
            <summary>The Constant HEAD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HEADER">
            <summary>The Constant HEADER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HTML">
            <summary>The Constant HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.I">
            <summary>The Constant I.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.IMG">
            <summary>The Constant IMG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.INPUT">
            <summary>The Constant INPUT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.INS">
            <summary>The Constant INS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.KBD">
            <summary>The Constant KBD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LABEL">
            <summary>The Constant LABEL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LEGEND">
            <summary>The Constant LEGEND.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LI">
            <summary>The Constant LI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LINK">
            <summary>The Constant LINK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.MAIN">
            <summary>The Constant MAIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.MARK">
            <summary>The Constant MARK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.MARQUEE">
            <summary>The Constant MARQUEE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.META">
            <summary>The Constant META.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.NAV">
            <summary>The Constant NAV.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.OL">
            <summary>The Constant OL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.OPTGROUP">
            <summary>The Constant OPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.OPTION">
            <summary>The Constant OPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.P">
            <summary>The Constant P.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.PRE">
            <summary>The Constant PRE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.Q">
            <summary>The Constant Q.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.S">
            <summary>The Constant S.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SAMP">
            <summary>The Constant SAMP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SCRIPT">
            <summary>The Constant SCRIPT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SECTION">
            <summary>The Constant SECTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SELECT">
            <summary>The Constant SELECT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SMALL">
            <summary>The Constant SMALL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SPAN">
            <summary>The Constant SPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.STRIKE">
            <summary>The Constant STRIKE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.STRONG">
            <summary>The Constant STRONG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.STYLE">
            <summary>The Constant STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SUB">
            <summary>The Constant SUB.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SUP">
            <summary>The Constant SUP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TABLE">
            <summary>The Constant TABLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TBODY">
            <summary>The Constant TBODY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TEXTAREA">
            <summary>The Constant TEXTAREA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TD">
            <summary>The Constant TD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TFOOT">
            <summary>The Constant TFOOT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TH">
            <summary>The Constant TH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.THEAD">
            <summary>The Constant THEAD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TIME">
            <summary>The Constant TIME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TITLE">
            <summary>The Constant TITLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TR">
            <summary>The Constant TR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TT">
            <summary>The Constant TT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.U">
            <summary>The Constant U.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.UL">
            <summary>The Constant UL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.VAR">
            <summary>The Constant VAR.</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Helper.DataUtil">
            <summary>Internal static utilities for handling data.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.Load(System.IO.FileInfo,System.String,System.String)">
            <summary>Loads a file to a Document.</summary>
            <param name="in">file to load</param>
            <param name="charsetName">character set of input</param>
            <param name="baseUri">base URI of document, to resolve relative links against</param>
            <returns>Document</returns>
            <exception cref="T:System.IO.IOException">on IO error</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.Load(System.IO.Stream,System.String,System.String)">
            <summary>Parses a Document from an input steam.</summary>
            <param name="in">input stream to parse. You will need to close it.</param>
            <param name="charsetName">character set of input</param>
            <param name="baseUri">base URI of document, to resolve relative links against</param>
            <returns>Document</returns>
            <exception cref="T:System.IO.IOException">on IO error</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.Load(System.IO.Stream,System.String,System.String,iText.Html2pdf.Jsoup.Parser.Parser)">
            <summary>Parses a Document from an input steam, using the provided Parser.</summary>
            <param name="in">input stream to parse. You will need to close it.</param>
            <param name="charsetName">character set of input</param>
            <param name="baseUri">base URI of document, to resolve relative links against</param>
            <param name="parser">
            alternate
            <see cref="M:iText.Html2pdf.Jsoup.Parser.Parser.XmlParser">parser</see>
            to use.
            </param>
            <returns>Document</returns>
            <exception cref="T:System.IO.IOException">on IO error</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.CrossStreams(System.IO.Stream,System.IO.Stream)">
            <summary>Writes the input stream to the output stream.</summary>
            <remarks>Writes the input stream to the output stream. Doesn't close them.</remarks>
            <param name="in">input stream to read from</param>
            <param name="out">output stream to write to</param>
            <exception cref="T:System.IO.IOException">on IO error</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.ReadToByteBuffer(System.IO.Stream,System.Int32)">
            <summary>Read the input stream into a byte buffer.</summary>
            <param name="inStream">the input stream to read from</param>
            <param name="maxSize">the maximum size in bytes to read from the stream. Set to 0 to be unlimited.</param>
            <returns>the filled byte buffer</returns>
            <exception cref="T:System.IO.IOException">if an exception occurs whilst reading from the input stream.</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.ReadToByteBuffer(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.ReadFileToByteBuffer(System.IO.FileInfo)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.GetCharsetFromContentType(System.String)">
            <summary>Parse out a charset from a content type header.</summary>
            <remarks>
            Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
            will kick in.)
            </remarks>
            <param name="contentType">e.g. "text/html; charset=EUC-JP"</param>
            <returns>"EUC-JP", or null if not found. Charset is trimmed and uppercased.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DataUtil.MimeBoundary">
            <summary>Creates a random string, suitable for use as a mime boundary</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Helper.DescendableLinkedList`1">
            <summary>Provides a descending iterator and other 1.6 methods to allow support on the 1.5 JRE.</summary>
            
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DescendableLinkedList`1.#ctor">
            <summary>Create a new DescendableLinkedList.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DescendableLinkedList`1.PeekLast">
            <summary>Look at the last element, if there is one.</summary>
            <returns>the last element, or null</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DescendableLinkedList`1.PollLast">
            <summary>Remove and return the last element, if there is one</summary>
            <returns>the last element, or null</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DescendableLinkedList`1.DescendingIterator">
            <summary>Get an iterator that starts and the end of the list and works towards the start.</summary>
            <returns>an iterator that starts and the end of the list and works towards the start.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DescendingIterator`1.HasNext">
            <summary>Check if there is another element on the list.</summary>
            <returns>if another element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DescendingIterator`1.Next">
            <summary>Get the next element.</summary>
            <returns>the next element.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.DescendingIterator`1.Remove">
            <summary>Remove the current element.</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Helper.StringUtil">
            <summary>A minimal String utility class.</summary>
            <remarks>A minimal String utility class. Designed for internal jsoup use only.</remarks>
        </member>
        <member name="F:iText.Html2pdf.Jsoup.Helper.StringUtil.padding">
            <summary>Join a collection of strings by a seperator</summary>
            <param name="strings">collection of string objects</param>
            <param name="sep">string to place between strings</param>
            <returns>joined string</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Join a collection of strings by a seperator</summary>
            <param name="strings">iterator of string objects</param>
            <param name="sep">string to place between strings</param>
            <returns>joined string</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.Padding(System.Int32)">
            <summary>Returns space padding</summary>
            <param name="width">amount of padding desired</param>
            <returns>string of spaces * width</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.IsBlank(System.String)">
            <summary>Tests if a string is blank: null, emtpy, or only whitespace (" ", \r\n, \t, etc)</summary>
            <param name="string">string to test</param>
            <returns>if string is blank</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.IsNumeric(System.String)">
            <summary>Tests if a string is numeric, i.e.</summary>
            <remarks>Tests if a string is numeric, i.e. contains only digit characters</remarks>
            <param name="string">string to test</param>
            <returns>true if only digit chars, false if empty or null or contains non-digit chrs</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.IsWhitespace(System.Int32)">
            <summary>Tests if a code point is "whitespace" as defined in the HTML spec.</summary>
            <param name="c">code point to test</param>
            <returns>true if code point is whitespace, false otherwise</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.NormaliseWhitespace(System.String)">
            <summary>
            Normalise the whitespace within this string; multiple spaces collapse to a single, and all whitespace characters
            (e.g.
            </summary>
            <remarks>
            Normalise the whitespace within this string; multiple spaces collapse to a single, and all whitespace characters
            (e.g. newline, tab) convert to a simple space
            </remarks>
            <param name="string">content to normalise</param>
            <returns>normalised string</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.AppendNormalisedWhitespace(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>After normalizing the whitespace within a string, appends it to a string builder.</summary>
            <param name="accum">builder to append to</param>
            <param name="string">string to normalize whitespace within</param>
            <param name="stripLeading">set to true if you wish to remove any leading whitespace</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.Resolve(System.Uri,System.String)">
            <summary>Create a new absolute URL, from a provided existing absolute URL and a relative URL component.</summary>
            <param name="base">the existing absolulte base URL</param>
            <param name="relUrl">the relative URL to resolve. (If it's already absolute, it will be returned)</param>
            <returns>the resolved absolute URL</returns>
            <exception cref="T:System.UriFormatException">if an error occurred generating the URL</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.StringUtil.Resolve(System.String,System.String)">
            <summary>Create a new absolute URL, from a provided existing absolute URL and a relative URL component.</summary>
            <param name="baseUrl">the existing absolute base URL</param>
            <param name="relUrl">the relative URL to resolve. (If it's already absolute, it will be returned)</param>
            <returns>an absolute URL if one was able to be generated, or the empty string if not</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Helper.Validate">
            <summary>Simple validation methods.</summary>
            <remarks>Simple validation methods. Designed for jsoup internal use</remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.NotNull(System.Object)">
            <summary>Validates that the object is not null</summary>
            <param name="obj">object to test</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.NotNull(System.Object,System.String)">
            <summary>Validates that the object is not null</summary>
            <param name="obj">object to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.IsTrue(System.Boolean)">
            <summary>Validates that the value is true</summary>
            <param name="val">object to test</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.IsTrue(System.Boolean,System.String)">
            <summary>Validates that the value is true</summary>
            <param name="val">object to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.IsFalse(System.Boolean)">
            <summary>Validates that the value is false</summary>
            <param name="val">object to test</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.IsFalse(System.Boolean,System.String)">
            <summary>Validates that the value is false</summary>
            <param name="val">object to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.NoNullElements(System.Object[])">
            <summary>Validates that the array contains no null elements</summary>
            <param name="objects">the array to test</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.NoNullElements(System.Object[],System.String)">
            <summary>Validates that the array contains no null elements</summary>
            <param name="objects">the array to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.NotEmpty(System.String)">
            <summary>Validates that the string is not empty</summary>
            <param name="string">the string to test</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.NotEmpty(System.String,System.String)">
            <summary>Validates that the string is not empty</summary>
            <param name="string">the string to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Helper.Validate.Fail(System.String)">
            <summary>Cause a failure.</summary>
            <param name="msg">message to output.</param>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.HttpStatusException">
            <summary>Signals that a HTTP request resulted in a not OK HTTP response.</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Jsoup">
            <summary>The core public access point to the jsoup functionality.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.String,System.String)">
            <summary>Parse HTML into a Document.</summary>
            <remarks>Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.
                </remarks>
            <param name="html">HTML to parse</param>
            <param name="baseUri">
            The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur
            before the HTML declares a
            <c>&lt;base href&gt;</c>
            tag.
            </param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.String,System.String,iText.Html2pdf.Jsoup.Parser.Parser)">
            <summary>Parse HTML into a Document, using the provided Parser.</summary>
            <remarks>
            Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML
            (non-HTML) parser.
            </remarks>
            <param name="html">HTML to parse</param>
            <param name="baseUri">
            The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur
            before the HTML declares a
            <c>&lt;base href&gt;</c>
            tag.
            </param>
            <param name="parser">
            alternate
            <see cref="M:iText.Html2pdf.Jsoup.Parser.Parser.XmlParser">parser</see>
            to use.
            </param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.String)">
            <summary>Parse HTML into a Document.</summary>
            <remarks>
            Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a
            <c>&lt;base href&gt;</c>
            tag.
            </remarks>
            <param name="html">HTML to parse</param>
            <returns>sane HTML</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.String,System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.IO.FileInfo,System.String,System.String)">
            <summary>Parse the contents of a file as HTML.</summary>
            <param name="in">file to load HTML from</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <returns>sane HTML</returns>
            <exception cref="T:System.IO.IOException">if the file could not be found, or read, or if the charsetName is invalid.
                </exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.IO.FileInfo,System.String)">
            <summary>Parse the contents of a file as HTML.</summary>
            <remarks>Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.
                </remarks>
            <param name="in">file to load HTML from</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <returns>sane HTML</returns>
            <exception cref="T:System.IO.IOException">if the file could not be found, or read, or if the charsetName is invalid.
                </exception>
            <seealso cref="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.IO.FileInfo,System.String,System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.IO.Stream,System.String,System.String)">
            <summary>Read an input stream, and parse it to a Document.</summary>
            <param name="in">input stream to read. Make sure to close it after parsing.</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <returns>sane HTML</returns>
            <exception cref="T:System.IO.IOException">if the file could not be found, or read, or if the charsetName is invalid.
                </exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.IO.Stream,System.String,System.String,iText.Html2pdf.Jsoup.Parser.Parser)">
            <summary>Read an input stream, and parse it to a Document.</summary>
            <remarks>
            Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML
            (non-HTML) parser.
            </remarks>
            <param name="in">input stream to read. Make sure to close it after parsing.</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <param name="parser">
            alternate
            <see cref="M:iText.Html2pdf.Jsoup.Parser.Parser.XmlParser">parser</see>
            to use.
            </param>
            <returns>sane HTML</returns>
            <exception cref="T:System.IO.IOException">if the file could not be found, or read, or if the charsetName is invalid.
                </exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.ParseBodyFragment(System.String,System.String)">
            <summary>
            Parse a fragment of HTML, with the assumption that it forms the
            <c>body</c>
            of the HTML.
            </summary>
            <param name="bodyHtml">body HTML fragment</param>
            <param name="baseUri">URL to resolve relative URLs against.</param>
            <returns>sane HTML document</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Document.Body"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.ParseBodyFragment(System.String)">
            <summary>
            Parse a fragment of HTML, with the assumption that it forms the
            <c>body</c>
            of the HTML.
            </summary>
            <param name="bodyHtml">body HTML fragment</param>
            <returns>sane HTML document</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Document.Body"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Clean(System.String,System.String,iText.Html2pdf.Jsoup.Safety.Whitelist)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted
            tags and attributes.
            </summary>
            <param name="bodyHtml">input untrusted HTML (body fragment)</param>
            <param name="baseUri">URL to resolve relative URLs against</param>
            <param name="whitelist">white-list of permitted HTML elements</param>
            <returns>safe HTML (body fragment)</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Cleaner.Clean(iText.Html2pdf.Jsoup.Nodes.Document)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Clean(System.String,iText.Html2pdf.Jsoup.Safety.Whitelist)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted
            tags and attributes.
            </summary>
            <param name="bodyHtml">input untrusted HTML (body fragment)</param>
            <param name="whitelist">white-list of permitted HTML elements</param>
            <returns>safe HTML (body fragment)</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Cleaner.Clean(iText.Html2pdf.Jsoup.Nodes.Document)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.Clean(System.String,System.String,iText.Html2pdf.Jsoup.Safety.Whitelist,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of
            permitted
            tags and attributes.
            </summary>
            <param name="bodyHtml">input untrusted HTML (body fragment)</param>
            <param name="baseUri">URL to resolve relative URLs against</param>
            <param name="whitelist">white-list of permitted HTML elements</param>
            <param name="outputSettings">document output settings; use to control pretty-printing and entity escape modes
                </param>
            <returns>safe HTML (body fragment)</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Cleaner.Clean(iText.Html2pdf.Jsoup.Nodes.Document)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Jsoup.IsValid(System.String,iText.Html2pdf.Jsoup.Safety.Whitelist)">
            <summary>Test if the input HTML has only tags and attributes allowed by the Whitelist.</summary>
            <remarks>
            Test if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should
            still be run through the cleaner to set up enforced attributes, and to tidy the output.
            </remarks>
            <param name="bodyHtml">HTML to test</param>
            <param name="whitelist">whitelist to test against</param>
            <returns>true if no tags or attributes were removed; false otherwise</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Jsoup.Clean(System.String,iText.Html2pdf.Jsoup.Safety.Whitelist)"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Attribute">
            <summary>A single key + value attribute.</summary>
            <remarks>A single key + value attribute. Keys are trimmed and normalised to lower-case.</remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.#ctor(System.String,System.String)">
            <summary>Create a new attribute from unencoded (raw) key and value.</summary>
            <param name="key">attribute key</param>
            <param name="value">attribute value</param>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Attribute.CreateFromEncoded(System.String,System.String)"/>
        </member>
        <member name="P:iText.Html2pdf.Jsoup.Nodes.Attribute.Key">
            <summary>Get the attribute key.</summary>
            <returns>the attribute key</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.SetKey(System.String)">
            <summary>Set the attribute key.</summary>
            <remarks>Set the attribute key. Gets normalised as per the constructor method.</remarks>
            <param name="key">the new key; must not be null</param>
        </member>
        <member name="P:iText.Html2pdf.Jsoup.Nodes.Attribute.Value">
            <summary>Get the attribute value.</summary>
            <returns>the attribute value</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.SetValue(System.String)">
            <summary>Set the attribute value.</summary>
            <param name="value">the new attribute value; must not be null</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.Html">
            <summary>Get the HTML representation of this attribute; e.g.</summary>
            <remarks>
            Get the HTML representation of this attribute; e.g.
            <c>href="index.html"</c>
            .
            </remarks>
            <returns>HTML</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.Html(System.Text.StringBuilder,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.ToString">
            <summary>
            Get the string representation of this attribute, implemented as
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Attribute.Html"/>
            .
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.CreateFromEncoded(System.String,System.String)">
            <summary>Create a new Attribute from an unencoded key and a HTML attribute encoded value.</summary>
            <param name="unencodedKey">assumes the key is not encoded, as can be only run of simple \w chars.</param>
            <param name="encodedValue">HTML attribute encoded value</param>
            <returns>attribute</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attribute.ShouldCollapseAttribute(iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <summary>Collapsible if it's a boolean attribute and value is empty or same as name</summary>
            <param name="out">Outputsettings</param>
            <returns>Returns whether collapsible or not</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Attributes">
            <summary>The attributes of an Element.</summary>
            <remarks>
            The attributes of an Element.
            <p>
            Attributes are treated as a map: there can be only one value associated with an attribute key.
            </p>
            <p>
            Attribute key and value comparisons are done case insensitively, and keys are normalised to
            lower-case.
            </p>
            </remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Get(System.String)">
            <summary>Get an attribute value by key.</summary>
            <param name="key">the attribute key</param>
            <returns>the attribute value if set; or empty string if not set.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Attributes.HasKey(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Put(System.String,System.String)">
            <summary>Set a new attribute, or replace an existing one by key.</summary>
            <param name="key">attribute key</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Put(System.String,System.Boolean)">
            <summary>Set a new boolean attribute, remove attribute if value is false.</summary>
            <param name="key">attribute key</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Put(iText.Html2pdf.Jsoup.Nodes.Attribute)">
            <summary>Set a new attribute, or replace an existing one by key.</summary>
            <param name="attribute">attribute</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Remove(System.String)">
            <summary>Remove an attribute by key.</summary>
            <param name="key">attribute key to remove</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.HasKey(System.String)">
            <summary>Tests if these attributes contain an attribute with this key.</summary>
            <param name="key">key to check for</param>
            <returns>true if key exists, false otherwise</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Size">
            <summary>Get the number of attributes in this set.</summary>
            <returns>size</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.AddAll(iText.Html2pdf.Jsoup.Nodes.Attributes)">
            <summary>Add all the attributes from the incoming set to this set.</summary>
            <param name="incoming">attributes to add to these attributes.</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.AsList">
            <summary>Get the attributes as a List, for iteration.</summary>
            <remarks>
            Get the attributes as a List, for iteration. Do not modify the keys of the attributes via this view, as changes
            to keys will not be recognised in the containing set.
            </remarks>
            <returns>an view of the attributes as a List.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Dataset">
            <summary>
            Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys
            starting with
            <c>data-</c>
            .
            </summary>
            <returns>map of custom data attributes.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Html">
            <summary>Get the HTML representation of these attributes.</summary>
            <returns>HTML</returns>
            <exception cref="T:iText.Html2pdf.Jsoup.SerializationException">if the HTML representation of the attributes cannot be constructed.
                </exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Html(System.Text.StringBuilder,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.Equals(System.Object)">
            <summary>Checks if these attributes are equal to another set of attributes, by comparing the two sets</summary>
            <param name="o">attributes to compare with</param>
            <returns>if both sets of attributes have the same content</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Attributes.GetHashCode">
            <summary>Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.
                </summary>
            <returns>calculated hashcode</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.BooleanAttribute">
            <summary>A boolean attribute that is written out without any value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.BooleanAttribute.#ctor(System.String)">
            <summary>Create a new boolean attribute from unencoded (raw) key.</summary>
            <param name="key">attribute key</param>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Comment">
            <summary>A comment node.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Comment.#ctor(System.String,System.String)">
            <summary>Create a new comment node.</summary>
            <param name="data">The contents of the comment</param>
            <param name="baseUri">base URI</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Comment.GetData">
            <summary>Get the contents of the comment.</summary>
            <returns>comment content</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Comment.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.DataNode">
            <summary>A data node, for contents of style, script tags etc, where contents should not show in text().</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.DataNode.#ctor(System.String,System.String)">
            <summary>Create a new DataNode.</summary>
            <param name="data">data contents</param>
            <param name="baseUri">base URI</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.DataNode.GetWholeData">
            <summary>Get the data contents of this node.</summary>
            <remarks>Get the data contents of this node. Will be unescaped and with original new lines, space etc.</remarks>
            <returns>data</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.DataNode.SetWholeData(System.String)">
            <summary>Set the data contents of this node.</summary>
            <param name="data">unencoded data</param>
            <returns>this node, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.DataNode.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.DataNode.CreateFromEncoded(System.String,System.String)">
            <summary>Create a new DataNode from HTML encoded data.</summary>
            <param name="encodedData">encoded data</param>
            <param name="baseUri">bass URI</param>
            <returns>new DataNode</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Document">
            <summary>A HTML Document.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.#ctor(System.String)">
            <summary>Create a new, empty Document.</summary>
            <param name="baseUri">base URI of document</param>
            <seealso cref="M:iText.Html2pdf.Jsoup.Jsoup.Parse(System.String)"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Document.CreateShell(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.CreateShell(System.String)">
            <summary>Create a valid, empty shell of a document, suitable for adding more elements to.</summary>
            <param name="baseUri">baseUri of document</param>
            <returns>document with html, head, and body elements.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Location">
            <summary>Get the URL this Document was parsed from.</summary>
            <remarks>
            Get the URL this Document was parsed from. If the starting URL is a redirect,
            this will return the final URL from which the document was served from.
            </remarks>
            <returns>location</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Head">
            <summary>
            Accessor to the document's
            <c>head</c>
            element.
            </summary>
            <returns>
            
            <c>head</c>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Body">
            <summary>
            Accessor to the document's
            <c>body</c>
            element.
            </summary>
            <returns>
            
            <c>body</c>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Title">
            <summary>
            Get the string contents of the document's
            <c>title</c>
            element.
            </summary>
            <returns>Trimmed title, or empty string if none set.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Title(System.String)">
            <summary>
            Set the document's
            <paramref name="title"/>
            element. Updates the existing element, or adds
            <paramref name="title"/>
            to
            <c>head</c>
            if
            not present
            </summary>
            <param name="title">string to set as title</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.CreateElement(System.String)">
            <summary>Create a new Element, with this document's base uri.</summary>
            <remarks>Create a new Element, with this document's base uri. Does not make the new element a child of this document.
                </remarks>
            <param name="tagName">
            element tag name (e.g.
            <c>a</c>
            )
            </param>
            <returns>new element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Normalise">
            <summary>Normalise the document.</summary>
            <remarks>
            Normalise the document. This happens after the parse phase so generally does not need to be called.
            Moves any text content that is not in the body element into the body.
            </remarks>
            <returns>this document after normalisation</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Text(System.String)">
            <summary>
            Set the text of the
            <c>body</c>
            of this document. Any existing nodes within the body will be cleared.
            </summary>
            <param name="text">unencoded text</param>
            <returns>this document</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Charset(System.Text.Encoding)">
            <summary>Sets the charset used in this document.</summary>
            <remarks>
            Sets the charset used in this document. This method is equivalent
            to
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Charset(System.Text.Encoding)">OutputSettings.charset(Charset)</see>
            but in addition it updates the
            charset / encoding element within the document.
            <p>This enables
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)">meta charset update</see>
            .</p>
            <p>If there's no element with charset / encoding information yet it will
            be created. Obsolete charset / encoding definitions are removed!</p>
            <p><b>Elements used:</b></p>
            <ul>
            <li><b>Html:</b> <i>&lt;meta charset="CHARSET"&gt;</i></li>
            <li><b>Xml:</b> <i>&lt;?xml version="1.0" encoding="CHARSET"&gt;</i></li>
            </ul>
            </remarks>
            <param name="charset">Charset</param>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)"></seealso>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Charset(System.Text.Encoding)"></seealso>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.Charset">
            <summary>Returns the charset used in this document.</summary>
            <remarks>
            Returns the charset used in this document. This method is equivalent
            to
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Charset"/>
            .
            </remarks>
            <returns>Current Charset</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Charset"></seealso>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)">
            <summary>
            Sets whether the element with charset information in this document is
            updated on changes through
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Document.Charset(System.Text.Encoding)">Document.charset(Charset)</see>
            or not.
            <p>If set to <tt>false</tt> <i>(default)</i> there are no elements
            modified.</p>
            </summary>
            <param name="update">
            If <tt>true</tt> the element updated on charset
            changes, <tt>false</tt> if not
            </param>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Document.Charset(System.Text.Encoding)"></seealso>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.UpdateMetaCharsetElement">
            <summary>
            Returns whether the element with charset information in this document is
            updated on changes through
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Document.Charset(System.Text.Encoding)">Document.charset(Charset)</see>
            or not.
            </summary>
            <returns>
            Returns <tt>true</tt> if the element is updated on charset
            changes, <tt>false</tt> if not
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.EnsureMetaCharsetElement">
            <summary>
            Ensures a meta charset (html) or xml declaration (xml) with the current
            encoding used.
            </summary>
            <remarks>
            Ensures a meta charset (html) or xml declaration (xml) with the current
            encoding used. This only applies with
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)">updateMetaCharset</see>
            set to
            <tt>true</tt>, otherwise this method does nothing.
            <ul>
            <li>An exsiting element gets updated with the current charset</li>
            <li>If there's no element yet it will be inserted</li>
            <li>Obsolete elements are removed</li>
            </ul>
            <p><b>Elements used:</b></p>
            <ul>
            <li><b>Html:</b> <i>&lt;meta charset="CHARSET"&gt;</i></li>
            <li><b>Xml:</b> <i>&lt;?xml version="1.0" encoding="CHARSET"&gt;</i></li>
            </ul>
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.OutputSettings">
            <summary>Get the document's current output settings.</summary>
            <returns>the document's current output settings.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Document.OutputSettings(iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <summary>Set the document's output settings.</summary>
            <param name="outputSettings">new output settings.</param>
            <returns>this document, for chaining.</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.OutputSettings">
            <summary>A Document's output settings control the form of the text() and html() methods.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.EscapeMode" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.EscapeMode(iText.Html2pdf.Jsoup.Nodes.Entities.EscapeMode)">
            <summary>
            Set the document's escape mode, which determines how characters are escaped when the output character set
            does not support a given character:- using either a named or a numbered escape.
            </summary>
            <param name="escapeMode">the new escape mode to use</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Charset" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Charset(System.Text.Encoding)">
            <summary>Update the document's output charset.</summary>
            <param name="charset">the new charset to use.</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Charset(System.String)">
            <summary>Update the document's output charset.</summary>
            <param name="charset">the new charset (by name) to use.</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Syntax">
            <summary>Get the document's current output syntax.</summary>
            <returns>current syntax</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Syntax(iText.Html2pdf.Jsoup.Nodes.Syntax)">
            <summary>Set the document's output syntax.</summary>
            <remarks>
            Set the document's output syntax. Either
            <c>html</c>
            , with empty tags and boolean attributes (etc), or
            <c>xml</c>
            , with self-closing tags.
            </remarks>
            <param name="syntax">serialization syntax</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.PrettyPrint">
            <summary>Get if pretty printing is enabled.</summary>
            <remarks>
            Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format
            the output, and the output will generally look like the input.
            </remarks>
            <returns>if pretty printing is enabled.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.PrettyPrint(System.Boolean)">
            <summary>Enable or disable pretty printing.</summary>
            <param name="pretty">new pretty print setting</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Outline">
            <summary>Get if outline mode is enabled.</summary>
            <remarks>
            Get if outline mode is enabled. Default is false. If enabled, the HTML output methods will consider
            all tags as block.
            </remarks>
            <returns>if outline mode is enabled.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.Outline(System.Boolean)">
            <summary>Enable or disable HTML outline mode.</summary>
            <param name="outlineMode">new outline setting</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.IndentAmount">
            <summary>Get the current tag indent amount, used when pretty printing.</summary>
            <returns>the current indent amount</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.OutputSettings.IndentAmount(System.Int32)">
            <summary>Set the indent amount for pretty printing</summary>
            <param name="indentAmount">
            number of spaces to use for indenting each level. Must be
            <literal>&gt;=</literal>
            0.
            </param>
            <returns>this, for chaining</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Syntax">
            <summary>The output serialization syntax.</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.DocumentType">
            <summary>
            A
            <c>&lt;!DOCTYPE&gt;</c>
            node.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.DocumentType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Create a new doctype element.</summary>
            <param name="name">the doctype's name</param>
            <param name="publicId">the doctype's public ID</param>
            <param name="systemId">the doctype's system ID</param>
            <param name="baseUri">the doctype's base URI</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.DocumentType.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Element">
            <summary>
            A HTML element consists of a tag name, attributes, and child nodes (including text nodes and
            other elements).
            </summary>
            <remarks>
            A HTML element consists of a tag name, attributes, and child nodes (including text nodes and
            other elements).
            From an Element, you can extract data, traverse the node graph, and manipulate the HTML.
            </remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.#ctor(iText.Html2pdf.Jsoup.Parser.Tag,System.String,iText.Html2pdf.Jsoup.Nodes.Attributes)">
            <summary>Create a new, standalone Element.</summary>
            <remarks>Create a new, standalone Element. (Standalone in that is has no parent.)</remarks>
            <param name="tag">tag of this element</param>
            <param name="baseUri">the base URI</param>
            <param name="attributes">initial attributes</param>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.AppendChild(iText.Html2pdf.Jsoup.Nodes.Node)"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.AppendElement(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.#ctor(iText.Html2pdf.Jsoup.Parser.Tag,System.String)">
            <summary>Create a new Element from a tag and a base URI.</summary>
            <param name="tag">element tag</param>
            <param name="baseUri">
            the base URI of this element. It is acceptable for the base URI to be an empty
            string, but not null.
            </param>
            <seealso cref="M:iText.Html2pdf.Jsoup.Parser.Tag.ValueOf(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.TagName">
            <summary>Get the name of the tag for this element.</summary>
            <remarks>
            Get the name of the tag for this element. E.g.
            <c>div</c>
            </remarks>
            <returns>the tag name</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.TagName(System.String)">
            <summary>Change the tag of this element.</summary>
            <remarks>
            Change the tag of this element. For example, convert a
            <c>&lt;span&gt;</c>
            to a
            <c>&lt;div&gt;</c>
            with
            <c>el.tagName("div");</c>
            .
            </remarks>
            <param name="tagName">new tag name for this element</param>
            <returns>this element, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Tag">
            <summary>Get the Tag for this element.</summary>
            <returns>the tag object</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.IsBlock">
            <summary>Test if this element is a block-level element.</summary>
            <remarks>
            Test if this element is a block-level element. (E.g.
            <c>&lt;div&gt; == true</c>
            or an inline element
            <c>&lt;p&gt; == false</c>
            ).
            </remarks>
            <returns>true if block, false if not (and thus inline)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Id">
            <summary>
            Get the
            <c>id</c>
            attribute of this element.
            </summary>
            <returns>The id attribute, if present, or an empty string if not.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Attr(System.String,System.String)">
            <summary>Set an attribute value on this element.</summary>
            <remarks>
            Set an attribute value on this element. If this element already has an attribute with the
            key, its value is updated; otherwise, a new attribute is added.
            </remarks>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Attr(System.String,System.Boolean)">
            <summary>Set a boolean attribute value on this element.</summary>
            <remarks>
            Set a boolean attribute value on this element. Setting to <code>true</code> sets the attribute value to "" and
            marks the attribute as boolean so no value is written out. Setting to <code>false</code> removes the attribute
            with the same key if it exists.
            </remarks>
            <param name="attributeKey">the attribute key</param>
            <param name="attributeValue">the attribute value</param>
            <returns>this element</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Element.Dataset" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Parents">
            <summary>Get this element's parent and ancestors, up to the document root.</summary>
            <returns>this element's stack of parents, closest first.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Child(System.Int32)">
            <summary>Get a child element of this element, by its 0-based index number.</summary>
            <remarks>
            Get a child element of this element, by its 0-based index number.
            <p>
            Note that an element can have both mixed Nodes and Elements as children. This method inspects
            a filtered list of children that are elements, and the index is based on that filtered list.
            </p>
            </remarks>
            <param name="index">the index number of the element to retrieve</param>
            <returns>
            the child element, if it exists, otherwise throws an
            <c>IndexOutOfBoundsException</c>
            </returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNode(System.Int32)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Children">
            <summary>Get this element's child elements.</summary>
            <remarks>
            Get this element's child elements.
            <p>
            This is effectively a filter on
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNodes"/>
            to get Element nodes.
            </p>
            </remarks>
            <returns>
            child elements. If this element has no children, returns an
            empty list.
            </returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNodes"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Element.TextNodes" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.DataNodes">
            <summary>Get this element's child data nodes.</summary>
            <remarks>
            Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated.
            <p>
            This is effectively a filter on
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNodes"/>
            to get Data nodes.
            </p>
            </remarks>
            <returns>
            child data nodes. If this element has no data nodes, returns an
            empty list.
            </returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Data"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Element.Select(System.String)" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.AppendChild(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Add a node child node to this element.</summary>
            <param name="child">node to add.</param>
            <returns>this element, so that you can add more child nodes or elements.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.PrependChild(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Add a node to the start of this element's children.</summary>
            <param name="child">node to add.</param>
            <returns>this element, so that you can add more child nodes or elements.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.InsertChild(System.Int32,iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Inserts the given child node into this element at the specified index.</summary>
            <remarks>
            Inserts the given child node into this element at the specified index. Current node will be shifted to the
            right. The inserted nodes will be moved from their current parent. To prevent moving, copy the node first.
            </remarks>
            <param name="index">
            0-based index to insert children at. Specify
            <c>0</c>
            to insert at the start,
            <c>-1</c>
            at the
            end
            </param>
            <param name="child">child node to insert</param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.InsertChildren``1(System.Int32,System.Collections.Generic.ICollection{``0})">
            <summary>Inserts the given child nodes into this element at the specified index.</summary>
            <remarks>
            Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
            right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
            </remarks>
            <param name="index">
            0-based index to insert children at. Specify
            <c>0</c>
            to insert at the start,
            <c>-1</c>
            at the
            end
            </param>
            <param name="children">child nodes to insert</param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.AppendElement(System.String)">
            <summary>Create a new element by tag name, and add it as the last child.</summary>
            <param name="tagName">
            the name of the tag (e.g.
            <c>div</c>
            ).
            </param>
            <returns>
            the new element, to allow you to add content to it, e.g.:
            <c>parent.appendElement("h1").attr("id", "header").text("Welcome");</c>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.PrependElement(System.String)">
            <summary>Create a new element by tag name, and add it as the first child.</summary>
            <param name="tagName">
            the name of the tag (e.g.
            <c>div</c>
            ).
            </param>
            <returns>
            the new element, to allow you to add content to it, e.g.:
            <c>parent.prependElement("h1").attr("id", "header").text("Welcome");</c>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.AppendText(System.String)">
            <summary>Create and append a new TextNode to this element.</summary>
            <param name="text">the unencoded text to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.PrependText(System.String)">
            <summary>Create and prepend a new TextNode to this element.</summary>
            <param name="text">the unencoded text to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Append(System.String)">
            <summary>Add inner HTML to this element.</summary>
            <remarks>Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.
                </remarks>
            <param name="html">HTML to add inside this element, after the existing HTML</param>
            <returns>this element</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Prepend(System.String)">
            <summary>Add inner HTML into this element.</summary>
            <remarks>Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.
                </remarks>
            <param name="html">HTML to add inside this element, before the existing HTML</param>
            <returns>this element</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Before(System.String)">
            <summary>Insert the specified HTML into the DOM before this element (as a preceding sibling).</summary>
            <param name="html">HTML to add before this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.After(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Before(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM before this node (as a preceding sibling).</summary>
            <param name="node">to add before this element</param>
            <returns>this Element, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.After(iText.Html2pdf.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.After(System.String)">
            <summary>Insert the specified HTML into the DOM after this element (as a following sibling).</summary>
            <param name="html">HTML to add after this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Before(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.After(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM after this node (as a following sibling).</summary>
            <param name="node">to add after this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Before(iText.Html2pdf.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Empty">
            <summary>Remove all of the element's child nodes.</summary>
            <remarks>Remove all of the element's child nodes. Any attributes are left as-is.</remarks>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Wrap(System.String)">
            <summary>Wrap the supplied HTML around this element.</summary>
            <param name="html">
            HTML to wrap around this element, e.g.
            <c>&lt;div class="head"&gt;&lt;/div&gt;</c>
            . Can be arbitrarily deep.
            </param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.CssSelector">
            <summary>Get a CSS selector that will uniquely select this element.</summary>
            <remarks>
            Get a CSS selector that will uniquely select this element.
            <p>
            If the element has an ID, returns #id;
            otherwise returns the parent (if any) CSS selector, followed by
            <literal>'&gt;'</literal>
            ,
            followed by a unique selector for the element (tag.class.class:nth-child(n)).
            </p>
            </remarks>
            <returns>the CSS Path that can be used to retrieve the element in a selector.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.SiblingElements">
            <summary>Get sibling elements.</summary>
            <remarks>
            Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling
            of itself, so will not be included in the returned list.
            </remarks>
            <returns>sibling elements</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.NextElementSibling">
            <summary>Gets the next sibling element of this element.</summary>
            <remarks>
            Gets the next sibling element of this element. E.g., if a
            <c>div</c>
            contains two
            <c>p</c>
            s,
            the
            <c>nextElementSibling</c>
            of the first
            <c>p</c>
            is the second
            <c>p</c>
            .
            <p>
            This is similar to
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Node.NextSibling"/>
            , but specifically finds only Elements
            </p>
            </remarks>
            <returns>the next element, or null if there is no next element</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.PreviousElementSibling"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.PreviousElementSibling">
            <summary>Gets the previous element sibling of this element.</summary>
            <returns>the previous element, or null if there is no previous element</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.NextElementSibling"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.FirstElementSibling">
            <summary>Gets the first element sibling of this element.</summary>
            <returns>the first sibling that is an element (aka the parent's first element child)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.ElementSiblingIndex">
            <summary>Get the list index of this element in its element sibling list.</summary>
            <remarks>
            Get the list index of this element in its element sibling list. I.e. if this is the first element
            sibling, returns 0.
            </remarks>
            <returns>position in element sibling list</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.LastElementSibling">
            <summary>Gets the last element sibling of this element</summary>
            <returns>the last sibling that is an element (aka the parent's last element child)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByTag(System.String)">
            <summary>Finds elements, including and recursively under this element, with the specified tag name.</summary>
            <param name="tagName">The tag name to search for (case insensitively).</param>
            <returns>a matching unmodifiable list of elements. Will be empty if this element and none of its children match.
                </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementById(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByClass(System.String)" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttribute(System.String)">
            <summary>Find elements that have a named attribute set.</summary>
            <remarks>Find elements that have a named attribute set. Case insensitive.</remarks>
            <param name="key">
            name of the attribute, e.g.
            <c>href</c>
            </param>
            <returns>elements that have this attribute, empty if none</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeStarting(System.String)">
            <summary>Find elements that have an attribute name starting with the supplied prefix.</summary>
            <remarks>
            Find elements that have an attribute name starting with the supplied prefix. Use
            <c>data-</c>
            to find elements
            that have HTML5 datasets.
            </remarks>
            <param name="keyPrefix">
            name prefix of the attribute e.g.
            <c>data-</c>
            </param>
            <returns>elements that have attribute names that start with with the prefix, empty if none.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeValue(System.String,System.String)">
            <summary>Find elements that have an attribute with the specific value.</summary>
            <remarks>Find elements that have an attribute with the specific value. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="value">value of the attribute</param>
            <returns>elements that have this attribute with this value, empty if none</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeValueNot(System.String,System.String)">
            <summary>Find elements that either do not have this attribute, or have it with a different value.</summary>
            <remarks>Find elements that either do not have this attribute, or have it with a different value. Case insensitive.
                </remarks>
            <param name="key">name of the attribute</param>
            <param name="value">value of the attribute</param>
            <returns>elements that do not have a matching attribute</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeValueStarting(System.String,System.String)">
            <summary>Find elements that have attributes that start with the value prefix.</summary>
            <remarks>Find elements that have attributes that start with the value prefix. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="valuePrefix">start of attribute value</param>
            <returns>elements that have attributes that start with the value prefix</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeValueEnding(System.String,System.String)">
            <summary>Find elements that have attributes that end with the value suffix.</summary>
            <remarks>Find elements that have attributes that end with the value suffix. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="valueSuffix">end of the attribute value</param>
            <returns>elements that have attributes that end with the value suffix</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeValueContaining(System.String,System.String)">
            <summary>Find elements that have attributes whose value contains the match string.</summary>
            <remarks>Find elements that have attributes whose value contains the match string. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="match">substring of value to search for</param>
            <returns>elements that have attributes containing this text</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeValueMatching(System.String,System.Text.RegularExpressions.Regex)">
            <summary>Find elements that have attributes whose values match the supplied regular expression.</summary>
            <param name="key">name of the attribute</param>
            <param name="pattern">compiled regular expression to match against attribute values</param>
            <returns>elements that have attributes matching this regular expression</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByAttributeValueMatching(System.String,System.String)">
            <summary>Find elements that have attributes whose values match the supplied regular expression.</summary>
            <param name="key">name of the attribute</param>
            <param name="regex">regular expression to match against attribute values. You can use <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded">embedded flags</a> (such as (?i) and (?m) to control regex options.
                </param>
            <returns>elements that have attributes matching this regular expression</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByIndexLessThan(System.Int32)">
            <summary>Find elements whose sibling index is less than the supplied index.</summary>
            <param name="index">0-based index</param>
            <returns>elements less than index</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByIndexGreaterThan(System.Int32)">
            <summary>Find elements whose sibling index is greater than the supplied index.</summary>
            <param name="index">0-based index</param>
            <returns>elements greater than index</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsByIndexEquals(System.Int32)">
            <summary>Find elements whose sibling index is equal to the supplied index.</summary>
            <param name="index">0-based index</param>
            <returns>elements equal to index</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsContainingText(System.String)">
            <summary>Find elements that contain the specified string.</summary>
            <remarks>
            Find elements that contain the specified string. The search is case insensitive. The text may appear directly
            in the element, or in any of its descendants.
            </remarks>
            <param name="searchText">to look for in the element's text</param>
            <returns>elements that contain the string, case insensitive.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsContainingOwnText(System.String)">
            <summary>Find elements that directly contain the specified string.</summary>
            <remarks>
            Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly
            in the element, not in any of its descendants.
            </remarks>
            <param name="searchText">to look for in the element's own text</param>
            <returns>elements that contain the string, case insensitive.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.OwnText"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsMatchingText(System.Text.RegularExpressions.Regex)">
            <summary>Find elements whose text matches the supplied regular expression.</summary>
            <param name="pattern">regular expression to match text against</param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsMatchingText(System.String)">
            <summary>Find elements whose text matches the supplied regular expression.</summary>
            <param name="regex">regular expression to match text against. You can use <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded">embedded flags</a> (such as (?i) and (?m) to control regex options.
                </param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsMatchingOwnText(System.Text.RegularExpressions.Regex)">
            <summary>Find elements whose own text matches the supplied regular expression.</summary>
            <param name="pattern">regular expression to match text against</param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.OwnText"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetElementsMatchingOwnText(System.String)">
            <summary>Find elements whose text matches the supplied regular expression.</summary>
            <param name="regex">regular expression to match text against. You can use <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded">embedded flags</a> (such as (?i) and (?m) to control regex options.
                </param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.OwnText"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.GetAllElements">
            <summary>Find all elements under this element (including self, and children of children).</summary>
            <returns>all elements</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Element.Text" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Element.OwnText" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Text(System.String)">
            <summary>Set the text of this element.</summary>
            <remarks>Set the text of this element. Any existing contents (text or elements) will be cleared</remarks>
            <param name="text">unencoded text</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.HasText">
            <summary>Test if this element has any text content (that is not just whitespace).</summary>
            <returns>true if element has non-blank text content.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Data">
            <summary>Get the combined data of this element.</summary>
            <remarks>
            Get the combined data of this element. Data is e.g. the inside of a
            <c>script</c>
            tag.
            </remarks>
            <returns>the data, or empty string if none</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.DataNodes"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.ClassName">
            <summary>
            Gets the literal value of this element's "class" attribute, which may include multiple class names, space
            separated.
            </summary>
            <remarks>
            Gets the literal value of this element's "class" attribute, which may include multiple class names, space
            separated. (E.g. on <code>&lt;div class="header gray"&gt;</code> returns, "<code>header gray</code>")
            </remarks>
            <returns>The literal class attribute, or <b>empty string</b> if no class attribute set.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.ClassNames">
            <summary>Get all of the element's class names.</summary>
            <remarks>
            Get all of the element's class names. E.g. on element
            <c>&lt;div class="header gray"&gt;</c>
            ,
            returns a set of two elements
            <c>"header", "gray"</c>
            . Note that modifications to this set are not pushed to
            the backing
            <c>class</c>
            attribute; use the
            <see cref="!:ClassNames(System.Collections.Generic.ICollection&lt;E&gt;)"/>
            method to persist them.
            </remarks>
            <returns>set of classnames, empty if no class attribute</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.ClassNames(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Set the element's
            <c>class</c>
            attribute to the supplied class names.
            </summary>
            <param name="classNames">set of classes</param>
            <returns>this element, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.HasClass(System.String)">
            <summary>Tests if this element has a class.</summary>
            <remarks>Tests if this element has a class. Case insensitive.</remarks>
            <param name="className">name of class to check for</param>
            <returns>true if it does, false if not</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.AddClass(System.String)">
            <summary>
            Add a class name to this element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.RemoveClass(System.String)">
            <summary>
            Remove a class name from this element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to remove</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.ToggleClass(System.String)">
            <summary>
            Toggle a class name on this element's
            <c>class</c>
            attribute: if present, remove it; otherwise add it.
            </summary>
            <param name="className">class name to toggle</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Val">
            <summary>Get the value of a form element (input, textarea, etc).</summary>
            <returns>the value of the form element, or empty string if not set.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Val(System.String)">
            <summary>Set the value of a form element (input, textarea, etc).</summary>
            <param name="value">value to set</param>
            <returns>this element (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.OuterHtmlTail(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Html">
            <summary>Retrieves the element's inner HTML.</summary>
            <remarks>
            Retrieves the element's inner HTML. E.g. on a
            <c>&lt;div&gt;</c>
            with one empty
            <c>&lt;p&gt;</c>
            , would return
            <c>&lt;p&gt;&lt;/p&gt;</c>
            . (Whereas
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Node.OuterHtml"/>
            would return
            <c>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</c>
            .)
            </remarks>
            <returns>String of HTML.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.OuterHtml"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Html(System.Text.StringBuilder)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Element.Html(System.String)">
            <summary>Set this element's inner HTML.</summary>
            <remarks>Set this element's inner HTML. Clears the existing HTML first.</remarks>
            <param name="html">HTML to parse and set into this element</param>
            <returns>this element</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Append(System.String)"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Entities">
            <summary>HTML entities, and escape routines.</summary>
            <remarks>
            HTML entities, and escape routines.
            Source: <a href="http://www.w3.org/TR/html5/named-character-references.html#named-character-references">W3C HTML
            named character references</a>.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Jsoup.Nodes.Entities.EscapeMode.xhtml">
            <summary>Restricted entities suitable for XHTML output: lt, gt, amp, and quot only.</summary>
        </member>
        <member name="F:iText.Html2pdf.Jsoup.Nodes.Entities.EscapeMode.base">
            <summary>Default HTML output entities.</summary>
        </member>
        <member name="F:iText.Html2pdf.Jsoup.Nodes.Entities.EscapeMode.extended">
            <summary>Complete HTML entities.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Entities.IsNamedEntity(System.String)">
            <summary>Check if the input is a known named entity</summary>
            <param name="name">the possible entity name (e.g. "lt" or "amp")</param>
            <returns>true if a known named entity</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Entities.IsBaseNamedEntity(System.String)">
            <summary>Check if the input is a known named entity in the base entity set.</summary>
            <param name="name">the possible entity name (e.g. "lt" or "amp")</param>
            <returns>true if a known named entity in the base set</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Entities.IsNamedEntity(System.String)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Entities.GetCharacterByName(System.String)" -->
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Entities.Escape(System.Text.StringBuilder,System.String,iText.Html2pdf.Jsoup.Nodes.OutputSettings,System.Boolean,System.Boolean,System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Entities.Unescape(System.String,System.Boolean)">
            <summary>Unescape the input string.</summary>
            <param name="string">to un-HTML-escape</param>
            <param name="strict">if "strict" (that is, requires trailing ';' char, otherwise that's optional)</param>
            <returns>unescaped string</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.FormElement">
            <summary>A HTML Form Element provides ready access to the form fields/controls that are associated with it.
                </summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.FormElement.#ctor(iText.Html2pdf.Jsoup.Parser.Tag,System.String,iText.Html2pdf.Jsoup.Nodes.Attributes)">
            <summary>Create a new, standalone form element.</summary>
            <param name="tag">tag of this element</param>
            <param name="baseUri">the base URI</param>
            <param name="attributes">initial attributes</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.FormElement.Elements">
            <summary>Get the list of form control elements associated with this form.</summary>
            <returns>form controls associated with this element.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.FormElement.AddElement(iText.Html2pdf.Jsoup.Nodes.Element)">
            <summary>Add a form control element to this form.</summary>
            <param name="element">form control to add</param>
            <returns>this form element, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.FormElement.FormData">
            <summary>Get the data that this form submits.</summary>
            <remarks>
            Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
            list will not be reflected in the DOM.
            </remarks>
            <returns>a list of key vals</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.Node">
            <summary>The base, abstract Node model.</summary>
            <remarks>The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.</remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.#ctor(System.String,iText.Html2pdf.Jsoup.Nodes.Attributes)">
            <summary>Create a new Node.</summary>
            <param name="baseUri">base URI</param>
            <param name="attributes">attributes (not null, but may be empty)</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.#ctor">
            <summary>Default constructor.</summary>
            <remarks>Default constructor. Doesn't setup base uri, children, or attributes; use with caution.</remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.NodeName">
            <summary>Get the node name of this node.</summary>
            <remarks>Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).
                </remarks>
            <returns>node name</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Attr(System.String)">
            <summary>Get an attribute's value by its key.</summary>
            <remarks>
            Get an attribute's value by its key.
            <p>
            To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
            which is a shortcut to the
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Node.AbsUrl(System.String)"/>
            method.
            </p>
            E.g.:
            <blockquote><code>String url = a.attr("abs:href");</code></blockquote>
            </remarks>
            <param name="attributeKey">The attribute key.</param>
            <returns>The attribute, or empty string if not present (to avoid nulls).</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Attributes"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.HasAttr(System.String)"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.AbsUrl(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Attributes">
            <summary>Get all of the element's attributes.</summary>
            <returns>attributes (which implements iterable, in same order as presented in original HTML).</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Attr(System.String,System.String)">
            <summary>Set an attribute (key=value).</summary>
            <remarks>Set an attribute (key=value). If the attribute already exists, it is replaced.</remarks>
            <param name="attributeKey">The attribute key.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.HasAttr(System.String)">
            <summary>Test if this element has an attribute.</summary>
            <param name="attributeKey">The attribute key to check.</param>
            <returns>true if the attribute exists, false if not.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.RemoveAttr(System.String)">
            <summary>Remove an attribute from this element.</summary>
            <param name="attributeKey">The attribute to remove.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.BaseUri">
            <summary>Get the base URI of this node.</summary>
            <returns>base URI</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.SetBaseUri(System.String)">
            <summary>Update the base URI of this node and all of its descendants.</summary>
            <param name="baseUri">base URI to set</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.AbsUrl(System.String)">
            <summary>Get an absolute URL from a URL attribute that may be relative (i.e.</summary>
            <remarks>
            Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href&gt;</code> or
            <code>&lt;img src&gt;</code>).
            <p>
            E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
            </p>
            <p>
            If the attribute value is already absolute (i.e. it starts with a protocol, like
            <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
            returned directly. Otherwise, it is treated as a URL relative to the element's
            <see cref="F:iText.Html2pdf.Jsoup.Nodes.Node.baseUri"/>
            , and made
            absolute using that.
            </p>
            <p>
            As an alternate, you can use the
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Attr(System.String)"/>
            method with the <code>abs:</code> prefix, e.g.:
            <code>String absUrl = linkEl.attr("abs:href");</code>
            </p>
            </remarks>
            <param name="attributeKey">The attribute key</param>
            <returns>
            An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
            could not be made successfully into a URL.
            </returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Attr(System.String)"/>
            <seealso cref="!:System.Uri.URL(System.Uri, System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNode(System.Int32)">
            <summary>Get a child node by its 0-based index.</summary>
            <param name="index">index of child node</param>
            <returns>
            the child node at this index. Throws a
            <c>IndexOutOfBoundsException</c>
            if the index is out of bounds.
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNodes">
            <summary>Get this node's children.</summary>
            <remarks>
            Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes
            themselves can be manipulated.
            </remarks>
            <returns>list of children. If no children, returns an empty list.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNodesCopy">
            <summary>Returns a deep copy of this node's children.</summary>
            <remarks>
            Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original
            nodes
            </remarks>
            <returns>a deep copy of this node's children</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNodeSize">
            <summary>Get the number of child nodes that this node holds.</summary>
            <returns>the number of child nodes that this node holds.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Parent">
            <summary>Gets this node's parent node.</summary>
            <returns>parent node; or null if no parent.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.ParentNode">
            <summary>Gets this node's parent node.</summary>
            <remarks>Gets this node's parent node. Node overridable by extending classes, so useful if you really just need the Node type.
                </remarks>
            <returns>parent node; or null if no parent.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.OwnerDocument">
            <summary>Gets the Document associated with this Node.</summary>
            <returns>the Document associated with this Node, or null if there is no such Document.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Remove">
            <summary>Remove (delete) this node from the DOM tree.</summary>
            <remarks>Remove (delete) this node from the DOM tree. If this node has children, they are also removed.</remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Before(System.String)">
            <summary>Insert the specified HTML into the DOM before this node (i.e.</summary>
            <remarks>Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).</remarks>
            <param name="html">HTML to add before this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.After(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Before(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM before this node (i.e.</summary>
            <remarks>Insert the specified node into the DOM before this node (i.e. as a preceding sibling).</remarks>
            <param name="node">to add before this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.After(iText.Html2pdf.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.After(System.String)">
            <summary>Insert the specified HTML into the DOM after this node (i.e.</summary>
            <remarks>Insert the specified HTML into the DOM after this node (i.e. as a following sibling).</remarks>
            <param name="html">HTML to add after this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Before(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.After(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM after this node (i.e.</summary>
            <remarks>Insert the specified node into the DOM after this node (i.e. as a following sibling).</remarks>
            <param name="node">to add after this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Before(iText.Html2pdf.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Wrap(System.String)">
            <summary>Wrap the supplied HTML around this node.</summary>
            <param name="html">
            HTML to wrap around this element, e.g.
            <c>&lt;div class="head"&gt;&lt;/div&gt;</c>
            . Can be arbitrarily deep.
            </param>
            <returns>this node, for chaining.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Unwrap">
            <summary>Removes this node from the DOM, and moves its children up into the node's parent.</summary>
            <remarks>
            Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping
            the node but keeping its children.
            <p>
            For example, with the input html:
            </p>
            <p>
            <c>&lt;div&gt;One &lt;span&gt;Two &lt;b&gt;Three&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;</c>
            </p>
            Calling
            <c>element.unwrap()</c>
            on the
            <c>span</c>
            element will result in the html:
            <p>
            <c>&lt;div&gt;One Two &lt;b&gt;Three&lt;/b&gt;&lt;/div&gt;</c>
            </p>
            and the
            <c>"Two "</c>
            
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.TextNode"/>
            being returned.
            </remarks>
            <returns>the first child of this node, after the node has been unwrapped. Null if the node had no children.
                </returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Remove"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Wrap(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.ReplaceWith(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Replace this node in the DOM with the supplied node.</summary>
            <param name="in">the node that will will replace the existing node.</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.SiblingNodes">
            <summary>Retrieves this node's sibling nodes.</summary>
            <remarks>
            Retrieves this node's sibling nodes. Similar to
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Node.ChildNodes">node.parent.childNodes()</see>
            , but does not
            include this node (a node is not a sibling of itself).
            </remarks>
            <returns>node siblings. If the node has no parent, returns an empty list.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.NextSibling">
            <summary>Get this node's next sibling.</summary>
            <returns>next sibling, or null if this is the last sibling</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.PreviousSibling">
            <summary>Get this node's previous sibling.</summary>
            <returns>the previous sibling, or null if this is the first sibling</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.SiblingIndex">
            <summary>Get the list index of this node in its node sibling list.</summary>
            <remarks>
            Get the list index of this node in its node sibling list. I.e. if this is the first node
            sibling, returns 0.
            </remarks>
            <returns>position in node sibling list</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.ElementSiblingIndex"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Traverse(iText.Html2pdf.Jsoup.Select.NodeVisitor)">
            <summary>Perform a depth-first traversal through this node and its descendants.</summary>
            <param name="nodeVisitor">the visitor callbacks to perform on each node</param>
            <returns>this node, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.OuterHtml">
            <summary>Get the outer HTML of this node.</summary>
            <returns>HTML</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <summary>Get the outer HTML of this node.</summary>
            <param name="accum">accumulator to place HTML into</param>
            <exception cref="T:System.IO.IOException">if appending to the given accumulator fails.</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.OuterHtmlTail(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Html(System.Text.StringBuilder)">
            <summary>
            Write this node and its children to the given
            <see cref="T:System.Text.StringBuilder"/>
            .
            </summary>
            <param name="appendable">
            the
            <see cref="T:System.Text.StringBuilder"/>
            to write to.
            </param>
            <returns>
            the supplied
            <see cref="T:System.Text.StringBuilder"/>
            , for chaining.
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Indent(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.Equals(System.Object)">
            <summary>Check if this node is the same instance of another (object identity test).</summary>
            <param name="o">other object to compare to</param>
            <returns>true if the content of this node is the same as the other</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.HasSameValue(System.Object)">to compare nodes by their value</seealso>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.Node.HasSameValue(System.Object)">
            <summary>Check if this node is has the same content as another node.</summary>
            <remarks>
            Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the
            other node; particularly its position in the tree does not influence its similarity.
            </remarks>
            <param name="o">other object to compare to</param>
            <returns>true if the content of this node is the same as the other</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Nodes.Node.Clone" -->
        <member name="T:iText.Html2pdf.Jsoup.Nodes.TextNode">
            <summary>A text node.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.#ctor(System.String,System.String)">
            <summary>Create a new TextNode representing the supplied (unencoded) text).</summary>
            <param name="text">raw text</param>
            <param name="baseUri">base uri</param>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.TextNode.CreateFromEncoded(System.String,System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.Text">
            <summary>Get the text content of this text node.</summary>
            <returns>Unencoded, normalised text.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.TextNode.GetWholeText"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.Text(System.String)">
            <summary>Set the text content of this text node.</summary>
            <param name="text">unencoded text</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.GetWholeText">
            <summary>Get the (unencoded) text of this text node, including any newlines and spaces present in the original.
                </summary>
            <returns>text</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.IsBlank">
            <summary>Test if this text node is blank -- that is, empty or only whitespace (including newlines).</summary>
            <returns>true if this document is empty or only whitespace, false if it contains any text content.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.SplitText(System.Int32)">
            <summary>Split this text node into two nodes at the specified string offset.</summary>
            <remarks>
            Split this text node into two nodes at the specified string offset. After splitting, this node will contain the
            original text up to the offset, and will have a new text node sibling containing the text after the offset.
            </remarks>
            <param name="offset">string offset point to split node at.</param>
            <returns>the newly created text node containing the text after the offset.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.TextNode.CreateFromEncoded(System.String,System.String)">
            <summary>Create a new TextNode from HTML encoded (aka escaped) data.</summary>
            <param name="encodedText">Text containing encoded HTML (e.g. &amp;lt;)</param>
            <param name="baseUri">Base uri</param>
            <returns>TextNode containing unencoded data (e.g. &lt;)</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Nodes.XmlDeclaration">
            <summary>An XML Declaration.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.XmlDeclaration.#ctor(System.String,System.String,System.Boolean)">
            <summary>Create a new XML declaration</summary>
            <param name="name">of declaration</param>
            <param name="baseUri">base uri</param>
            <param name="isProcessingInstruction">is processing instruction</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.XmlDeclaration.Name">
            <summary>Get the name of this declaration.</summary>
            <returns>name of this declaration.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.XmlDeclaration.GetWholeDeclaration">
            <summary>Get the unencoded XML declaration.</summary>
            <returns>XML declaration</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Nodes.XmlDeclaration.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.Html2pdf.Jsoup.Nodes.OutputSettings)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.CharacterReader">
            <summary>CharacterReader consumes tokens off a string.</summary>
            <remarks>CharacterReader consumes tokens off a string. To replace the old TokenQueue.</remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.CharacterReader.NextIndexOf(System.Char)">
            <summary>Returns the number of characters between the current position and the next instance of the input char
                </summary>
            <param name="c">scan target</param>
            <returns>offset between current position and next instance of target. -1 if not found.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.CharacterReader.NextIndexOf(System.String)">
            <summary>Returns the number of characters between the current position and the next instance of the input sequence
                </summary>
            <param name="seq">scan target</param>
            <returns>offset between current position and next instance of target. -1 if not found.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.CharacterReader.CacheString(System.Int32,System.Int32)">
            <summary>Caches short strings, as a flywheel pattern, to reduce GC load.</summary>
            <remarks>
            Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
            <p />
            Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
            That saves both having to create objects as hash keys, and running through the entry list, at the expense of
            some more duplicates.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.CharacterReader.RangeEquals(System.Int32,System.Int32,System.String)">
            <summary>Check if the value of the provided range equals the string.</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.HtmlTreeBuilder">
            <summary>HTML Tree Builder; creates a DOM from Tokens.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.HtmlTreeBuilder.GenerateImpliedEndTags(System.String)">
            <summary>
            11.2.5.2 Closing elements that have implied end tags<p/>
            When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
            dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
            the UA must pop the current node off the stack of open elements.
            </summary>
            <param name="excludeTag">
            If a step requires the UA to generate implied end tags but lists an element to exclude from the
            process, then the UA must perform the above steps as if that element was not in the above list.
            </param>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.HtmlTreeBuilderState">
            <summary>The Tree Builder's current state.</summary>
            <remarks>The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.
                </remarks>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.ParseError">
            <summary>A Parse Error records an error in the input HTML that occurs in either the tokenisation or the tree building phase.
                </summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.ParseError.GetErrorMessage">
            <summary>Retrieve the error message.</summary>
            <returns>the error message.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.ParseError.GetPosition">
            <summary>Retrieves the offset of the error.</summary>
            <returns>error offset within input</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.ParseErrorList">
            <summary>A container for ParseErrors.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.Parser">
            <summary>
            Parses HTML into a
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.Document"/>
            . Generally best to use one of the  more convenient parse methods
            in
            <see cref="T:iText.Html2pdf.Jsoup.Jsoup"/>
            .
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.#ctor(iText.Html2pdf.Jsoup.Parser.TreeBuilder)">
            <summary>Create a new Parser, using the specified TreeBuilder</summary>
            <param name="treeBuilder">TreeBuilder to use to parse input into Documents.</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.GetTreeBuilder">
            <summary>Get the TreeBuilder currently in use.</summary>
            <returns>current TreeBuilder.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.SetTreeBuilder(iText.Html2pdf.Jsoup.Parser.TreeBuilder)">
            <summary>Update the TreeBuilder used when parsing content.</summary>
            <param name="treeBuilder">current TreeBuilder</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.IsTrackErrors">
            <summary>Check if parse error tracking is enabled.</summary>
            <returns>current track error state.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.SetTrackErrors(System.Int32)">
            <summary>Enable or disable parse error tracking for the next parse.</summary>
            <param name="maxErrors">the maximum number of errors to track. Set to 0 to disable.</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.GetErrors">
            <summary>Retrieve the parse errors, if any, from the last parse.</summary>
            <returns>list of parse errors, up to the size of the maximum errors tracked.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.Parse(System.String,System.String)">
            <summary>Parse HTML into a Document.</summary>
            <param name="html">HTML to parse</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>parsed Document</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.ParseFragment(System.String,iText.Html2pdf.Jsoup.Nodes.Element,System.String)">
            <summary>Parse a fragment of HTML into a list of nodes.</summary>
            <remarks>Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.
                </remarks>
            <param name="fragmentHtml">the fragment of HTML to parse</param>
            <param name="context">
            (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This
            provides stack context (for implicit element creation).
            </param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.
                </returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.ParseXmlFragment(System.String,System.String)">
            <summary>Parse a fragment of XML into a list of nodes.</summary>
            <param name="fragmentXml">the fragment of XML to parse</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>list of nodes parsed from the input XML.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.ParseBodyFragment(System.String,System.String)">
            <summary>
            Parse a fragment of HTML into the
            <c>body</c>
            of a Document.
            </summary>
            <param name="bodyHtml">fragment of HTML</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>Document, with empty head, and HTML parsed into body</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.UnescapeEntities(System.String,System.Boolean)">
            <summary>Utility method to unescape HTML entities from a string</summary>
            <param name="string">HTML escaped string</param>
            <param name="inAttribute">if the string is to be escaped in strict mode (as attributes are)</param>
            <returns>an unescaped string</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.ParseBodyFragmentRelaxed(System.String,System.String)">
            <param name="bodyHtml">HTML to parse</param>
            <param name="baseUri">baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
                </param>
            <returns>parsed Document</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.HtmlParser">
            <summary>Create a new HTML parser.</summary>
            <remarks>
            Create a new HTML parser. This parser treats input as HTML5, and enforces the creation of a normalised document,
            based on a knowledge of the semantics of the incoming tags.
            </remarks>
            <returns>a new HTML parser.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Parser.XmlParser">
            <summary>Create a new XML parser.</summary>
            <remarks>
            Create a new XML parser. This parser assumes no knowledge of the incoming tags and does not treat it as HTML,
            rather creates a simple tree directly from the input.
            </remarks>
            <returns>a new simple XML parser.</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.Tag">
            <summary>HTML Tag capabilities.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.GetName">
            <summary>Get this tag's name.</summary>
            <returns>the tag's name</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.ValueOf(System.String)">
            <summary>Get a Tag by name.</summary>
            <remarks>
            Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.
            <p>
            Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals().
            </p>
            </remarks>
            <param name="tagName">Name of tag, e.g. "p". Case insensitive.</param>
            <returns>The tag, either defined or new generic.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsBlock">
            <summary>Gets if this is a block tag.</summary>
            <returns>if block tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.FormatAsBlock">
            <summary>Gets if this tag should be formatted as a block (or as inline)</summary>
            <returns>if should be formatted as block or inline</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.CanContainBlock">
            <summary>Gets if this tag can contain block tags.</summary>
            <returns>if tag can contain block tags</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsInline">
            <summary>Gets if this tag is an inline tag.</summary>
            <returns>if this tag is an inline tag.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsData">
            <summary>Gets if this tag is a data only tag.</summary>
            <returns>if this tag is a data only tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsEmpty">
            <summary>Get if this is an empty tag</summary>
            <returns>if this is an empty tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsSelfClosing">
            <summary>Get if this tag is self closing.</summary>
            <returns>if this tag should be output as self closing.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsKnownTag">
            <summary>Get if this is a pre-defined tag, or was auto created on parsing.</summary>
            <returns>if a known tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsKnownTag(System.String)">
            <summary>Check if this tagname is a known tag.</summary>
            <param name="tagName">name of tag</param>
            <returns>if known HTML tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.PreserveWhitespace">
            <summary>Get if this tag should preserve whitespace within child text nodes.</summary>
            <returns>if preserve whitepace</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsFormListed">
            <summary>Get if this tag represents a control associated with a form.</summary>
            <remarks>Get if this tag represents a control associated with a form. E.g. input, textarea, output</remarks>
            <returns>if associated with a form</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tag.IsFormSubmittable">
            <summary>Get if this tag represents an element that should be submitted with a form.</summary>
            <remarks>Get if this tag represents an element that should be submitted with a form. E.g. input, option</remarks>
            <returns>if submittable with a form</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.Token">
            <summary>Parse tokens for the Tokeniser.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Token.Reset">
            <summary>Reset the data represent by this token, for reuse.</summary>
            <remarks>
            Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every
            piece of data, which immediately get GCed.
            </remarks>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.Tokeniser">
            <summary>Readers the input stream into tokens.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.Tokeniser.UnescapeEntities(System.Boolean)">
            <summary>Utility method to consume reader and unescape entities found within.</summary>
            <param name="inAttribute"/>
            <returns>unescaped string from reader</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.TokeniserState">
            <summary>States and transition activations for the Tokeniser.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokeniserState._TokeniserState_96.Read(iText.Html2pdf.Jsoup.Parser.Tokeniser,iText.Html2pdf.Jsoup.Parser.CharacterReader)">
            handles data in title, textarea etc
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokeniserState.HandleDataEndTag(iText.Html2pdf.Jsoup.Parser.Tokeniser,iText.Html2pdf.Jsoup.Parser.CharacterReader,iText.Html2pdf.Jsoup.Parser.TokeniserState)">
            <summary>Handles RawtextEndTagName, ScriptDataEndTagName, and ScriptDataEscapedEndTagName.</summary>
            <remarks>
            Handles RawtextEndTagName, ScriptDataEndTagName, and ScriptDataEscapedEndTagName. Same body impl, just
            different else exit transitions.
            </remarks>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.TokenQueue">
            <summary>A character queue with parsing helpers.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.#ctor(System.String)">
            <summary>Create a new TokenQueue.</summary>
            <param name="data">string of data to back queue.</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.IsEmpty">
            <summary>Is the queue empty?</summary>
            <returns>true if no data left in queue.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.Peek">
            <summary>Retrieves but does not remove the first character from the queue.</summary>
            <returns>First character, or 0 if empty.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.AddFirst(System.Nullable{System.Char})">
            <summary>Add a character to the start of the queue (will be the next character retrieved).</summary>
            <param name="c">character to add</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.AddFirst(System.String)">
            <summary>Add a string to the start of the queue.</summary>
            <param name="seq">string to add.</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.Matches(System.String)">
            <summary>Tests if the next characters on the queue match the sequence.</summary>
            <remarks>Tests if the next characters on the queue match the sequence. Case insensitive.</remarks>
            <param name="seq">String to check queue for.</param>
            <returns>true if the next characters match.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.MatchesCS(System.String)">
            <summary>Case sensitive match test.</summary>
            <param name="seq">string to case sensitively check for</param>
            <returns>true if matched, false if not</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.MatchesAny(System.String[])">
            <summary>Tests if the next characters match any of the sequences.</summary>
            <remarks>Tests if the next characters match any of the sequences. Case insensitive.</remarks>
            <param name="seq">list of strings to case insensitively check for</param>
            <returns>true of any matched, false if none did</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.MatchChomp(System.String)">
            <summary>
            Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the
            queue.
            </summary>
            <param name="seq">String to search for, and if found, remove from queue.</param>
            <returns>true if found and removed, false if not found.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.MatchesWhitespace">
            <summary>Tests if queue starts with a whitespace character.</summary>
            <returns>if starts with whitespace</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.MatchesWord">
            <summary>Test if the queue matches a word character (letter or digit).</summary>
            <returns>if matches a word character</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.Advance">
            <summary>Drops the next character off the queue.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.Consume">
            <summary>Consume one character off queue.</summary>
            <returns>first character on queue.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Parser.TokenQueue.Consume(System.String)" -->
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeTo(System.String)">
            <summary>Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.
                </summary>
            <param name="seq">String to end on (and not include in return, but leave on queue). <b>Case sensitive.</b>
                </param>
            <returns>The matched data consumed from queue.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeToAny(System.String[])">
            <summary>Consumes to the first sequence provided, or to the end of the queue.</summary>
            <remarks>Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue.
                </remarks>
            <param name="seq">any number of terminators to consume to. <b>Case insensitive.</b></param>
            <returns>consumed string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ChompTo(System.String)" -->
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ChompBalanced(System.Char,System.Char)">
            <summary>Pulls a balanced string off the queue.</summary>
            <remarks>
            Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
            and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
            in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
            contains text strings; use unescape for that.
            </remarks>
            <param name="open">opener</param>
            <param name="close">closer</param>
            <returns>data matched from the queue</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.Unescape(System.String)">
            <summary>Unescaped a \ escaped string.</summary>
            <param name="in">backslash escaped string</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeWhitespace">
            <summary>Pulls the next run of whitespace characters of the queue.</summary>
            <returns>Whether consuming whitespace or not</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeWord">
            <summary>Retrieves the next run of word type (letter or digit) off the queue.</summary>
            <returns>String of word characters from queue, or empty string if none.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeTagName">
            <summary>Consume an tag name off the queue (word or :, _, -)</summary>
            <returns>tag name</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeElementSelector">
            <summary>Consume a CSS element selector (tag name, but | instead of : for namespaces, to not conflict with :pseudo selects).
                </summary>
            <returns>tag name</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeCssIdentifier">
            <summary>
            Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _)
            http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier
            </summary>
            <returns>identifier</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.ConsumeAttributeKey">
            <summary>Consume an attribute key off the queue (letter, digit, -, _, :")</summary>
            <returns>attribute key</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.TokenQueue.Remainder">
            <summary>Consume and return whatever is left on the queue.</summary>
            <returns>remained of queue.</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.TreeBuilder">
            <author>Jonathan Hedley</author>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Parser.XmlTreeBuilder">
            <summary>
            Use the
            <c>XmlTreeBuilder</c>
            when you want to parse XML without any of the HTML DOM rules being applied to the
            document.
            <p>Usage example:
            <c>Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());</c>
            </p>
            </summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Parser.XmlTreeBuilder.PopStackToClose(iText.Html2pdf.Jsoup.Parser.Token.EndTag)">
            <summary>If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence.
                </summary>
            <remarks>
            If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
            found, skips.
            </remarks>
            <param name="endTag"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Safety.Cleaner">
            <summary>The whitelist based HTML cleaner.</summary>
            <remarks>
            The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes
            that you are expecting; no junk, and no cross-site scripting attacks!
            <p>
            The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain
            HTML that is allowed by the whitelist.
            </p>
            <p>
            It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the
            canned white-lists only allow body contained tags.
            </p>
            <p>
            Rather than interacting directly with a Cleaner object, generally see the
            <c>clean</c>
            methods in
            <see cref="T:iText.Html2pdf.Jsoup.Jsoup"/>
            .
            </p>
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Cleaner.#ctor(iText.Html2pdf.Jsoup.Safety.Whitelist)">
            <summary>Create a new cleaner, that sanitizes documents using the supplied whitelist.</summary>
            <param name="whitelist">white-list to clean with</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Cleaner.Clean(iText.Html2pdf.Jsoup.Nodes.Document)">
            <summary>Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
                </summary>
            <remarks>
            Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
            The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
            </remarks>
            <param name="dirtyDocument">Untrusted base document to clean.</param>
            <returns>cleaned document.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Cleaner.IsValid(iText.Html2pdf.Jsoup.Nodes.Document)">
            <summary>Determines if the input document is valid, against the whitelist.</summary>
            <remarks>
            Determines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes
            in the input HTML are allowed by the whitelist.
            <p>
            This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully
            using the
            <see cref="M:iText.Html2pdf.Jsoup.Safety.Cleaner.Clean(iText.Html2pdf.Jsoup.Nodes.Document)"/>
            document. If using as a validator, it is recommended to still clean the document
            to ensure enforced attributes are set correctly, and that the output is tidied.
            </p>
            </remarks>
            <param name="dirtyDocument">document to test</param>
            <returns>true if no tags or attributes need to be removed; false if they do</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Safety.Cleaner.CleaningVisitor">
            <summary>Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Html2pdf.Jsoup.Safety.Whitelist" -->
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.None">
            <summary>This whitelist allows only text nodes: all HTML will be stripped.</summary>
            <returns>whitelist</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.SimpleText">
            <summary>This whitelist allows only simple text formatting: <code>b, em, i, strong, u</code>.</summary>
            <remarks>
            This whitelist allows only simple text formatting: <code>b, em, i, strong, u</code>. All other HTML (tags and
            attributes) will be removed.
            </remarks>
            <returns>whitelist</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Safety.Whitelist.Basic" -->
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.BasicWithImages">
            <summary>
            This whitelist allows the same text tags as
            <see cref="M:iText.Html2pdf.Jsoup.Safety.Whitelist.Basic"/>
            , and also allows <code>img</code> tags, with appropriate
            attributes, with <code>src</code> pointing to <code>http</code> or <code>https</code>.
            </summary>
            <returns>whitelist</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Safety.Whitelist.Relaxed" -->
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.#ctor">
            <summary>Create a new, empty whitelist.</summary>
            <remarks>Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead.
                </remarks>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Whitelist.Basic"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Whitelist.BasicWithImages"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Whitelist.SimpleText"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Whitelist.Relaxed"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.AddTags(System.String[])">
            <summary>Add a list of allowed elements to a whitelist.</summary>
            <remarks>Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)
                </remarks>
            <param name="tags">tag names to allow</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.RemoveTags(System.String[])">
            <summary>Remove a list of allowed elements from a whitelist.</summary>
            <remarks>Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.)
                </remarks>
            <param name="tags">tag names to disallow</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.AddAttributes(System.String,System.String[])">
            <summary>Add a list of allowed attributes to a tag.</summary>
            <remarks>
            Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)
            <p>
            E.g.: <code>addAttributes("a", "href", "class")</code> allows <code>href</code> and <code>class</code> attributes
            on <code>a</code> tags.
            </p>
            <p>
            To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.
            <code>addAttributes(":all", "class")</code>.
            </p>
            </remarks>
            <param name="tag">The tag the attributes are for. The tag will be added to the allowed tag list if necessary.
                </param>
            <param name="keys">List of valid attributes for the tag</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.RemoveAttributes(System.String,System.String[])">
            <summary>Remove a list of allowed attributes from a tag.</summary>
            <remarks>
            Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.)
            <p>
            E.g.: <code>removeAttributes("a", "href", "class")</code> disallows <code>href</code> and <code>class</code>
            attributes on <code>a</code> tags.
            </p>
            <p>
            To make an attribute invalid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.
            <code>removeAttributes(":all", "class")</code>.
            </p>
            </remarks>
            <param name="tag">The tag the attributes are for.</param>
            <param name="keys">List of invalid attributes for the tag</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.AddEnforcedAttribute(System.String,System.String,System.String)">
            <summary>Add an enforced attribute to a tag.</summary>
            <remarks>
            Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element
            already has the attribute set, it will be overridden.
            <p>
            E.g.: <code>addEnforcedAttribute("a", "rel", "nofollow")</code> will make all <code>a</code> tags output as
            <code>&lt;a href="..." rel="nofollow"&gt;</code>
            </p>
            </remarks>
            <param name="tag">The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.
                </param>
            <param name="key">The attribute key</param>
            <param name="value">The enforced attribute value</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.RemoveEnforcedAttribute(System.String,System.String)">
            <summary>Remove a previously configured enforced attribute from a tag.</summary>
            <param name="tag">The tag the enforced attribute is for.</param>
            <param name="key">The attribute key</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.PreserveRelativeLinks(System.Boolean)">
            <summary>
            Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute
            links.
            </summary>
            <remarks>
            Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute
            links. By default, this is <b>false</b>: URLs will be  made absolute (e.g. start with an allowed protocol, like
            e.g.
            <c>http://</c>
            .
            <p>
            Note that when handling relative links, the input document must have an appropriate
            <c>base URI</c>
            set when
            parsing, so that the link's protocol can be confirmed. Regardless of the setting of the
            <c>
            preserve relative
            links
            </c>
            option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute
            will be removed.
            </p>
            </remarks>
            <param name="preserve">
            
            <see langword="true"/>
            to allow relative links,
            <see langword="false"/>
            (default) to deny
            </param>
            <returns>this Whitelist, for chaining.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Safety.Whitelist.AddProtocols(System.String,System.String,System.String[])"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.AddProtocols(System.String,System.String,System.String[])">
            <summary>Add allowed URL protocols for an element's URL attribute.</summary>
            <remarks>
            Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to
            URLs with the defined protocol.
            <p>
            E.g.: <code>addProtocols("a", "href", "ftp", "http", "https")</code>
            </p>
            <p>
            To allow a link to an in-page URL anchor (i.e. <code>&lt;a href="#anchor"&gt;</code>, add a <code>#</code>:<br />
            E.g.: <code>addProtocols("a", "href", "#")</code>
            </p>
            </remarks>
            <param name="tag">Tag the URL protocol is for</param>
            <param name="key">Attribute key</param>
            <param name="protocols">List of valid protocols</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.RemoveProtocols(System.String,System.String,System.String[])">
            <summary>Remove allowed URL protocols for an element's URL attribute.</summary>
            <remarks>
            Remove allowed URL protocols for an element's URL attribute.
            <p>
            E.g.: <code>removeProtocols("a", "href", "ftp")</code>
            </p>
            </remarks>
            <param name="tag">Tag the URL protocol is for</param>
            <param name="key">Attribute key</param>
            <param name="protocols">List of invalid protocols</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.IsSafeTag(System.String)">
            <summary>Test if the supplied tag is allowed by this whitelist</summary>
            <param name="tag">test tag</param>
            <returns>true if allowed</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Safety.Whitelist.IsSafeAttribute(System.String,iText.Html2pdf.Jsoup.Nodes.Element,iText.Html2pdf.Jsoup.Nodes.Attribute)">
            <summary>Test if the supplied attribute is allowed by this whitelist for this tag</summary>
            <param name="tagName">tag to consider allowing the attribute in</param>
            <param name="el">element under test, to confirm protocol</param>
            <param name="attr">attribute under test</param>
            <returns>true if allowed</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Collector">
            <summary>Collects a list of elements that match the supplied criteria.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Collector.Collect(iText.Html2pdf.Jsoup.Select.Evaluator,iText.Html2pdf.Jsoup.Nodes.Element)">
            <summary>Build a list of elements, by visiting root and every descendant of root, and testing it against the evaluator.
                </summary>
            <param name="eval">Evaluator to test elements against</param>
            <param name="root">root of tree to descend</param>
            <returns>list of matches; empty if none</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.CombiningEvaluator">
            <summary>Base combining (and, or) evaluator.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.CombiningEvaluator.OR.#ctor(System.Collections.Generic.ICollection{iText.Html2pdf.Jsoup.Select.Evaluator})">
            <summary>Create a new Or evaluator.</summary>
            <remarks>Create a new Or evaluator. The initial evaluators are ANDed together and used as the first clause of the OR.
                </remarks>
            <param name="evaluators">initial OR clause (these are wrapped into an AND evaluator).</param>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Elements">
            <summary>
            A list of
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.Element"/>
            s, with methods that act on every element in the list.
            <p>
            To get an
            <c>Elements</c>
            object, use the
            <see cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Select(System.String)"/>
            method.
            </p>
            </summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Clone">
            <summary>Creates a deep copy of these elements.</summary>
            <returns>a deep copy</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Attr(System.String)">
            <summary>Get an attribute value from the first matched element that has the attribute.</summary>
            <param name="attributeKey">The attribute key.</param>
            <returns>
            The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true),
            or if the no elements have the attribute, returns empty string.
            </returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Select.Elements.HasAttr(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.HasAttr(System.String)">
            <summary>Checks if any of the matched elements have this attribute set.</summary>
            <param name="attributeKey">attribute key</param>
            <returns>true if any of the elements have the attribute; false if none do.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Attr(System.String,System.String)">
            <summary>Set an attribute on all matched elements.</summary>
            <param name="attributeKey">attribute key</param>
            <param name="attributeValue">attribute value</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.RemoveAttr(System.String)">
            <summary>Remove an attribute from every matched element.</summary>
            <param name="attributeKey">The attribute to remove.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.AddClass(System.String)">
            <summary>
            Add the class name to every matched element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to add</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.RemoveClass(System.String)">
            <summary>
            Remove the class name from every matched element's
            <c>class</c>
            attribute, if present.
            </summary>
            <param name="className">class name to remove</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.ToggleClass(System.String)">
            <summary>
            Toggle the class name on every matched element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to add if missing, or remove if present, from every element.</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.HasClass(System.String)">
            <summary>
            Determine if any of the matched elements have this class name set in their
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to check for</param>
            <returns>true if any do, false if none do</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Val">
            <summary>Get the form element's value of the first matched element.</summary>
            <returns>The form element's value, or empty if not set.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Val"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Val(System.String)">
            <summary>Set the form element's value in each of the matched elements.</summary>
            <param name="value">The value to set into each matched element</param>
            <returns>this (for chaining)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Select.Elements.Text" -->
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Html">
            <summary>Get the combined inner HTML of all matched elements.</summary>
            <returns>string of all element's inner HTML.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Select.Elements.Text"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Select.Elements.OuterHtml"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.OuterHtml">
            <summary>Get the combined outer HTML of all matched elements.</summary>
            <returns>string of all element's outer HTML.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Select.Elements.Text"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Select.Elements.Html"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.ToString">
            <summary>Get the combined outer HTML of all matched elements.</summary>
            <remarks>
            Get the combined outer HTML of all matched elements. Alias of
            <see cref="M:iText.Html2pdf.Jsoup.Select.Elements.OuterHtml"/>
            .
            </remarks>
            <returns>string of all element's outer HTML.</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Select.Elements.Text"/>
            <seealso cref="M:iText.Html2pdf.Jsoup.Select.Elements.Html"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.TagName(System.String)">
            <summary>Update the tag name of each matched element.</summary>
            <remarks>
            Update the tag name of each matched element. For example, to change each
            <c>&lt;i&gt;</c>
            to a
            <c>&lt;em&gt;</c>
            , do
            <c>doc.select("i").tagName("em");</c>
            </remarks>
            <param name="tagName">the new tag name</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.TagName(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Html(System.String)">
            <summary>Set the inner HTML of each matched element.</summary>
            <param name="html">HTML to parse and set into each matched element.</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Prepend(System.String)">
            <summary>Add the supplied HTML to the start of each matched element's inner HTML.</summary>
            <param name="html">HTML to add inside each element, before the existing HTML</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Prepend(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Append(System.String)">
            <summary>Add the supplied HTML to the end of each matched element's inner HTML.</summary>
            <param name="html">HTML to add inside each element, after the existing HTML</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Append(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Before(System.String)">
            <summary>Insert the supplied HTML before each matched element's outer HTML.</summary>
            <param name="html">HTML to insert before each element</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Before(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.After(System.String)">
            <summary>Insert the supplied HTML after each matched element's outer HTML.</summary>
            <param name="html">HTML to insert after each element</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.After(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Wrap(System.String)">
            <summary>Wrap the supplied HTML around each matched elements.</summary>
            <remarks>
            Wrap the supplied HTML around each matched elements. For example, with HTML
            <c>&lt;p&gt;&lt;b&gt;This&lt;/b&gt; is &lt;b&gt;Jsoup&lt;/b&gt;&lt;/p&gt;</c>
            ,
            <code>doc.select("b").wrap("&lt;i&gt;&lt;/i&gt;");</code>
            becomes
            <c>&lt;p&gt;&lt;i&gt;&lt;b&gt;This&lt;/b&gt;&lt;/i&gt; is &lt;i&gt;&lt;b&gt;jsoup&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;
                </c>
            </remarks>
            <param name="html">
            HTML to wrap around each element, e.g.
            <c>&lt;div class="head"&gt;&lt;/div&gt;</c>
            . Can be arbitrarily deep.
            </param>
            <returns>this (for chaining)</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Element.Wrap(System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Unwrap">
            <summary>Removes the matched elements from the DOM, and moves their children up into their parents.</summary>
            <remarks>
            Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of
            dropping the elements but keeping their children.
            <p>
            This is useful for e.g removing unwanted formatting elements but keeping their contents.
            </p>
            E.g. with HTML: <p>
            <c>&lt;div&gt;&lt;font&gt;One&lt;/font&gt; &lt;font&gt;&lt;a href="/"&gt;Two&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;
                </c>
            </p>
            <p>
            <c>doc.select("font").unwrap();</c>
            </p>
            <p>HTML =
            <c>&lt;div&gt;One &lt;a href="/"&gt;Two&lt;/a&gt;&lt;/div&gt;</c>
            </p>
            </remarks>
            <returns>this (for chaining)</returns>
            <seealso cref="M:iText.Html2pdf.Jsoup.Nodes.Node.Unwrap"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Select.Elements.Empty" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Select.Elements.Remove" -->
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Select(System.String)">
            <summary>Find matching elements within this element list.</summary>
            <param name="query">
            A
            <see cref="T:iText.Html2pdf.Jsoup.Select.Selector"/>
            query
            </param>
            <returns>the filtered list of elements, or an empty list if none match.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Select.Elements.Not(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Html2pdf.Jsoup.Select.Elements.Eq(System.Int32)" -->
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Is(System.String)">
            <summary>Test if any of the matched elements match the supplied query.</summary>
            <param name="query">A selector</param>
            <returns>true if at least one element in the list matches the query.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Parents">
            <summary>Get all of the parents and ancestor elements of the matched elements.</summary>
            <returns>all of the parents and ancestor elements of the matched elements</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.First">
            <summary>Get the first matched element.</summary>
            <returns>The first matched element, or <code>null</code> if contents is empty.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Last">
            <summary>Get the last matched element.</summary>
            <returns>The last matched element, or <code>null</code> if contents is empty.</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Traverse(iText.Html2pdf.Jsoup.Select.NodeVisitor)">
            <summary>Perform a depth-first traversal on each of the selected elements.</summary>
            <param name="nodeVisitor">the visitor callbacks to perform on each node</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Elements.Forms">
            <summary>
            Get the
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.FormElement"/>
            forms from the selected elements, if any.
            </summary>
            <returns>
            a list of
            <see cref="T:iText.Html2pdf.Jsoup.Nodes.FormElement"/>
            s pulled from the matched elements. The list will be empty if the elements contain
            no forms.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator">
            <summary>Evaluates that an element matches the selector.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Evaluator.Matches(iText.Html2pdf.Jsoup.Nodes.Element,iText.Html2pdf.Jsoup.Nodes.Element)">
            <summary>Test if the element meets the evaluator's requirements.</summary>
            <param name="root">Root of the matching subtree</param>
            <param name="element">tested element</param>
            <returns>
            Returns <tt>true</tt> if the requirements are met or
            <tt>false</tt> otherwise
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.Tag">
            <summary>Evaluator for tag name</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.ID">
            <summary>Evaluator for element id</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.Class">
            <summary>Evaluator for element class</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.Attribute">
            <summary>Evaluator for attribute name matching</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeStarting">
            <summary>Evaluator for attribute name prefix matching</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeWithValue">
            <summary>Evaluator for attribute name/value matching</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeWithValueNot">
            <summary>Evaluator for attribute name != value matching</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeWithValueStarting">
            <summary>Evaluator for attribute name/value matching (value prefix)</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeWithValueEnding">
            <summary>Evaluator for attribute name/value matching (value ending)</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeWithValueContaining">
            <summary>Evaluator for attribute name/value matching (value containing)</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeWithValueMatching">
            <summary>Evaluator for attribute name/value matching (value regex matching)</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AttributeKeyPair">
            <summary>Abstract evaluator for attribute name/value matching</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.AllElements">
            <summary>Evaluator for any / all element matching</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IndexLessThan">
            <summary>
            Evaluator for matching by sibling index number (e
            <literal>&lt;</literal>
            idx)
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IndexGreaterThan">
            <summary>
            Evaluator for matching by sibling index number (e
            <literal>&gt;</literal>
            idx)
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IndexEquals">
            <summary>Evaluator for matching by sibling index number (e = idx)</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IsLastChild">
            <summary>Evaluator for matching the last sibling (css :last-child)</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IsNthChild">
            <summary>css-compatible Evaluator for :eq (css :nth-child)</summary>
            <seealso cref="T:iText.Html2pdf.Jsoup.Select.Evaluator.IndexEquals"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IsNthLastChild">
            <summary>css pseudo class :nth-last-child)</summary>
            <seealso cref="T:iText.Html2pdf.Jsoup.Select.Evaluator.IndexEquals"/>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IsNthOfType">
            <summary>css pseudo class nth-of-type</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IsFirstChild">
            <summary>Evaluator for matching the first sibling (css :first-child)</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IsRoot">
            <summary>css3 pseudo-class :root</summary>
            <seealso><a href="http://www.w3.org/TR/selectors/#root-pseudo">:root selector</a></seealso>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.IndexEvaluator">
            <summary>Abstract evaluator for sibling index matching</summary>
            <author>ant</author>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.ContainsText">
            <summary>Evaluator for matching Element (and its descendants) text</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.ContainsOwnText">
            <summary>Evaluator for matching Element's own text</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.Evaluator.MatchesOwn">
            <summary>Evaluator for matching Element's own text with regex</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.MatchesElement">
            <summary>Evaluator for matching Element (and its descendants) text with regex</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.NodeTraversor">
            <summary>Depth-first node traversor.</summary>
            <remarks>
            Depth-first node traversor. Use to iterate through all nodes under and including the specified root node.
            <p>
            This implementation does not use recursion, so a deep DOM does not risk blowing the stack.
            </p>
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.NodeTraversor.#ctor(iText.Html2pdf.Jsoup.Select.NodeVisitor)">
            <summary>Create a new traversor.</summary>
            <param name="visitor">
            a class implementing the
            <see cref="T:iText.Html2pdf.Jsoup.Select.NodeVisitor"/>
            interface, to be called when visiting each node.
            </param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.NodeTraversor.Traverse(iText.Html2pdf.Jsoup.Nodes.Node)">
            <summary>Start a depth-first traverse of the root and all of its descendants.</summary>
            <param name="root">the root node point to traverse.</param>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.NodeVisitor">
            <summary>Node visitor interface.</summary>
            <remarks>
            Node visitor interface. Provide an implementing class to
            <see cref="T:iText.Html2pdf.Jsoup.Select.NodeTraversor"/>
            to iterate through nodes.
            <p>
            This interface provides two methods,
            <c>head</c>
            and
            <c>tail</c>
            . The head method is called when the node is first
            seen, and the tail method when all of the node's children have been visited. As an example, head can be used to
            create a start tag for a node, and tail to create the end tag.
            </p>
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.NodeVisitor.Head(iText.Html2pdf.Jsoup.Nodes.Node,System.Int32)">
            <summary>Callback for when a node is first visited.</summary>
            <param name="node">the node being visited.</param>
            <param name="depth">
            the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node
            of that will have depth 1.
            </param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.NodeVisitor.Tail(iText.Html2pdf.Jsoup.Nodes.Node,System.Int32)">
            <summary>Callback for when a node is last visited, after all of its descendants have been visited.</summary>
            <param name="node">the node being visited.</param>
            <param name="depth">
            the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node
            of that will have depth 1.
            </param>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.QueryParser">
            <summary>Parses a CSS selector into an Evaluator tree.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.QueryParser.#ctor(System.String)">
            <summary>Create a new QueryParser.</summary>
            <param name="query">CSS query</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.QueryParser.Parse(System.String)">
            <summary>Parse a CSS query into an Evaluator.</summary>
            <param name="query">CSS query</param>
            <returns>Evaluator</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.QueryParser.Parse">
            <summary>Parse the query</summary>
            <returns>Evaluator</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Html2pdf.Jsoup.Select.Selector" -->
        <member name="M:iText.Html2pdf.Jsoup.Select.Selector.Select(System.String,iText.Html2pdf.Jsoup.Nodes.Element)">
            <summary>Find elements matching selector.</summary>
            <param name="query">CSS selector</param>
            <param name="root">root element to descend into</param>
            <returns>matching elements, empty if none</returns>
            <exception cref="T:iText.Html2pdf.Jsoup.Select.Selector.SelectorParseException">(unchecked) on an invalid CSS query.</exception>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Selector.Select(iText.Html2pdf.Jsoup.Select.Evaluator,iText.Html2pdf.Jsoup.Nodes.Element)">
            <summary>Find elements matching selector.</summary>
            <param name="evaluator">CSS selector</param>
            <param name="root">root element to descend into</param>
            <returns>matching elements, empty if none</returns>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.Select.Selector.Select(System.String,System.Collections.Generic.IEnumerable{iText.Html2pdf.Jsoup.Nodes.Element})">
            <summary>Find elements matching selector.</summary>
            <param name="query">CSS selector</param>
            <param name="roots">root elements to descend into</param>
            <returns>matching elements, empty if none</returns>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.Select.StructuralEvaluator">
            <summary>Base structural evaluator.</summary>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.SerializationException">
            <summary>A SerializationException is raised whenever serialization of a DOM element fails.</summary>
            <remarks>
            A SerializationException is raised whenever serialization of a DOM element fails. This exception usually wraps an
            <see cref="T:System.IO.IOException"/>
            that may be thrown due to an inaccessible output stream.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.SerializationException.#ctor">
            <summary>Creates and initializes a new serialization exception with no error message and cause.</summary>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.SerializationException.#ctor(System.String)">
            <summary>Creates and initializes a new serialization exception with the given error message and no cause.</summary>
            <param name="message">the error message of the new serialization exception (may be <code>null</code>).</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.SerializationException.#ctor(System.Exception)">
            <summary>
            Creates and initializes a new serialization exception with the specified cause and an error message of
            <code>(cause==null ? null : cause.toString())</code> (which typically contains the class and error message of
            <code>cause</code>).
            </summary>
            <param name="cause">the cause of the new serialization exception (may be <code>null</code>).</param>
        </member>
        <member name="M:iText.Html2pdf.Jsoup.SerializationException.#ctor(System.String,System.Exception)">
            <summary>Creates and initializes a new serialization exception with the given error message and cause.</summary>
            <param name="message">the error message of the new serialization exception.</param>
            <param name="cause">the cause of the new serialization exception.</param>
        </member>
        <member name="T:iText.Html2pdf.Jsoup.UnsupportedMimeTypeException">
            <summary>Signals that a HTTP response returned a mime type that is not supported.</summary>
        </member>
        <member name="T:iText.Html2pdf.LogMessageConstant">
            <summary>Class that bundles all the error message templates as constants.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.ACROFORM_NOT_SUPPORTED_FOR_SELECT">
            <summary>The Constant ACROFORM_NOT_SUPPORTED_FOR_SELECT.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.CONTENT_PROPERTY_INVALID">
            <summary>The Constant CONTENT_PROPERTY_INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.CSS_PROPERTY_IN_PERCENTS_NOT_SUPPORTED">
            <summary>The Constant CSS_PROPERTY_IN_PERCENTS_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.ERROR_LOADING_FONT">
            <summary>The Constant ERROR_LOADING_FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.ERROR_PARSING_CSS_SELECTOR">
            <summary>The Constant ERROR_PARSING_CSS_SELECTOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.ERROR_RESOLVING_PARENT_STYLES">
            <summary>The Constant ERROR_RESOLVING_PARENT_STYLES.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.ERROR_WHILE_LAYOUT_OF_FORM_FIELD">
            <summary>The Constant ERROR_WHILE_LAYOUT_OF_FORM_FIELD.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.ERROR_WHILE_LAYOUT_OF_FORM_FIELD_WITH_TYPE">
            <summary>The Constant ERROR_WHILE_LAYOUT_OF_FORM_FIELD_WITH_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.HEIGHT_VALUE_IN_PERCENT_NOT_SUPPORTED">
            <summary>The Constant HEIGHT_VALUE_IN_PERCENT_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.INPUT_FIELD_DOES_NOT_FIT">
            <summary>The Constant INPUT_FIELD_DOES_NOT_FIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.INPUT_SUPPORTS_ONLY_POINT_WIDTH">
            <summary>The Constant INPUT_SUPPORTS_ONLY_POINT_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.INPUT_TYPE_IS_NOT_SUPPORTED">
            <summary>The Constant INPUT_TYPE_IS_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.INVALID_CSS_PROPERTY_DECLARATION">
            <summary>The Constant INVALID_CSS_PROPERTY_DECLARATION.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.MARGIN_VALUE_IN_PERCENT_NOT_SUPPORTED">
            <summary>The Constant MARGIN_VALUE_IN_PERCENT_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.NOT_SUPPORTED_LIST_STYLE_TYPE">
            <summary>The Constant NOT_SUPPORTED_LIST_STYLE_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.NOT_SUPPORTED_TH_SCOPE_TYPE">
            <summary>The Constant NOT_SUPPORTED_TH_SCOPE_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.NO_CONSUMER_FOUND_FOR_CONTENT">
            <summary>The Constant NO_CONSUMER_FOUND_FOR_CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.NO_CSS_APPLIER_FOUND_FOR_TAG">
            <summary>The Constant NO_CSS_APPLIER_FOUND_FOR_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.NO_IPROPERTYCONTAINER_RESULT_FOR_THE_TAG">
            <summary>The Constant NO_IPROPERTYCONTAINER_RESULT_FOR_THE_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.NO_WORKER_FOUND_FOR_TAG">
            <summary>The Constant NO_WORKER_FOUND_FOR_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.PADDING_VALUE_IN_PERCENT_NOT_SUPPORTED">
            <summary>The Constant PADDING_VALUE_IN_PERCENT_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.PAGE_SIZE_VALUE_IS_INVALID">
            <summary>The Constant PAGE_SIZE_VALUE_IS_INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.QUOTES_PROPERTY_INVALID">
            <summary>The Constant QUOTES_PROPERTY_INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.QUOTE_IS_NOT_CLOSED_IN_CSS_EXPRESSION">
            <summary>The Constant QUOTE_IS_NOT_CLOSED_IN_CSS_EXPRESSION.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.RULE_IS_NOT_SUPPORTED">
            <summary>The Constant RULE_IS_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.TEXT_DECORATION_BLINK_NOT_SUPPORTED">
            <summary>The Constant TEXT_DECORATION_BLINK_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.TEXT_WAS_NOT_PROCESSED">
            <summary>The Constant TEXT_WAS_NOT_PROCESSED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNABLE_TO_PROCESS_EXTERNAL_CSS_FILE">
            <summary>The Constant UNABLE_TO_PROCESS_EXTERNAL_CSS_FILE.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNABLE_TO_RESOLVE_COUNTER">
            <summary>The Constant UNABLE_TO_RESOLVE_COUNTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNABLE_TO_RESOLVE_FONT">
            <summary>The Constant UNABLE_TO_RESOLVE_FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNABLE_TO_RETRIEVE_FONT">
            <summary>The Constant UNABLE_TO_RETRIEVE_FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNABLE_TO_RETRIEVE_IMAGE_FROM_BASE64_SOURCE">
            <summary>The Constant UNABLE_TO_RETRIEVE_IMAGE_FROM_BASE64_SOURCE.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_BASE_URI">
            <summary>The Constant UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_BASE_URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNABLE_TO_RETRIEVE_STREAM_WITH_GIVEN_BASE_URI">
            <summary>The Constant UNABLE_TO_RETRIEVE_STREAM_WITH_GIVEN_BASE_URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNKNOWN_ABSOLUTE_METRIC_LENGTH_PARSED">
            <summary>The Constant UNKNOWN_ABSOLUTE_METRIC_LENGTH_PARSED.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.UNKNOWN_MARGIN_BOX_CHILD">
            <summary>The Constant UNKNOWN_MARGIN_BOX_CHILD.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.WAS_NOT_ABLE_TO_DEFINE_BACKGROUND_CSS_SHORTHAND_PROPERTIES">
            <summary>The Constant WAS_NOT_ABLE_TO_DEFINE_BACKGROUND_CSS_SHORTHAND_PROPERTIES.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.WORKER_UNABLE_TO_PROCESS_IT_S_TEXT_CONTENT">
            <summary>The Constant WORKER_UNABLE_TO_PROCESS_IT_S_TEXT_CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.LogMessageConstant.WORKER_UNABLE_TO_PROCESS_OTHER_WORKER">
            <summary>The Constant WORKER_UNABLE_TO_PROCESS_OTHER_WORKER.</summary>
        </member>
        <member name="M:iText.Html2pdf.LogMessageConstant.#ctor">
            <summary>Instantiates a new log message constant.</summary>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Font.DefaultFontProvider">
            <summary>
            The default
            <see cref="T:iText.Layout.Font.FontProvider"/>
            for pdfHTML, that, as opposed to
            the font provider in iText 7, also includes a series of fonts that
            are shipped with the add-on.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Font.DefaultFontProvider.SHIPPED_FONT_RESOURCE_PATH">
            <summary>The path to the shipped fonts.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Font.DefaultFontProvider.SHIPPED_FONT_NAMES">
            <summary>The file names of the shipped fonts.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Font.DefaultFontProvider"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Font.DefaultFontProvider"/>
            instance.
            </summary>
            <param name="registerStandardPdfFonts">use true if you want to register the standard Type 1 fonts (can't be embedded)
                </param>
            <param name="registerShippedFreeFonts">use true if you want to register the shipped fonts (can be embedded)
                </param>
            <param name="registerSystemFonts">use true if you want to register the system fonts (can require quite some resources)
                </param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.AddShippedFreeFonts">
            <summary>Adds the shipped free fonts.</summary>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Form.FormFieldNameResolver">
            <summary>Utilities class that resolves form field names.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.DEFAULT_NAME">
            <summary>The default base name of a field: "Field".</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.NAME_COUNT_SEPARATOR">
            <summary>The separator between a field name and an index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.names">
            <summary>A map containing all the base field names, mapped to the current index.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Form.FormFieldNameResolver"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.ResolveFormName(System.String)">
            <summary>Resolves a proposed field name to a valid field name.</summary>
            <param name="name">the proposed name</param>
            <returns>the valid name</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.Reset">
            <summary>Resets the map containing all the field names.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.NormalizeString(System.String)">
            <summary>Normalizes a field name.</summary>
            <param name="s">the proposed field name</param>
            <returns>the normalized name</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.ResolveNormalizedFormName(System.String)">
            <summary>Resolves a normalized form name.</summary>
            <param name="name">the proposed name</param>
            <returns>the resolved name</returns>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Form.RadioCheckResolver">
            <summary>Utilities class that resolves radio's checked property value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.RadioCheckResolver.checked">
            <summary>A map containing all the radio group names, mapped to the corresponded checked radio field.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.RadioCheckResolver.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Form.RadioCheckResolver"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.RadioCheckResolver.CheckField(System.String,iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio)">
            <summary>Checks the radio field.</summary>
            <param name="radioGroupName">the name of the radio group the radio field belongs to</param>
            <param name="checkedField">the radio field to be checked</param>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Resource.ResourceResolver">
            <summary>Utilities class to resolve resources.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.ResourceResolver.uriResolver">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Resolver.Resource.UriResolver"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.ResourceResolver.imageCache">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Resolver.Resource.SimpleImageCache"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.ResourceResolver.#ctor(System.String)">
            <summary>
            Creates
            <see cref="T:iText.Html2pdf.Resolver.Resource.ResourceResolver"/>
            instance. If
            <paramref name="baseUri"/>
            is a string that represents an absolute URI with any schema
            except "file" - resources url values will be resolved exactly as "new URL(baseUrl, uriString)". Otherwise base URI
            will be handled as path in local file system.
            <p>
            The main difference between those two is handling of the relative URIs of resources with slashes in the beginning
            of them (e.g. "/test/uri", or "//itextpdf.com/example_resources/logo.img"): if base URI is handled as local file
            system path, then in those cases resources URIs will be simply concatenated to the base path, rather than processed
            with URI resolution rules (See RFC 3986 "5.4.  Reference Resolution Examples"). However absolute resource URIs will
            be processed correctly.
            </p>
            <p>
            If empty string or relative URI string is passed as base URI, then it will be resolved against current working
            directory of this application instance.
            </p>
            </summary>
            <param name="baseUri">base URI against which all relative resource URIs will be resolved.</param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.ResourceResolver.RetrieveImage(System.String)">
            <summary>
            Retrieve
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            .
            </summary>
            <param name="src">either link to file or base64 encoded stream.</param>
            <returns>PdfImageXObject on success, otherwise null.</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.ResourceResolver.RetrieveStyleSheet(System.String)">
            <summary>
            Open an
            <see cref="T:System.IO.Stream"/>
            to a style sheet URI.
            </summary>
            <param name="uri">the URI</param>
            <returns>
            the
            <see cref="T:System.IO.Stream"/>
            </returns>
            <exception cref="T:System.IO.IOException">Signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.ResourceResolver.RetrieveStream(System.String)">
            <summary>
            Retrieve a resource as a byte array from a source that
            can either be a link to a file, or a base64 encoded
            <see cref="T:System.String"/>
            .
            </summary>
            <param name="src">either link to file or base64 encoded stream.</param>
            <returns>byte[] on success, otherwise null.</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.ResourceResolver.ResolveAgainstBaseUri(System.String)">
            <summary>Resolves a given URI against the base URI.</summary>
            <param name="uri">the uri</param>
            <returns>the url</returns>
            <exception cref="T:System.UriFormatException">the malformed URL exception</exception>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.ResourceResolver.ResetCache">
            <summary>Resets the simple image cache.</summary>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Resource.SimpleImageCache">
            <summary>Simple implementation of an image cache.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.SimpleImageCache.cache">
            <summary>The cache mapping a source path to an Image XObject.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.SimpleImageCache.imagesFrequency">
            <summary>Stores how many times each image is used.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.SimpleImageCache.capacity">
            <summary>The capacity of the cache.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.SimpleImageCache.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Resource.SimpleImageCache"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.SimpleImageCache.#ctor(System.Int32)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Resource.SimpleImageCache"/>
            instance.
            </summary>
            <param name="capacity">the capacity</param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.SimpleImageCache.PutImage(System.String,iText.Kernel.Pdf.Xobject.PdfImageXObject)">
            <summary>Adds an image to the cache.</summary>
            <param name="src">the source path</param>
            <param name="imageXObject">the image XObject to be cached</param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.SimpleImageCache.GetImage(System.String)">
            <summary>Gets an image from the cache.</summary>
            <param name="src">the source path</param>
            <returns>the image XObject</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.SimpleImageCache.Size">
            <summary>Gets the size of the cache.</summary>
            <returns>the cache size</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.SimpleImageCache.Reset">
            <summary>Resets the cache.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.SimpleImageCache.EnsureCapacity">
            <summary>
            Ensures the capacity of the cache by removing the least important images
            (based on the number of times an image is used).
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.UriEncodeUtil.unreservedAndReserved">
            <summary>
            Set of 256 characters with the bits that don't need encoding set to on.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.UriEncodeUtil.caseDiff">
            <summary>
            The difference between the value a character in lower cases and the upper case character value.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.UriEncodeUtil.dfltEncName">
            <summary>
            The default encoding ("UTF-8").
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriEncodeUtil.Encode(System.String)">
            <summary>
            Encodes a <see cref="T:System.String"/> in the default encoding and default uri scheme to an HTML-encoded <see cref="T:System.String"/>.
            </summary>
            <param name="s">the original string</param>
            <returns>the encoded string</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriEncodeUtil.Encode(System.String,System.String)">
            <summary>
            Encodes a <see cref="T:System.String"/> in a specific encoding and specific uri scheme to an HTML-encoded <see cref="T:System.String"/>.
            </summary>
            <param name="s">the original string</param>
            <param name="enc">the encoding</param>
            <returns>the encoded string</returns>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Resource.UriResolver">
            <summary>
            Utilities class to resolve URIs.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.UriResolver.baseUrl">
            <summary>
            The base url.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Resource.UriResolver.isLocalBaseUri">
            <summary>
            Indicates if the Uri refers to a local resource.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriResolver.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:iText.Html2pdf.Resolver.Resource.UriResolver"/> instance.
            </summary>
            <param name="baseUri"> the base URI</param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriResolver.GetBaseUri">
            <summary>
            Gets the base URI.
            </summary>
            <returns>the base uri</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriResolver.ResolveAgainstBaseUri(System.String)">
            <summary>
            Resolve a given URI against the base URI.
            </summary>
            <param name="uriString">the given URI</param>
            <returns>the resolved URI</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriResolver.ResolveBaseUrlOrPath(System.String)">
            <summary>
            Resolves the base URI to an URL or path.
            </summary>
            <param name="base">the base URI</param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriResolver.BaseUriAsUrl(System.String)">
            <summary>
            Resolves a base URI as an URL.
            </summary>
            <param name="baseUriString">the base URI</param>
            <returns>the URL, or null if not successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriResolver.UriAsFileUrl(System.String)">
            <summary>
            Resolves a base URI as a file URL.
            </summary>
            <param name="baseUriString">the base URI</param>
            <returns>the file URL</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.UriResolver.IsLocalBaseUri">
            <summary>
            Check if baseURI is local
            </summary>
            <returns>true if baseURI is local, otherwise false</returns>
        </member>
        <member name="T:iText.Html2pdf.Util.TagProcessorMapping">
            <summary>
            Class that allows to map keys (html tags, css attributes) to the
            corresponding tag processors (a tag worker or a CSS applier).
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Util.TagProcessorMapping.DEFAULT_DISPLAY_KEY">
            <summary>The default display key.</summary>
        </member>
        <member name="F:iText.Html2pdf.Util.TagProcessorMapping.mapping">
            <summary>The actual mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Util.TagProcessorMapping"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping.PutMapping(System.String,System.Type)">
            <summary>Add a new tag to the map.</summary>
            <param name="tag">the key</param>
            <param name="mappingClass">the class that maps to the tag</param>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping.PutMapping(System.String,System.String,System.Type)">
            <summary>Add a new tag to the map.</summary>
            <param name="tag">the key</param>
            <param name="display">the display value</param>
            <param name="mappingClass">the class that maps to the tag</param>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping.GetMapping(System.String)">
            <summary>Gets the class that maps to a specific tag.</summary>
            <param name="tag">the key</param>
            <returns>the class that maps to the tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping.GetMapping(System.String,System.String)">
            <summary>Gets the class that maps to a specific tag.</summary>
            <param name="tag">the key</param>
            <param name="display">the display value</param>
            <returns>the class that maps to the tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping.EnsureMappingExists(System.String)">
            <summary>Ensure that a mapping for a specific key exists.</summary>
            <param name="tag">the key</param>
            <returns>the map</returns>
        </member>
    </members>
</doc>
